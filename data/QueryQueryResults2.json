[
    {
        "Id": "56725639",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56606447",
        "CreationDate": "2019-06-23 16:05:52",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<p>You can use <a href=\"https://alasql.org/\" rel=\"nofollow noreferrer\">Alasql</a> to do some of what you want, but it does not support grouping.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var data = [\n  {\n    name: 'Tom',\n    age: 29,\n    isAdult: 1\n  },\n  {\n    name: 'Tom',\n    age: 14,\n    isAdult: 0\n  },\n  {\n    name: 'Dina',\n    age: 20,\n    isAdult: 1\n  }\n];\n\nvar res = alasql('SELECT name, age from ? a1 JOIN ? a2 WHERE a1.isAdult != a2.isAdult AND a1.name = a2.name', [data, data]);\n  \ndocument.getElementById('result').textContent = JSON.stringify(res);</code></pre>\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://cdn.jsdelivr.net/alasql/0.2/alasql.min.js\"&gt;&lt;/script&gt; \n\n&lt;span id=\"result\"&gt;&lt;/span&gt;</code></pre>\n</div>\n</div>\n</p>\n",
        "OwnerUserId": "731416",
        "OwnerDisplayName": "",
        "LastEditorUserId": "731416",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-06-23 16:13:12",
        "LastActivityDate": "2019-06-23 16:13:12",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56725644",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56606447",
        "CreationDate": "2019-06-23 16:06:57",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<p>It is good stuff what you are looking for. :) Sadly thanks to some trends in ~2010 as far as I know there is no actively maintained and supported API for this. <strong>But...</strong></p>\n\n<p><strong>If you want to have full <code>ANSI SQL</code></strong> on the client side in memory and you are willing to populate the database you could run the mentioned <a href=\"https://github.com/kripken/sql.js/\" rel=\"nofollow noreferrer\"><code>SQLite</code></a>. Maybe this the only fulfilling option for you (if you could not leave some of the requirements).</p>\n\n<p>If you could allow the luxury to copy data you could check out the <a href=\"https://alasql.org/\" rel=\"nofollow noreferrer\"><strong><code>AlaSQL</code></strong> project</a> it <strong>does support <code>join</code>-s and some of the ANSI SQL features, but it is not complete</strong> and it contains known <a href=\"https://github.com/agershun/alasql/labels/Bug\" rel=\"nofollow noreferrer\">disruptive bugs</a>:</p>\n\n<blockquote>\n  <p>Please be aware that AlaSQL has bugs. Beside having some bugs, there\n  are a number of limitations:</p>\n  \n  <p>AlaSQL has a (long) list of keywords that must be escaped if used for\n  column names. When selecting a field named key please write SELECT\n  <code>key</code> FROM ... instead. This is also the case for words like <code>value</code>,\n  <code>read</code>, <code>count</code>, <code>by</code>, <code>top</code>, <code>path</code>, <code>deleted</code>, <code>work</code> and <code>offset</code>.\n  Please consult the full list of keywords.</p>\n  \n  <p>It is OK to SELECT 1000000 records or to JOIN two tables with 10000\n  records in each (You can use streaming functions to work with longer\n  datasources - see test/test143.js) but be aware that the workload is\n  multiplied so SELECTing from more than 8 tables with just 100 rows in\n  each will show bad performance. This is one of our top priorities to\n  make better.</p>\n  \n  <p>Limited functionality for transactions (supports only for\n  localStorage) - Sorry, transactions are limited, because AlaSQL\n  switched to more complex approach for handling PRIMARY KEYs / FOREIGN\n  KEYs. Transactions will be fully turned on again in a future version.</p>\n  \n  <p>A (FULL) OUTER JOIN and RIGHT JOIN of more than 2 tables will not\n  produce expected results. INNER JOIN and LEFT JOIN are OK.</p>\n  \n  <p>Please use aliases when you want fields with the same name from\n  different tables (SELECT a.id AS a_id, b.id AS b_id FROM ?).</p>\n  \n  <p>At the moment AlaSQL does not work with JSZip 3.0.0 - please use\n  version 2.x.</p>\n  \n  <p>JOINing a sub-SELECT does not work. Please use a with structure\n  (Example here) or fetch the sub-SELECT to a variable and pass it as an\n  argument (Example here).</p>\n  \n  <p>AlaSQL uses the FileSaver.js library for saving files locally from the\n  browser. Please be aware that it does not save files in Safari 8.0.</p>\n  \n  <p>There are probably many others. Please help us fix them by submitting\n  an issue. Thank you!</p>\n</blockquote>\n\n<p>We planned to use it in one project, but there were more problems than solutions (for us) while introducing the project to our stack. So we backed out of from it. So I do not have production experience with this piece software... </p>\n\n<p>At older times I hoped that <strong><code>Google Gears</code></strong> will support something like the desired function but partly it got replaced by <code>HTML5</code> client side storage and sadly the project got <a href=\"http://gearsblog.blogspot.com/2011/03/stopping-gears.html\" rel=\"nofollow noreferrer\"><strong>discontinued</strong>.</a> </p>\n\n<p>The <a href=\"https://www.w3.org/TR/webdatabase/\" rel=\"nofollow noreferrer\"><strong><code>HTML5 WebSQL Database</code></strong></a> <strong>would have been perfect for your use-case, but it is sadly <a href=\"https://softwareengineering.stackexchange.com/questions/220254/why-is-web-sql-database-deprecated\">depricated</a></strong>. Tho most (?) browsers still support it in 2019. You can check some examples <a href=\"https://www.tutorialspoint.com/html5/html5_web_sql.htm\" rel=\"nofollow noreferrer\">here</a>. If you can allow yourself to build on a depricated API this could be the solution, but I do not really recommend it as it is not guaranteed that it will work...</p>\n\n<p>When our project run having the same problems we ended up having to use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage\" rel=\"nofollow noreferrer\">localStorage</a> and program every \"SELECT\" manually, which of course was not at all ANSI SQL like...</p>\n\n<p>If we roll back to the original problem <strong>\"[SQL] query the Arrow data directly\"</strong> I have no adapter in mind to use it as SQL... These kind of operations still tend to be on the server side and with the wasm SQLite I think those are the options.</p>\n",
        "OwnerUserId": "4823977",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-06-23 16:06:57",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "55244911",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55243660",
        "CreationDate": "2019-03-19 15:45:04",
        "DeletionDate": "",
        "Score": "8",
        "ViewCount": "",
        "Body": "<p>I don't know the full answer and I have next to no knowledge of the internal workings of the Rust compiler, but here are some deductions I've come to from my experience with Rust.</p>\n\n<p>Information about types in Rust can \"flow backwards\", but there are certain times when Rust needs to know (for absolute certain) the type of an expression. In these situations, it must \"already\" know the type, i.e. it will not continue to look forward.</p>\n\n<p>From what I've seen, this situation is limited to method calls. I suspect it has something to do with the fact that methods can be implemented on traits, which substantially complicates things. I doubt that there are any traits in scope with a method named <code>some_method</code>, but I think that whenever the Rust compiler encounters a method call it requires the type to already be known for certain.</p>\n\n<p>You can see this happen a <em>lot</em> with method calls on types which implement traits, the most common being the <code>collect</code> method on a type that implements the <code>Iter</code> trait. You will be able to call <code>collect</code>, but won't be able to call any methods on the result unless you specify the type.</p>\n\n<p>So this works:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn create_numbers(last_num: i32) -&gt; Vec&lt;i32&gt; {\n    let x = (0..10).collect();\n    x\n}\n</code></pre>\n\n<p>But this does not:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>fn create_numbers(last_num: i32) -&gt; Vec&lt;i32&gt; {\n    let x = (0..10).collect();\n    // In order to call `push`, we need to *already* know the type\n    // of x for \"absolute certain\", and the Rust compiler doesn't \n    // keep looking forward\n    x.push(42);\n    x\n}\n</code></pre>\n",
        "OwnerUserId": "7343786",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-03-19 15:45:04",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "55251229",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55243660",
        "CreationDate": "2019-03-19 23:04:09",
        "DeletionDate": "",
        "Score": "20",
        "ViewCount": "",
        "Body": "<p>Based on known facts (see below), it fails to compile because:</p>\n\n<ul>\n<li>the type checker goes through the function <strong>in the order it was written</strong>,</li>\n<li>in <code>let example = Default::default();</code>, <code>example</code> can be anything which implements <code>Default</code>,</li>\n<li>field accesses &amp; method calls require a known type,</li>\n<li>\"anything implementing <code>Default</code>\" is not a known type.</li>\n</ul>\n\n<p>I replaced <code>some_method()</code> with a field access and it produces same error.</p>\n\n<hr>\n\n<p>From <a href=\"https://github.com/rust-lang/rust/issues/42333\" rel=\"nofollow noreferrer\">Type inference depends on ordering (#42333)</a>:</p>\n\n<blockquote>\n  <pre class=\"lang-rust prettyprint-override\"><code>use std::path::PathBuf;\n\npub struct Thing {\n    pub f1: PathBuf,\n}\n\nfn junk() -&gt; Vec&lt;Thing&gt; {\n    let mut things = Vec::new();\n    for x in vec![1, 2, 3] {\n        if x == 2 {\n            for thing in things.drain(..) {\n                thing.f1.clone();\n            }\n            return vec![]\n        }\n        things.push(Thing{f1: PathBuf::from(format!(\"/{}\", x))});\n    }   \n    things  \n}               \n\nfn main() { \n    junk();\n}\n</code></pre>\n</blockquote>\n\n<p>This produces a compiler error with Rust 1.33.0:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>error[E0282]: type annotations needed\n  --&gt; src/main.rs:13:17\n   |\n9  |     let mut things = Vec::new();\n   |         ---------- consider giving `things` a type\n...\n13 |                 thing.f1.clone();\n   |                 ^^^^^ cannot infer type\n   |\n   = note: type must be known at this point\n</code></pre>\n\n<p>You should focus on the following comments from <a href=\"https://github.com/eddyb\" rel=\"nofollow noreferrer\">eddyb</a> (a well-known member of the the Rust language design team <a href=\"https://internals.rust-lang.org/t/subteam-reports-2016-05-09/3449\" rel=\"nofollow noreferrer\">since May, 2016</a>).</p>\n\n<p><a href=\"https://github.com/rust-lang/rust/issues/42333#issuecomment-306694398\" rel=\"nofollow noreferrer\">Comment #1</a>:</p>\n\n<blockquote>\n  <p>This is a known limitation of the in-order type-checker. While <em>inference</em> flows freely, <code>thing.f1.clone()</code> is checked <em>before</em> <code>things.push(Thing {...})</code> so it isn't known that <code>thing: Thing</code> when you try to access the <code>f1</code> field. We may in the future move away from this, but there are no immediate plans.</p>\n</blockquote>\n\n<p>What's more important is <a href=\"https://github.com/rust-lang/rust/issues/42333#issuecomment-306777156\" rel=\"nofollow noreferrer\">comment #2</a>:</p>\n\n<blockquote>\n  <p>What I mean is that the type-checker goes through the function <em>in the order it was written</em>. [...] Fields accesses and methods calls are simply not supported unless the type <em>is already known</em>.</p>\n</blockquote>\n",
        "OwnerUserId": "581190",
        "OwnerDisplayName": "",
        "LastEditorUserId": "155423",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-03-31 14:20:54",
        "LastActivityDate": "2019-03-31 14:20:54",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "5",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56647591",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56647032",
        "CreationDate": "2019-06-18 10:59:17",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<p>The short answer to your question is what is in the Java doc: We have <em>two</em> constants because we now need to be able to distinguish the <em>two</em> different initializations later, see below.</p>\n\n<p>Instead of two constants they could of course have introduced e.g. a boolean field in <code>ArrayList</code>, <code>private boolean initializedWithDefaultCapacity</code>; but that would require additional memory <em>per instance</em>, which seems to be against the goal to <em>save</em> a few bytes of memory.</p>\n\n<p>Why do we need to distinguish those two?</p>\n\n<p>Looking at <code>ensureCapacity()</code> we see what happens with <code>DEFAULTCAPACITY_EMPTY_ELEMENTDATA</code>:</p>\n\n<pre><code>public void ensureCapacity(int minCapacity) {\n    int minExpand = (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)\n        // any size if not default element table\n        ? 0\n        // larger than default for default empty table. It's already\n        // supposed to be at default size.\n        : DEFAULT_CAPACITY;\n\n    if (minCapacity &gt; minExpand) {\n        ensureExplicitCapacity(minCapacity);\n    }\n}\n</code></pre>\n\n<p>It seems that it is done this way to be somewhat 'compatible' to the behavior of the old implementation:</p>\n\n<p>If you did initialize the list with the default capacity, it will actually be initialized with an empty array now, <em>but</em>, as soon as the first element is inserted, it will basically revert to the same behavior as the old implementation, i.e. after the first element is added, the backing array has the <code>DEFAULT_CAPACITY</code> and from then on, the list behaves the same as previously.</p>\n\n<p>If, on the other hand, you explicitly specifiy an inital capacity, the array does not 'jump' to <code>DEFAULT_CAPACITY</code> but grows relatively from your specified initial capacity.</p>\n\n<p>I figure the reason for this 'optimization' may be for cases where you know you will be only storing one or two (i.e. less than <code>DEFAULT_CAPACITY</code>) elements in the list and you specify the initial capacity accordingly; in these cases, for example for a single-element list, you only get a single-element array, instead of a <code>DEFAULT_CAPACITY</code>-sized.</p>\n\n<p>Don't ask me what the <em>practical</em> benefit is of saving nine array elements of a reference type. Might be up to about 9*64 bit = 72 bytes of RAM per list. Yeay. ;-)</p>\n",
        "OwnerUserId": "1015327",
        "OwnerDisplayName": "",
        "LastEditorUserId": "1015327",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-06-18 11:19:48",
        "LastActivityDate": "2019-06-18 11:19:48",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "5",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56647661",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56647032",
        "CreationDate": "2019-06-18 11:02:47",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<p>This is most likely due to the case that the two constructor have different perceived default uses. </p>\n\n<p>The default (empty) constructor assumes that this will be a \"typical <code>ArrayList</code>\". Therefore, the number <code>10</code> is chosen as a sort of heuristic, aka \"what the typical average number of elements inserted will be that will not take up too much space but will not grow the array needlessly too\". On the other hand, the capacity constructor has the presupposition of \"you know what you're doing\" or \"you know what you will be using the <code>ArrayList for</code>\". Therefore, no heuristics of this type are present.</p>\n",
        "OwnerUserId": "6650970",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-06-18 11:02:47",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56647709",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56647032",
        "CreationDate": "2019-06-18 11:05:24",
        "DeletionDate": "",
        "Score": "3",
        "ViewCount": "",
        "Body": "<p>If you use the default constructor, the idea is to try to balance memory usage and reallocation. Hence a small default size (10) is used that should be fine for most applications.</p>\n\n<p>If you use the constructor with an explicit size, it is assumed that you know what you're doing. If you initialize it with 0 you are essentially saying: I am pretty sure this will either stay empty or not grow beyond very few elements.</p>\n\n<p>Now if you look at the implementations of <code>ensureCapacityInternal</code> in openjdk (<a href=\"http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/tip/src/share/classes/java/util/ArrayList.java\" rel=\"nofollow noreferrer\">link</a>), you can see that only the first time you add an item, this difference comes into play:</p>\n\n<pre><code>private void ensureCapacityInternal(int minCapacity) {\n    if (elementData == EMPTY_ELEMENTDATA) {\n        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);\n    }\n\n    ensureExplicitCapacity(minCapacity);\n}\n</code></pre>\n\n<p>If the default constructor is used, the size grows to <code>DEFAULT_CAPACITY</code> (10). This is to prevent too many reallocations if multiple elements are added. However if you explicitly created this ArrayList with size 0, it will simply grow to size 1 on the first element you add. This is because you told it that you know what you're doing.</p>\n\n<p><code>ensureExplicitCapacity</code> basically just calls <code>grow</code> (with some range/overflow checks), so let's look at that:</p>\n\n<pre><code>private void grow(int minCapacity) {\n    // overflow-conscious code\n    int oldCapacity = elementData.length;\n    int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);\n    if (newCapacity - minCapacity &lt; 0)\n        newCapacity = minCapacity;\n    if (newCapacity - MAX_ARRAY_SIZE &gt; 0)\n        newCapacity = hugeCapacity(minCapacity);\n    // minCapacity is usually close to size, so this is a win:\n    elementData = Arrays.copyOf(elementData, newCapacity);\n}\n</code></pre>\n\n<p>As you can see, it doesn't simply grow to a specific size, but it tries to be smart. The bigger the array is, the bigger it will grow even if <code>minCapacity</code> is just 1 bigger than the current capacity. The reasoning behind that is simple: The probability that a lof of items will be added is higher if the list is already big and vice versa. This is also why you see growth increments by 1 and then by 2 after the 5th element.</p>\n",
        "OwnerUserId": "9199167",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-06-18 11:05:24",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56647799",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56647032",
        "CreationDate": "2019-06-18 11:11:32",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<p>The capacity with the default constructor is 10 simply because <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html#ArrayList--\" rel=\"nofollow noreferrer\">the docs say so</a>. It would have been chosen as a sensible compromise between not using up too much memory off the bat, and not having to perform lots of array copies when adding the first few elements.</p>\n\n<p>The zero behaviour is slightly speculative, but I'm fairly confident with my reasoning here:</p>\n\n<p>It's because if you <em>explicitly</em> initialise an <code>ArrayList</code> with a size of zero, then add something to it, you're saying \"I'm not expecting this list to hold much, if anything at all.\" It therefore makes much, much more sense to grow the backing array slowly, as though it was initialised with a value of 1, rather than treating it as if it had no initial value specified at all. So it handles the special case of growing it to just 1 element, and then carries on as normal.</p>\n\n<p>To then complete the picture, an <code>ArrayList</code> explicitly initialised with a size of 1 would be expected to grow much more slowly (up to the point it hits the default \"10 element\" size) than the default one, otherwise there'd be no reason to initialise it with a small value in the first place.</p>\n",
        "OwnerUserId": "551406",
        "OwnerDisplayName": "",
        "LastEditorUserId": "551406",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-06-18 13:21:11",
        "LastActivityDate": "2019-06-18 13:21:11",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56647869",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56647032",
        "CreationDate": "2019-06-18 11:15:39",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<blockquote>\n  <p>but why would one inflate to 10 (a lot more than I asked for) and the other one to 1 (exactly as much as I requested)</p>\n</blockquote>\n\n<p>Probably because most people that create lists want to store <strong>more than</strong> 1 element in it.</p>\n\n<p>You know, when you want exactly one entry, why not use <code>Collections.singletonList()</code> for example.</p>\n\n<p>In other words, I think the answer is <strong>pragmatism</strong>. When you use the default constructor, the <strong>typical</strong> use case would be that you are going to add maybe a handful or so of elements quickly. </p>\n\n<p>Meaning: \"unknown\" is interpreted as \"a few\", whereas \"exactly 0 (or 1)\" is interpreted \"hmm, exactly 0 or 1\". </p>\n",
        "OwnerUserId": "1531124",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-06-18 11:15:39",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56648003",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56647032",
        "CreationDate": "2019-06-18 11:22:59",
        "DeletionDate": "",
        "Score": "15",
        "ViewCount": "",
        "Body": "<p>You get precisely what you asked for, respective what has been specified, even in older versions, where the implementation was different:</p>\n\n<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html#ArrayList--\" rel=\"noreferrer\"><code>ArrayList()</code></a>\n\n<blockquote>\n  <p>Constructs an empty list with an initial capacity of ten.</p>\n</blockquote>\n\n<a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html#ArrayList-int-\" rel=\"noreferrer\"><code>ArrayList(int)</code></a>\n\n<blockquote>\n  <p>Constructs an empty list with the specified initial capacity.</p>\n</blockquote>\n\n<p>So, constructing the <code>ArrayList</code> with the default constructor will give you an <code>ArrayList</code> with an initial capacity of ten, so as long as the list size is ten or smaller, no resize operation will ever be needed.</p>\n\n<p>In contrast, the constructor with the <code>int</code> argument will precisely use the specified capacity, subject to the <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html\" rel=\"noreferrer\">growing policy</a> which is specified as</p>\n\n<blockquote>\n  <p>The details of the growth policy are not specified beyond the fact that adding an element has constant amortized time cost.</p>\n</blockquote>\n\n<p>which applies even when you specify an initial capacity of zero.</p>\n\n<p>Java\u00a08 added the optimization that the creation of the ten elements array is postponed until the first element is added. This is specifically addressing the common case that <code>ArrayList</code> instances (created with the default capacity) stay empty for a long time or even their entire lifetime. Further, when the first actual operation is <code>addAll</code>, it might skip the first array resize operation. This does not affect lists with an explicit initial capacity, as those are usually chosen carefully.</p>\n\n<p>As stated in <a href=\"https://stackoverflow.com/a/34250231/2711488\">this answer</a>:</p>\n\n<blockquote>\n  <p>According to our performance analysis team, approximately 85% of ArrayList instances are created at default size so this optimization will be valid for an overwhelming majority of cases.</p>\n</blockquote>\n\n<p>The motivation was to optimize precisely these scenarios, not to touch the specified default capacity, which was defined back when <code>ArrayList</code> was created. (Though <a href=\"https://web.archive.org/web/20031204164228/http://java.sun.com/j2se/1.4.1/docs/api/java/util/ArrayList.html#ArrayList()\" rel=\"noreferrer\">JDK\u00a01.4</a> is the first one specifying it explicitly)</p>\n",
        "OwnerUserId": "2711488",
        "OwnerDisplayName": "",
        "LastEditorUserId": "2711488",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-06-18 11:30:56",
        "LastActivityDate": "2019-06-18 11:30:56",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "4",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54461064",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54460967",
        "CreationDate": "2019-01-31 12:52:41",
        "DeletionDate": "",
        "Score": "15",
        "ViewCount": "",
        "Body": "<p><code>struct Typo</code> is an elaborated type specifier. That affects how name lookup works.</p>\n\n<blockquote>\n  <p><strong>[basic.lookup.elab]</strong></p>\n  \n  <p><a href=\"https://timsong-cpp.github.io/cppwp/n4659/basic.lookup.elab#2\" rel=\"noreferrer\">2</a>: If the elaborated-type-specifier has no nested-name-specifier,\n  and unless the elaborated-type-specifier appears in a declaration with\n  the following form:</p>\n\n<pre><code>class-key attribute-specifier-seq identifier ;\n</code></pre>\n  \n  <p>the identifier is looked up according to [basic.lookup.unqual] but\n  ignoring any non-type names that have been declared. If the\n  elaborated-type-specifier is introduced by the enum keyword and this\n  lookup does not find a previously declared type-name, the\n  elaborated-type-specifier is ill-formed. If the\n  elaborated-type-specifier is introduced by the class-key and this\n  lookup does not find a previously declared type-name, or if the\n  elaborated-type-specifier appears in a declaration with the form:</p>\n\n<pre><code>class-key attribute-specifier-seq identifier ;\n</code></pre>\n  \n  <p>the elaborated-type-specifier is a declaration that introduces the\n  class-name as described in [basic.scope.pdecl].</p>\n</blockquote>\n\n<p>So in <code>std::vector&lt;struct Typo&gt; a;</code>, because <code>struct Typo</code> does not find a previously declared <code>Typo</code>, it serves as a forward declaration for the type. And as such, its the vector instantiation that <em>may</em><sup>1</sup> complain the type it got is incomplete because it will try to do stuff with it.</p>\n\n<p>While in <code>std::vector&lt;Typo&gt; b;</code>, looking up <code>Typo</code> finds nothing. There is no previous declaration for it, so its at this point a diagnostic should be issued that this identifier is undeclared.</p>\n\n<hr>\n\n<p><sub>\n<sup>1</sup> - Depends on what standard you are compiling to, and what members of the vector you are using. Support for incomplete types has been added.\n</sub></p>\n",
        "OwnerUserId": "817643",
        "OwnerDisplayName": "",
        "LastEditorUserId": "817643",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-01-31 13:07:35",
        "LastActivityDate": "2019-01-31 13:07:35",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "12",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58772634",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58772267",
        "CreationDate": "2019-11-08 19:23:00",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<p>Standard layoutness depends on standard layoutness of non-static members:</p>\n\n<blockquote>\n  <p>[class.prop]</p>\n  \n  <p>A class S is a standard-layout class if it:</p>\n  \n  <ul>\n  <li><p>has no non-static data members of type non-standard-layout class (or array of such types) or reference,</p></li>\n  <li><p>...</p></li>\n  </ul>\n</blockquote>\n\n<p>Triviality also depends on triviality of non-static members. For conciseness, I've quoted only the rule for the default constructor, but the other special member functions have similar wording:</p>\n\n<blockquote>\n  <p>[class.default.ctor]</p>\n  \n  <p>A default constructor is trivial if it is not user-provided and if: </p>\n  \n  <ul>\n  <li>...</li>\n  <li>for all of the non-static data members of its class that are of class type (or array thereof), each such class has a trivial destructor.</li>\n  </ul>\n</blockquote>\n\n<p>As far as I can tell, the explicit requirement of PODness to apply to members is redundant, since it also implicitly follows from the requirements of being standard layout and trivial.</p>\n",
        "OwnerUserId": "2079303",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-11-08 19:23:00",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58773241",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58772267",
        "CreationDate": "2019-11-08 20:16:28",
        "DeletionDate": "",
        "Score": "11",
        "ViewCount": "",
        "Body": "<blockquote>\n  <p>In C++20, the concept of POD is deprecated, supposedly because it is a meaningless composite trait of being trivial and standard-layout.</p>\n</blockquote>\n\n<p>Incorrect. The term POD is being deprecated because <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#2323\" rel=\"noreferrer\">it no longer matters</a>:</p>\n\n<blockquote>\n  <p>The term POD no longer serves a purpose in the standard, it is merely defined, and restrictions apply for when a few other types preserve this vestigial property.</p>\n</blockquote>\n\n<p>Essentially, a type which is both trivial and standard layout doesn't gain any abilities beyond what being trivial and being standard layout provide on their own. The combination of the two doesn't make the type special, and the two properties don't really have much to do with one another.</p>\n\n<p>Standard layout is about the layout of its non-empty subobjects being well-defined (as well as its empty base class subobjects not disturbing the type's layout). Triviality is about whether the object has some meaning beyond the block of bits that it stores (and whether it is conceptually a valid object if it is initialized with an arbitrary block of bits).</p>\n\n<p>If I'm making a template that takes a type <code>T</code>, and I want to see if I can <code>memcpy</code> objects of that type, I don't care about the layout of its members; I want to know if it is TriviallyCopyable. Similarly, the correctness of <code>offsetof</code> does not care in the slightest if the class has a user-provided copy constructor. All it cares about is if the layout of member subobjects happens in a clear, standard-enforced order.</p>\n\n<p>Basically, people looked around and realized that nothing in C++ is left that specifically needs the <em>intersection</em> of triviality and standard layout. So we don't need to reserve a term for it. Those few places where the standard expressly states that some type will be \"POD\" can simply be replaced by \"trivial and standard layout\", as appropriate.</p>\n\n<blockquote>\n  <p>Is this recursive requirement redundant?</p>\n</blockquote>\n\n<p>Since both of the constituent requirements are individually recursive, the intersection of the two is recursive as well. So there is no explicit need to state that all subobjects are also POD. This was more than likely just a case of a copy-and-paste oddity, where the original definition said something like \"all non-static data members must be POD types\" and they just kept that statement as is.</p>\n",
        "OwnerUserId": "734069",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-11-08 20:16:28",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "1",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54073065",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54044022",
        "CreationDate": "2019-01-07 10:59:46",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<p>If this is an option, substituting the character <code>;</code> with <code>,</code> in the string is faster.\nI have written the string <code>x</code> to a file <code>test.dat</code>.</p>\n\n<pre><code>def csv_reader_4(x):\n    with open(x, 'r') as f:\n        a = f.read()\n    return pd.read_csv(StringIO(unicode(a.replace(';', ','))), usecols=[3, 4, 5])\n</code></pre>\n\n<p>The <code>unicode()</code> function was necessary to avoid a TypeError in Python 2.</p>\n\n<p>Benchmarking:</p>\n\n<pre><code>%timeit csv_reader_2('test.dat')  # 1.6 s per loop\n%timeit csv_reader_4('test.dat')  # 1.2 s per loop\n</code></pre>\n",
        "OwnerUserId": "3826323",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-01-07 10:59:46",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54075275",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54044022",
        "CreationDate": "2019-01-07 13:23:04",
        "DeletionDate": "",
        "Score": "6",
        "ViewCount": "",
        "Body": "<h3>Use a command-line tool</h3>\n\n<p>By far the most efficient solution I've found is to use a specialist command-line tool to replace <code>\";\"</code> with <code>\",\"</code> and <em>then</em> read into Pandas. Pandas or pure Python solutions do not come close in terms of efficiency.</p>\n\n<p>Essentially, using CPython or a tool written in C / C++ is likely to outperform Python-level manipulations.</p>\n\n<p>For example, using <a href=\"http://fart-it.sourceforge.net/\" rel=\"noreferrer\">Find And Replace Text</a>:</p>\n\n<pre><code>import os\n\nos.chdir(r'C:\\temp')                       # change directory location\nos.system('fart.exe -c file.csv \";\" \",\"')  # run FART with character to replace\n\ndf = pd.read_csv('file.csv', usecols=[3, 4, 5], header=None)  # read file into Pandas\n</code></pre>\n",
        "OwnerUserId": "9209546",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-01-07 13:23:04",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "3",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54136737",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54044022",
        "CreationDate": "2019-01-10 20:55:34",
        "DeletionDate": "",
        "Score": "2",
        "ViewCount": "",
        "Body": "<p>How about using a generator to do the replacement, and combining it with an appropriate decorator to get a file-like object suitable for pandas?</p>\n\n<pre><code>import io\nimport pandas as pd\n\n# strings in first 3 columns are of arbitrary length\nx = '''ABCD,EFGH,IJKL,34.23;562.45;213.5432\nMNOP,QRST,UVWX,56.23;63.45;625.234\n'''*10**6\n\ndef iterstream(iterable, buffer_size=io.DEFAULT_BUFFER_SIZE):\n    \"\"\"\n    http://stackoverflow.com/a/20260030/190597 (Mechanical snail)\n    Lets you use an iterable (e.g. a generator) that yields bytestrings as a\n    read-only input stream.\n\n    The stream implements Python 3's newer I/O API (available in Python 2's io\n    module).\n\n    For efficiency, the stream is buffered.\n    \"\"\"\n    class IterStream(io.RawIOBase):\n        def __init__(self):\n            self.leftover = None\n        def readable(self):\n            return True\n        def readinto(self, b):\n            try:\n                l = len(b)  # We're supposed to return at most this much\n                chunk = self.leftover or next(iterable)\n                output, self.leftover = chunk[:l], chunk[l:]\n                b[:len(output)] = output\n                return len(output)\n            except StopIteration:\n                return 0    # indicate EOF\n    return io.BufferedReader(IterStream(), buffer_size=buffer_size)\n\ndef replacementgenerator(haystack, needle, replace):\n    for s in haystack:\n        if s == needle:\n            yield str.encode(replace);\n        else:\n            yield str.encode(s);\n\ncsv = pd.read_csv(iterstream(replacementgenerator(x, \";\", \",\")), usecols=[3, 4, 5])\n</code></pre>\n\n<p>Note that we convert the string (or its constituent characters) to bytes through str.encode, as this is required for use by Pandas.</p>\n\n<p>This approach is functionally identical to the answer by Daniele except for the fact that we replace values \"on-the-fly\", as they are requested instead of all in one go.</p>\n",
        "OwnerUserId": "1408531",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-01-10 20:55:34",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "1",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54166567",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54044022",
        "CreationDate": "2019-01-13 06:25:01",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<p>A very very very fast one, <code>3.51</code> is the result, simply just make <code>csv_reader_4</code> the below, it simply converts <code>StringIO</code> to <code>str</code>, then replaces <code>;</code> with <code>,</code>, and reads the dataframe with <code>sep=','</code>:</p>\n\n<pre><code>def csv_reader_4(x):\n    with x as fin:\n        reader = pd.read_csv(StringIO(fin.getvalue().replace(';',',')), sep=',',header=None)\n    return reader\n</code></pre>\n\n<p>The benchmark:</p>\n\n<pre><code>%timeit csv_reader_4(StringIO(x)) # 3.51 s per loop\n</code></pre>\n",
        "OwnerUserId": "8708364",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-01-13 06:25:01",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "3",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57958083",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57957168",
        "CreationDate": "2019-09-16 13:37:42",
        "DeletionDate": "",
        "Score": "2",
        "ViewCount": "",
        "Body": "<p><strike>The code producing this warning is <strong>not valid C</strong> and should be fixed.</strike> The C language requires issuing \"diagnostics\" (warnings or errors) for constraint violations <strike>such as this</strike>, and does not mandate the existence of any way to disable them. I believed (and I suspect many others do) that <code>extern</code> was a constraint violation with an initializer, since in normal usage <code>extern</code> only provides a declaration, not a definition. However, per 6.9.2 \u00b61:</p>\n\n<blockquote>\n  <p>If the declaration of an identifier for an object has file scope and an initializer, the declaration is an external definition for the identifier.</p>\n</blockquote>\n\n<p>Being that the grammar seems to allow <code>extern</code> with an initializer, this is indeed a valid definition.</p>\n\n<p>GCC has a <code>-w</code> option that will probably shut the warning off, but at the expense of disabling all warnings with no ability to override and turn some back on. This would make sense if it were a constraint violation and would be a sign to fix the invalid code; however, the code is valid and GCC absolutely should be providing a mechanism not to produce a spurious warning about it.</p>\n\n<p>As noted by Eljay in a comment:</p>\n\n<blockquote>\n  <p>Warnings come in several categories: by the standard required diagnostic message; lint-like static analysis of common accidental language abuse/misuse; well-meaning but still stylistic opinion (e.g., <code>-Weffc++</code>); possibly too pedantic and/or minutia (e.g. <code>-Weverything</code> or <code>-pedantic</code>). The latter categories ought to have \"opt-out\" ways to disable the specific warning, such as in the OP's case.</p>\n</blockquote>\n\n<p>GCC generally tries to honor this <em>ought</em>, most of the time, and I think the absence of a way to disable this one would be worth reporting to the <a href=\"https://gcc.gnu.org/bugzilla/\" rel=\"nofollow noreferrer\">GCC bug tracker</a>.</p>\n",
        "OwnerUserId": "379897",
        "OwnerDisplayName": "",
        "LastEditorUserId": "379897",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-09-24 15:23:51",
        "LastActivityDate": "2019-09-24 15:23:51",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57958637",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57957168",
        "CreationDate": "2019-09-16 14:08:13",
        "DeletionDate": "",
        "Score": "3",
        "ViewCount": "",
        "Body": "<blockquote>\n  <p>There're hundreds of instances of this warning and they flood the compiler output. Hard to ignore. </p>\n</blockquote>\n\n<p>If this is external library there is way to reduce this warning to single warring report.\nI'm suspecting that you can live with single warning message.</p>\n\n<p>Wrap this library API with your own functions/methods. You can name them 1:1 using different namespace to avoid complex modification of own code where this API is used. This way this warning will be reported only when source including problematic header file is included. Aim is to include problematic header file only once.</p>\n\n<p>Depending how this API looks like it may be harder to do.</p>\n\n<p>Anyway if this is third party library then this approach will make it easier to mock that library and write test for your code.</p>\n",
        "OwnerUserId": "1387438",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-09-16 14:08:13",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57959084",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57957168",
        "CreationDate": "2019-09-16 14:34:17",
        "DeletionDate": "",
        "Score": "4",
        "ViewCount": "",
        "Body": "<p>For a direct answer to the posed question:</p>\n\n<p>As can be seen from GCC's source code, there is no (semi-)specific switch to disable this warning. It seems to only be disabled by disabling all warning (<code>-w</code>) or including the offending code as system header via <code>-isystem</code>, both of which are non-specific in the suppressed warnings.</p>\n\n<p>There is a related open bug report on GCC <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=45977\" rel=\"nofollow noreferrer\">here</a> and an open meta-bug for similar cases of warnings without switches <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=44209\" rel=\"nofollow noreferrer\">here</a>.</p>\n\n<p>If you don't want to use the two non-specific suppression mechanisms, then you probably will have to patch in an additional flag to GCC or wait for the bugs to be worked on in order to disable this specific warning.</p>\n",
        "OwnerUserId": "11941443",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-09-16 14:34:17",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57959175",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57957168",
        "CreationDate": "2019-09-16 14:39:21",
        "DeletionDate": "",
        "Score": "2",
        "ViewCount": "",
        "Body": "<p>There isn't any specific flag to disable this, which is unfortunate, but there is the <code>-w</code> flag that will disable all warnings, with no way to re-enable them.</p>\n\n<p>From the <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html\" rel=\"nofollow noreferrer\">GCC docs</a>:</p>\n\n<blockquote>\n  <p><code>-w</code><br>\n      Inhibit all warning messages.</p>\n</blockquote>\n\n<p>But the better option here is to remove the <code>extern</code> from the variable declarations/definitions. That way, the compiler knows the variable is defined within the translation unit. You can contact the owners of the code to see if they can change it.</p>\n",
        "OwnerUserId": "10795151",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-09-16 14:39:21",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58456649",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58201173",
        "CreationDate": "2019-10-18 18:52:19",
        "DeletionDate": "",
        "Score": "2",
        "ViewCount": "",
        "Body": "<p>This is a tough call considering how little we know about what's occurring in your loading route.</p>\n\n<p>But...</p>\n\n<p>I've never had a need to build a loading route, only ever loading component(s) that gets rendered on multiple routes during init/data gathering stage.</p>\n\n<p>One argument for not having a loading route would be that a user could potentially navigate directly to this URL (accidentally) and then it seems like it wouldn't have enough context to know where to send the user or what action to take. Though this could mean that it falls through to an error route at this point. Overall, not a great experience.</p>\n\n<p>Another is that if you simplify your routes, navigation between routes becomes much simpler and behaves as expected/desired without the use of <code>$router.replace</code>.</p>\n\n<p>I understand this doesn't solve the question in the way you're asking. But I'd suggest rethinking this loading route.</p>\n\n<p><strong>App</strong></p>\n\n<pre><code>&lt;shell&gt;\n    &lt;router-view&gt;&lt;/router-view&gt;\n&lt;/shell&gt;\n\nconst routes = [\n  { path: '/', component: Main },\n  { path: '/results', component: Results }\n]\n\nconst router = new VueRouter({\n  routes,\n})\n\nconst app = new Vue({\n  router\n}).$mount('#app')\n</code></pre>\n\n<p><strong>Shell</strong></p>\n\n<pre><code>&lt;div&gt;\n    &lt;header&gt;\n        &lt;nav&gt;...&lt;/nav&gt;\n    &lt;/header&gt;\n    &lt;main&gt;\n        &lt;slot&gt;&lt;/slot&gt;\n    &lt;/main&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p><strong>Main Page</strong></p>\n\n<pre><code>&lt;section&gt;\n    &lt;form&gt;...&lt;/form&gt;\n&lt;/section&gt;\n\n{\n    methods: {\n        onSubmit() {\n            // ...\n\n            this.$router.push('/results')\n        }\n    }\n}\n</code></pre>\n\n<p><strong>Results Page</strong></p>\n\n<pre><code>&lt;section&gt;\n    &lt;error v-if=\"error\" :error=\"error\" /&gt;\n    &lt;results v-if=\"!error\" :loading=\"loading\" :results=\"results\" /&gt;\n    &lt;loading v-if=\"loading\" :percentage=\"loadingPercentage\" /&gt;\n&lt;/section&gt;\n\n{\n    components: {\n        error: Error,\n        results: Results,\n    },\n    data() {\n        return {\n            loading: false,\n            error: null,\n            results: null,\n        }\n    },\n    created () {\n        this.fetchData()\n    },\n    watch: {\n        '$route': 'fetchData'\n    },\n    methods: {\n        fetchData () {\n            this.error = this.results = null\n            this.loading = true\n\n            getResults((err, results) =&gt; {\n                this.loading = false\n\n                if (err) {\n                    this.error = err.toString()\n                } else {\n                    this.results = results\n                }\n            })\n        }\n    }\n}\n</code></pre>\n\n<p><strong>Results Component</strong></p>\n\n<p>Basically the exact same results component you already have, but if <code>loading</code> is true, or if <code>results</code> is null, however you prefer, you can create a fake dataset to iterate over and create skeleton versions, if you'd like to. Otherwise, you can just keep things the way you have it.</p>\n",
        "OwnerUserId": "2069860",
        "OwnerDisplayName": "",
        "LastEditorUserId": "2069860",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-10-22 20:00:24",
        "LastActivityDate": "2019-10-22 20:00:24",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "5",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58457365",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58201173",
        "CreationDate": "2019-10-18 19:53:44",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<p>This can be done with the <code>beforeEach</code> hook of the router.</p>\n\n<p>What you need to do is you must save a variable globally or in localStorage in the <code>loading</code> component when the data is loaded (before redirecting to the <code>results</code> component):</p>\n\n<pre><code>export default {\n  name: \"results\",\n  ...\n  importantTask() {\n    // do the important work...\n    localStorage.setItem('DATA_LOADED', JSON.stringify(true));\n    this.$router.push({path: \"/results/xxxx\"});\n  }\n}\n</code></pre>\n\n<p>And then you should check for this variable in the beforeEach hook and skip to the correct component:</p>\n\n<pre><code>// router.js...\nrouter.beforeEach((to, from, next) =&gt; {\n  const dataLoaded = JSON.parse(localStorage.getItem('DATA_LOADED'));\n  if (to.name === \"loading\" &amp;&amp; dataLoaded)\n  {\n    if (from.name === \"results\")\n    {\n      next({ name: \"main\"} );\n    }\n    if (from.name === \"main\")\n    {\n      next({ name: \"results\"} );\n    }\n  }\n  next();\n});\n</code></pre>\n\n<p>Also, do remember to reset the value to false in your <code>main</code> component when the query button is clicked (before routing to the <code>loading</code> component):</p>\n\n<pre><code>export default {\n  name: \"main\",\n  ...\n  queryButtonClicked() {\n    localStorage.setItem('DATA_LOADED', JSON.stringify(false));\n    this.$router.push({path: \"/loading\"});\n  }\n}\n</code></pre>\n",
        "OwnerUserId": "162176",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-10-18 19:53:44",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "1",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56901549",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56901198",
        "CreationDate": "2019-07-05 10:46:15",
        "DeletionDate": "",
        "Score": "15",
        "ViewCount": "",
        "Body": "<p>The lambda case is actually different than the others! You don't specify a return type for the lambda, so it is deduced. For the deduction to happen the lambda has to be instantiated.</p>\n\n<p>This is not the case for the function object, since there you specified the return type to be <code>void</code>. Changing the lambda to return <code>void</code> to avoid the deduction makes gcc/clang happy. :)</p>\n\n<pre><code>auto foo = [](auto... args) -&gt; void // &lt;---\n{\n    static_assert(sizeof...(args) == 42, \"!\");\n    ((args += \"\"), ...);\n};\n</code></pre>\n\n<p>And if you change the function object as follows:</p>\n\n<pre><code>struct Foo\n{\n    template &lt;typename ...Ts&gt;\n    auto operator ()(Ts... args) const // &lt;---- placeholder as return type\n    {\n        static_assert(sizeof...(args) == 42, \"!\");\n        ((args += \"\"), ...);\n    }\n} foo;\n</code></pre>\n\n<p>it does also instantiate <code>Foo::operator()</code> to be able to deduce the return type.</p>\n",
        "OwnerUserId": "3980929",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-07-05 10:46:15",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54447359",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54446734",
        "CreationDate": "2019-01-30 18:36:41",
        "DeletionDate": "",
        "Score": "2",
        "ViewCount": "",
        "Body": "<p>I would strongly caution against using Dynamic SQL with table names. You are setting yourself up for some serious SQL Injection issues. You should validate anything that goes into the <code>@tableName</code> variable. </p>\n\n<p>That said, in your example...</p>\n\n<pre><code>DECLARE @tableName sysname = 'ContentItems';\nDECLARE @sql nvarchar(max) = N'\n    CREATE TRIGGER TR_' + @tableName + N' ON ' + @tableName + N' FOR INSERT\n        AS\n        BEGIN\n            PRINT @tableName\n        END';\nEXEC sp_executesql @sql, N'@tableName sysname', @tableName=@tableName\n</code></pre>\n\n<p>... you are trying to input your declared <code>@tableName</code> into the text you're creating for <code>@sql</code>, and then you're trying to pass a parameter through <code>spexecutesql</code>. This makes your <code>@sql</code> invalid when trying to call it. </p>\n\n<p>You can try: </p>\n\n<pre><code>DECLARE @tableName sysname = 'ContentItems';\nDECLARE @sql nvarchar(max) = N'\n    CREATE TRIGGER TR_'' + @tableName + N'' ON '' + @tableName + N'' FOR INSERT\n        AS\n        BEGIN\n            PRINT @tableName\n        END';\nEXEC sp_executesql @sql, N'@tableName sysname', @tableName=@tableName\n</code></pre>\n\n<p>... which will give you the string ...</p>\n\n<pre><code>'\nCREATE TRIGGER TR_' + @tableName + N' ON ' + @tableName + N' FOR INSERT\n    AS\n    BEGIN\n        PRINT @tableName\n    END'\n</code></pre>\n\n<p>... which can then accept the parameter you pass through ...</p>\n\n<pre><code>EXEC sp_executesql @sql, N'@tableName sysname', @tableName=@tableName ;\n</code></pre>\n\n<p>Again, I'd use some heavy validation (and white-listing) before passing anything into dynamic SQL that will use a dynamic table name. </p>\n\n<p>NOTE: As noted below, I believe you are limited on DML statements that can be executed with <code>sp_executesql()</code>, and I think parameterization is limited also. And based on your other comments, it doesn't sound like you're really needing a dynamic process but a way to repeat a specific task for a handful of elements. If that's the case, my recommendation is to do it manually with a copy/paste then execute the statements. </p>\n",
        "OwnerUserId": "1970497",
        "OwnerDisplayName": "",
        "LastEditorUserId": "1970497",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-01-30 21:37:52",
        "LastActivityDate": "2019-01-30 21:37:52",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54447830",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54446734",
        "CreationDate": "2019-01-30 19:06:28",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<p>Personally I hate triggers and try to avoid them most of the time ;)</p>\n\n<p>However if you really, really need this dynamic stuff you should use <strong>sp_MSforeachtable</strong> and avoid injection (as pointed out by Shawn) at any cost:</p>\n\n<pre><code>EXEC sys.sp_MSforeachtable\n  @command1 = '\n        DECLARE @sql NVARCHAR(MAX)\n        SET @sql = CONCAT(''CREATE TRIGGER TR_''\n            , REPLACE(REPLACE(REPLACE(''?'', ''[dbo].'', ''''),''['',''''),'']'','''')\n            , '' ON ? FOR INSERT\n    AS\n    BEGIN\n        PRINT ''''?'''';\n    END;'');\n    EXEC sp_executesql @sql;'\n  , @whereand = ' AND object_id IN (SELECT object_id FROM sys.objects\nWHERE name LIKE ''%ContentItems%'')';\n</code></pre>\n",
        "OwnerUserId": "9529505",
        "OwnerDisplayName": "",
        "LastEditorUserId": "1970497",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-01-30 21:05:26",
        "LastActivityDate": "2019-01-30 21:05:26",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "4",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58457798",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58201173",
        "CreationDate": "2019-10-18 20:31:12",
        "DeletionDate": "",
        "Score": "8",
        "ViewCount": "",
        "Body": "<p><strong>There is a perfect way to handle this situation</strong></p>\n\n<p>You can use <a href=\"https://router.vuejs.org/guide/advanced/navigation-guards.html#in-component-guards\" rel=\"noreferrer\">in-component guard</a> to control the route in granule level</p>\n\n<p>Make the following changes in your code</p>\n\n<p><strong>In main screen component</strong></p>\n\n<blockquote>\n  <p>Add this beofreRouteLeave guard in component options, before leaving to 'result screen' you are setting the route to go only\n  through loading screen</p>\n</blockquote>\n\n<pre><code>beforeRouteLeave(to, from, next) {\n   if (to.path == \"/result\") {\n      next('/loading')\n    }\n    next();\n  }, \n</code></pre>\n\n<p><strong>In loading screen component</strong></p>\n\n<blockquote>\n  <p>If the route go backs from result to loading then , it should not land\n  here and directly jump to main screen</p>\n</blockquote>\n\n<pre><code>beforeRouteEnter(to, from, next) {\n    if (from.path == \"/result\") {\n      next('/main')\n    }\n     next();\n  },\n</code></pre>\n\n<blockquote>\n  <p>In loading screen, The beforeRouteEnter guard does NOT have access to\n  this, because the guard is called before the navigation is confirmed,\n  thus the new entering component has not even been created yet. So taking the advantage of this, you <strong><em>won't get the infinite calls</em></strong> fired when routing from results screen</p>\n</blockquote>\n\n<p><strong>In result screen component</strong></p>\n\n<blockquote>\n  <p>if you use go back then it should not land in loading and directly\n  jump to main screen</p>\n</blockquote>\n\n<pre><code>beforeRouteLeave(to, from, next) {\n    if (to.path == \"/loading\") {\n      next('/')\n    }\n    next();\n  },\n</code></pre>\n\n<p>I have just created small vue application to reproduce the same issue. It works in my local as per your question. Hope it <strong>resolves your issue</strong> as well. </p>\n",
        "OwnerUserId": "10555785",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-10-18 20:31:12",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "1",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58458535",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58201173",
        "CreationDate": "2019-10-18 21:41:47",
        "DeletionDate": "",
        "Score": "2",
        "ViewCount": "",
        "Body": "<p>I guess <code>router.replace</code> is the way to go - but still some lines of thought (untested):</p>\n\n<hr>\n\n<p>Basically on <code>$router</code> change it renders the loading-component until it emits <code>load:stop</code>, then it renders the <code>router-view</code></p>\n\n<hr>\n\n<pre><code>import { Vue, Component, Watch, Prop } from \"vue-property-decorator\";\n\n@Component&lt;RouteLoader&gt;({\n    render(h){\n        const rv = (this.$slots.default || [])\n        .find(\n            child =&gt; child.componentOptions\n            //@ts-ignore \n            &amp;&amp; child.componentOptions.Ctor.extendedOptions.name === \"RouterView\"\n        )\n        if(rv === undefined) \n            throw new Error(\"RouterView is missing - add &lt;router-view&gt; to default slot\")\n\n        const loader = (this.$slots.default || [])\n        .find(\n            child =&gt; child.componentOptions\n            //@ts-ignore \n            &amp;&amp; child.componentOptions.Ctor.extendedOptions.name === this.loader\n        )\n        if(loader === undefined) \n            throw new Error(\"LoaderView is missing - add &lt;loader-view&gt; to default slot\")\n        const _vm = this \n        const loaderNode = loader.componentOptions &amp;&amp; h(\n            loader.componentOptions.Ctor,\n            {\n                on: {\n                    // \"load:start\": () =&gt; this.loading = true,\n                    \"load:stop\": () =&gt; _vm.loading = false\n                },\n                props: loader.componentOptions.propsData,\n                //@ts-ignore\n                attrs: loader.data.attrs\n            }\n        )\n        return this.loading &amp;&amp; loaderNode || rv\n    }\n})\nexport default class RouteLoader extends Vue {\n    loading: boolean = false\n    @Prop({default: \"LoaderView\"}) readonly loader!: string\n    @Watch(\"$route\")\n    loads(nRoute: string, oRoute: string){\n        this.loading = true\n    }\n}\n\n@Component&lt;Loader&gt;({\n    name: \"LoaderView\",\n    async mounted(){\n\n        await console.log(\"async call\")\n        this.$emit(\"load:stop\")\n        // this.$destroy()\n    }\n})\nexport class Loader extends Vue {}\n</code></pre>\n",
        "OwnerUserId": "11204469",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-10-18 21:41:47",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54487074",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54446734",
        "CreationDate": "2019-02-01 20:58:31",
        "DeletionDate": "",
        "Score": "4",
        "ViewCount": "",
        "Body": "<p>If you execute your <code>create trigger</code> statement that you said you printed... you will find that it does not work.  The print statement in the body of the trigger is trying to output <code>@tablename</code>, but is never defined, so you will get an error:</p>\n\n<blockquote>\n  <p>Must declare the scalar variable \"@tableName\".</p>\n</blockquote>\n\n<p>But that is not your main issue.  As for why you can't seem to execute a DDL statement with <code>execute_sql</code> with parameters, I couldn't find any documentation to explain why... but your experience and others proves that it's troublesome.  I believe this post has a pretty good theory: <a href=\"https://dba.stackexchange.com/questions/43262/sp-executesql-adds-statements-to-executed-dynamic-script\">sp_executesql adds statements to executed dynamic script?</a></p>\n\n<p>You can however execute dynamic sql with DDL statements using the <code>EXECUTE</code> statement.  So what you could do is create a parameterized <code>sp_executesql</code> statement that validates your table name and then creates a dynamic sql string to execute with the <code>EXECUTE</code> statement.</p>\n\n<p>It doesn't look pretty, but it works:</p>\n\n<pre><code>DECLARE @tableName sysname = 'MyTable';\nDECLARE @sql nvarchar(max) = \nN'\nset @tableName = (SELECT name FROM sys.tables WHERE OBJECT_ID = OBJECT_ID(@tableName)) --validate table\nDECLARE @CreateTriggerSQL as varchar(max) =\n''\nCREATE TRIGGER '' + QUOTENAME(''TR_'' + @tableName) + '' ON '' + QUOTENAME( @tableName) + '' FOR INSERT\nAS\nBEGIN\n    PRINT '''''' + @tableName + ''''''\nEND\n''\nprint isnull(@CreateTriggerSQL, ''INVALID TABLE'')\nexec (@CreateTriggerSQL)\n';\n\nEXEC sp_executesql @sql, N'@tableName sysname', @tableName=@tableName;\n</code></pre>\n\n<p>You could also convert this into a stored procedure with parameters instead of running <code>sp_executesql</code> if that were more convenient.  It looks a bit cleaner:</p>\n\n<pre><code>CREATE PROCEDURE sp_AddTriggerToTable (@TableName AS sysname) AS\n\nset @tableName = (SELECT name FROM sys.tables WHERE OBJECT_ID = OBJECT_ID(@tableName)) --validate table\nDECLARE @CreateTriggerSQL as varchar(max) =\n'\nCREATE TRIGGER ' + QUOTENAME('TR_' + @tableName) + ' ON ' + QUOTENAME( @tableName) + ' FOR INSERT\nAS\nBEGIN\n    PRINT ''' + @tableName + '''\nEND\n'\nprint isnull(@CreateTriggerSQL, 'INVALID TABLE')\nexec (@CreateTriggerSQL)\nGO\n</code></pre>\n",
        "OwnerUserId": "4765200",
        "OwnerDisplayName": "",
        "LastEditorUserId": "4765200",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-02-01 21:58:40",
        "LastActivityDate": "2019-02-01 21:58:40",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54496327",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54446734",
        "CreationDate": "2019-02-02 18:45:01",
        "DeletionDate": "",
        "Score": "2",
        "ViewCount": "",
        "Body": "<blockquote>\n  <p>Since the SQL runs fine either directly or when not supplying\n  parameters to sp_executesql, this seems like I'm running into a true\n  limitation in the SQL engine, but I don't see it documented anywhere.</p>\n</blockquote>\n\n<p>This behavior is documented, albeit not intuitive. The relevant excerpt from <a href=\"https://docs.microsoft.com/en-us/sql/t-sql/statements/create-trigger-transact-sql\" rel=\"nofollow noreferrer\">the documentation</a> under the trigger limitations topic:</p>\n\n<blockquote>\n  <p>CREATE TRIGGER must be the first statement in the batch</p>\n</blockquote>\n\n<p>When you execute a parameterized query, the parameter declarations are counted as being part of the batch. Consequently, a <code>CREATE TRIGGER</code> batch (and other CREATE statements for programmability objects like procs, functions, etc.) cannot be executed as a parameterized query.</p>\n\n<p>The invalid syntax error message you get when you attempt to run <code>CREATE TRIGGER</code> as a parameterized query isn't particularly helpful. Below is an simplified version of your code using the undocumented and unsupported internal parameterized query syntax. </p>\n\n<pre><code>EXECUTE(N'(@tableName sysname = N''MyTable'')CREATE TRIGGER TR_MyTable ON dbo.MyTable FOR INSERT AS');\n</code></pre>\n\n<p>This at least yields an error calling out the <code>CREATE TRIGGER</code> limitation:</p>\n\n<blockquote>\n  <p>Msg 1050, Level 15, State 1, Line 73 This syntax is only allowed for\n  parameterized queries. Msg 111, Level 15, State 1, Line 73 'CREATE\n  TRIGGER' must be the first statement in a query batch.</p>\n</blockquote>\n\n<p>Similarly executing another parameterized statement with this method runs successfully:</p>\n\n<pre><code>EXECUTE (N'(@tableName sysname = N''MyTable'')PRINT @tableName');\n</code></pre>\n\n<p>But if you don't actually use the parameter in the batch, an error results</p>\n\n<pre><code>EXECUTE (N'(@tableName sysname = N''MyTable'')PRINT ''done''');\n</code></pre>\n\n<blockquote>\n  <p>Msg 1050, Level 15, State 1, Line 75 This syntax is only allowed for\n  parameterized queries.</p>\n</blockquote>\n\n<p>The bottom line is that you need to build the <code>CREATE TRIGGER</code> statement as a string without parameters and execute the statement as a non-parameterized query to create a trigger.</p>\n",
        "OwnerUserId": "3711162",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-02-02 18:45:01",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54500505",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54446734",
        "CreationDate": "2019-02-03 06:26:21",
        "DeletionDate": "",
        "Score": "2",
        "ViewCount": "",
        "Body": "<blockquote>\n  <p>Is it possible to issue CREATE statements using sp_executesql with\n  parameters?</p>\n</blockquote>\n\n<p>Simple answer is <strong>\"No\"</strong>, you can't</p>\n\n<p>According to <strong>MSDN</strong></p>\n\n<blockquote>\n  <p>Generally, parameters are valid only in Data Manipulation Language\n  (DML) statements, and not in Data Definition Language (DDL) statements</p>\n</blockquote>\n\n<p>You can check more details about this <a href=\"https://docs.microsoft.com/en-us/sql/odbc/reference/develop-app/statement-parameters?view=sql-server-2017\" rel=\"nofollow noreferrer\">Statement Parameters</a></p>\n\n<p><strong>What is the issue?</strong></p>\n\n<p>Parameters are only allowed in place of scalar literals, like quoted strings or dates, or numeric values. You can't parameterise a <code>DDL</code> operation. </p>\n\n<p><strong>What can be done?</strong></p>\n\n<p>I believe that you want to use parameterized <code>sp_executesql</code> is to avoid any <strong>SQL Injection Attack</strong>. To achieve this for the <code>DDL</code> operations you can do following thing to minimize the possibility of attack.</p>\n\n<ol>\n<li><strong>Use Delimiters :</strong>  You can use <code>QUOTENAME()</code> for <code>SYSNAME</code> parameters like Trigger Name, Table Names and Column  names.</li>\n<li><strong>Limiting Permissions</strong> : User Account you are using to run the dynamic <code>DDL</code>, should have only limited permission. Like on a\nspecific schema with only <code>CREATE</code> permission.</li>\n<li><strong>Hiding Error Message</strong> : Don't throw the actual error to the user. SQL Injection are mainly performed by trial and error approach. If\nyou hide the actual error message, it will become tough to crack it.</li>\n<li><strong>Input Validation</strong> : You can always have a function which validates the input string, escape the required characters, check\nfor specific keywords like <code>DROP</code>.</li>\n</ol>\n\n<p><strong>Any workaround?</strong></p>\n\n<p>If you want to parameterized your statement using  <code>sp_executesql</code>, in that case you can get the query to be executed in a <code>OUTPUT</code> variable and run the query in next statement like following.</p>\n\n<p>By this, the first call to <code>sp_executesql</code> will parameterized your query, and the actual execution will be performed by the second call to <code>sp_executesql</code> </p>\n\n<p>For example.</p>\n\n<pre><code>DECLARE @TableName VARCHAR(100) = 'MyTable' \nDECLARE @returnStatement NVARCHAR(max); \nDECLARE @sql1 NVARCHAR(max)= \nN'SELECT @returnStatement = ''CREATE TRIGGER TR_''                                          \n    +  @TableName + '' ON '' +  @TableName  +  '' FOR INSERT AS BEGIN PRINT 1 END'''\n\nEXEC Sp_executesql \n  @sql1, \n  N'@returnStatement VARCHAR(MAX) OUTPUT, @TableName VARCHAR(100)', \n  @returnStatement output, \n  @TableName \n\nEXEC Sp_executesql @returnStatement \n</code></pre>\n",
        "OwnerUserId": "297322",
        "OwnerDisplayName": "",
        "LastEditorUserId": "297322",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-02-05 11:36:16",
        "LastActivityDate": "2019-02-05 11:36:16",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54500878",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54446734",
        "CreationDate": "2019-02-03 07:41:35",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<p>If you want to use the parameter as string, add double ' before and after the parameter name</p>\n\n<p><strong>like this</strong> :</p>\n\n<pre><code>DECLARE @tableName sysname = 'ContentItems'; \n\nDECLARE @sql nvarchar(max) = N'\n        CREATE TRIGGER TR_' + @tableName + N' ON ' + @tableName + N' FOR INSERT\n            AS\n            BEGIN\n               print ''' + @tableName\n            +''' END';\n\n\n    EXEC sp_executesql @sql\n</code></pre>\n\n<p>And if you want to use it as table name, use select instead of print ,</p>\n\n<p><strong>like this :</strong></p>\n\n<pre><code>DECLARE @tableName sysname = 'ContentItems';\n\nDECLARE @sql nvarchar(max) = N'\n    CREATE TRIGGER TR_' + @tableName + N' ON ' + @tableName + N' FOR INSERT\n        AS\n        BEGIN\n            select * from ' + @tableName\n        +' END';\n\n\nEXEC sp_executesql @sql\n</code></pre>\n",
        "OwnerUserId": "4369793",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-02-03 07:41:35",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54501433",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54446734",
        "CreationDate": "2019-02-03 09:11:57",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<blockquote>\n  <p>Is it possible to issue CREATE statements using sp_executesql with\n  parameters?</p>\n</blockquote>\n\n<p>The answer is <strong>\"Yes\"</strong>, but with small adjustment:</p>\n\n<pre><code>USE msdb\n\nDECLARE @tableName sysname = 'sysjobsteps';\n\nDECLARE @sql nvarchar(max) = N'\nEXECUTE (''                              -- Added nested EXECUTE()\n    CREATE TRIGGER [TR_'' + @tableName + N''] ON ['' + @tableName + N''] FOR INSERT\n        AS\n        BEGIN\n            PRINT '''''+@tableName+'''''\n        END''\n        )'                            -- End of EXECUTE()\n\n\nEXEC sp_executesql @sql, N'@tableName sysname', @tableName=@tableName\n</code></pre>\n\n<p>Adjsutments list:</p>\n\n<ol>\n<li>Extra EXECUTE involved, comment below explains why</li>\n<li>Extra square brackets added to make SQL Injections slightly harder</li>\n</ol>\n\n<hr>\n\n<blockquote>\n  <p>I'm looking for specific (ideally, documented) restrictions of\n  sp_executesql with parameters and if there are any workarounds for\n  those specific restrictions (beyond not using parameters)</p>\n</blockquote>\n\n<p>in this case it is a limitation of DDL commands, not sp_executesql. DDL statements cannot be parametrized using variables. Microsoft documentation says: </p>\n\n<blockquote>\n  <p>Variables can be used only in expressions, not in place of <strong>object\n  names</strong> or keywords. To construct dynamic SQL statements, use EXECUTE.</p>\n</blockquote>\n\n<p>source: <a href=\"https://docs.microsoft.com/en-us/sql/t-sql/language-elements/declare-local-variable-transact-sql?view=sql-server-2017\" rel=\"nofollow noreferrer\">DECLARE (Transact-SQL)</a></p>\n\n<p>Therefore, the solution with EXECUTE is provided by me as a workaround</p>\n",
        "OwnerUserId": "5021687",
        "OwnerDisplayName": "",
        "LastEditorUserId": "5021687",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-02-03 11:49:31",
        "LastActivityDate": "2019-02-03 11:49:31",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "3",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54506842",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54506744",
        "CreationDate": "2019-02-03 19:44:25",
        "DeletionDate": "",
        "Score": "19",
        "ViewCount": "",
        "Body": "<p>Typescript without types is Javascript.\nStart your project without Typescript and convert it when you are ready to do so.\nBeginning with <code>&lt;any&gt;</code> is not a good practice and makes no sense in my opinion.</p>\n",
        "OwnerUserId": "7912416",
        "OwnerDisplayName": "",
        "LastEditorUserId": "2902821",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-02-06 13:56:58",
        "LastActivityDate": "2019-02-06 13:56:58",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54553085",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54506744",
        "CreationDate": "2019-02-06 11:55:17",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<p>I agree with nologin, there is no point doing that, however if you really want to there are a few ways that I can think of, here is a couple:</p>\n\n<h1>Disable by file</h1>\n\n<p>add this comment at the top of the file <code>/* tslint:disable */</code></p>\n\n<h1>Exclude your src folder</h1>\n\n<p>Exclude your code folders from tslint.json (might need to do it on tsconfig.json too</p>\n\n<pre><code>{\n // some linting options\n  linterOptions: {\n    exclude: ['src/**','components/**'],\n  }\n}\n</code></pre>\n\n<h1>Empty tslint.json and tsconfig</h1>\n\n<p>just replace your tslint.json and tsconfig.json files with an empty object</p>\n",
        "OwnerUserId": "875017",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-02-06 11:55:17",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54570859",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54506744",
        "CreationDate": "2019-02-07 10:08:30",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<p>Typescript's USP is type checking at compile time. It ultimately compiles to javascript. Start without typescript. You can always include it in your project when you want to with some refactoring. </p>\n\n<p><a href=\"https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html\" rel=\"nofollow noreferrer\">https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html</a></p>\n",
        "OwnerUserId": "6245314",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-02-07 10:08:30",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54571297",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54506744",
        "CreationDate": "2019-02-07 10:32:20",
        "DeletionDate": "",
        "Score": "20",
        "ViewCount": "",
        "Body": "<p>Add this to your <code>tsconfig.json</code>:</p>\n\n<pre><code>{\n  \"compilerOptions\": {\n    ...\n    \"checkJs\": false\n    ...\n  }\n}\n</code></pre>\n\n<p>and stick to <code>.js</code>/<code>.jsx</code> files for now. Use the <code>.ts</code>/<code>.tsx</code> extension only when you're ready to use types.</p>\n\n<p>If you would rather suppress the errors on a per-line basis, you can use a <code>// @ts-ignore</code> comment.</p>\n",
        "OwnerUserId": "10325032",
        "OwnerDisplayName": "",
        "LastEditorUserId": "10325032",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-02-07 10:38:00",
        "LastActivityDate": "2019-02-07 10:38:00",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "1",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "60530639",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54506744",
        "CreationDate": "2020-03-04 16:30:49",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<p>you can let the build happen even in presence of typescript errors \n<a href=\"https://create-react-app.dev/docs/advanced-configuration/#\" rel=\"nofollow noreferrer\">https://create-react-app.dev/docs/advanced-configuration/#</a>! ctr+f TSC_COMPILE_ON_ERROR</p>\n",
        "OwnerUserId": "1191175",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2020-03-04 16:30:49",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "59054876",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "59054707",
        "CreationDate": "2019-11-26 16:01:07",
        "DeletionDate": "",
        "Score": "8",
        "ViewCount": "",
        "Body": "<p>That makes sense. \nIt's an 'invalid pointer value' because it does not point to an object. </p>\n\n<p>See later in that section, where it says:</p>\n\n<blockquote>\n  <p>A pointer value becomes invalid when the storage it denotes reaches the end of its storage duration</p>\n</blockquote>\n\n<p>That implies that it's not the \"value\" of the pointer that makes it invalid, but rather that it does not point to a valid object.</p>\n",
        "OwnerUserId": "992490",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-11-26 16:01:07",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "59054943",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "59054707",
        "CreationDate": "2019-11-26 16:04:32",
        "DeletionDate": "",
        "Score": "6",
        "ViewCount": "",
        "Body": "<p>That is correct.</p>\n\n<p>There is no object at that location in memory. The memory \"belongs to you\". However, whether a pointer is valid is determined not by memory allocations, but by the existence of an object that it points to. This pointer does not point to any object, so it is an invalid pointer.</p>\n\n<p><a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0593r3.html\" rel=\"nofollow noreferrer\">p0593rX</a>, if adopted in the future, would change this, basically by putting an object there for you. That's actually quite important, because at the moment any use of <code>malloc</code> in C++ I can think of (including placement new) currently has undefined behaviour.</p>\n",
        "OwnerUserId": "560648",
        "OwnerDisplayName": "",
        "LastEditorUserId": "560648",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-11-26 19:36:26",
        "LastActivityDate": "2019-11-26 19:36:26",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "3",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54330388",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54329200",
        "CreationDate": "2019-01-23 15:17:48",
        "DeletionDate": "",
        "Score": "21",
        "ViewCount": "",
        "Body": "<p>Trait object types have an associated lifetime bound, but it can be omitted. A full trait object type is written <code>dyn Trait + 'a</code> (when behind a reference, parentheses must be added around it: <code>&amp;(dyn Trait + 'a)</code>).</p>\n\n<p>The tricky part is that when a lifetime bound is omitted, <a href=\"https://doc.rust-lang.org/reference/lifetime-elision.html#default-trait-object-lifetimes\" rel=\"noreferrer\">the rules are a bit complicated</a>.</p>\n\n<p>First, we have:</p>\n\n<pre><code>impl PartialOrd for dyn SimpleOrder {\n</code></pre>\n\n<p>Here, the compiler infers <code>+ 'static</code>. Lifetime parameters are never introduced on <code>impl</code> blocks (as of Rust 1.32.0).</p>\n\n<p>Next, we have:</p>\n\n<pre><code>    fn partial_cmp(&amp;self, other: &amp;dyn SimpleOrder) -&gt; Option&lt;Ordering&gt; {\n</code></pre>\n\n<p>The type of <code>other</code> is inferred to be <code>&amp;'b (dyn SimpleOrder + 'b)</code>, where <code>'b</code> is an implicit lifetime parameter introduced on <code>partial_cmp</code>.</p>\n\n<pre><code>    fn partial_cmp&lt;'a, 'b&gt;(&amp;'a self, other: &amp;'b (dyn SimpleOrder + 'b)) -&gt; Option&lt;Ordering&gt; {\n</code></pre>\n\n<p>So now we have that <code>self</code> has type <code>&amp;'a (dyn SimpleOrder + 'static)</code> while <code>other</code> has type <code>&amp;'b (dyn SimpleOrder + 'b)</code>. What's the problem?</p>\n\n<p>Indeed, <code>cmp</code> doesn't give any error, because its implementation doesn't require that the lifetime of the two trait objects be equal. Why does <code>partial_cmp</code> care, though?</p>\n\n<p>Because <code>partial_cmp</code> is calling <code>Ord::cmp</code>. When type checking a call to a trait method, the compiler checks against the signature from the trait. Let's review that signature:</p>\n\n<pre><code>pub trait Ord: Eq + PartialOrd&lt;Self&gt; {\n    fn cmp(&amp;self, other: &amp;Self) -&gt; Ordering;\n</code></pre>\n\n<p>The trait requires that <code>other</code> be of type <code>Self</code>. That means that when <code>partial_cmp</code> calls <code>cmp</code>, it tries to pass a <code>&amp;'b (dyn SimpleOrder + 'b)</code> to a parameter that expects a <code>&amp;'b (dyn SimpleOrder + 'static)</code>, because <code>Self</code> is <code>dyn SimpleOrder + 'static</code>. This conversion is not valid (<code>'b</code> cannot be converted to <code>'static</code>), so the compiler gives an error.</p>\n\n<p>So then, why is it valid to set the type of <code>other</code> to <code>&amp;'b (dyn SimpleOrder + 'b)</code> when implementing <code>Ord</code>? Because <code>&amp;'b (dyn SimpleOrder + 'b)</code> is a <a href=\"https://doc.rust-lang.org/nomicon/subtyping.html\" rel=\"noreferrer\">supertype</a> of <code>&amp;'b (dyn SimpleOrder + 'static)</code>, and Rust lets you replace a parameter type with one of its supertypes when implementing a trait method (it makes the method strictly more general, even though it's apparently not used much in type checking).</p>\n\n<hr>\n\n<p>In order to make your implementation as generic as possible, you should introduce a lifetime parameter on the <code>impl</code>s:</p>\n\n<pre><code>use std::cmp::Ordering;\n\npub trait SimpleOrder {\n    fn key(&amp;self) -&gt; u32;\n}\n\nimpl&lt;'a&gt; PartialOrd for dyn SimpleOrder + 'a {\n    fn partial_cmp(&amp;self, other: &amp;Self) -&gt; Option&lt;Ordering&gt; {\n        Some(self.cmp(other))\n    }\n}\n\nimpl&lt;'a&gt; Ord for dyn SimpleOrder + 'a {\n    fn cmp(&amp;self, other: &amp;Self) -&gt; Ordering {\n        self.key().cmp(&amp;other.key())\n    }\n}\n\nimpl&lt;'a&gt; PartialEq for dyn SimpleOrder + 'a {\n    fn eq(&amp;self, other: &amp;Self) -&gt; bool {\n        self.key() == other.key()\n    }\n}\n\nimpl&lt;'a&gt; Eq for dyn SimpleOrder + 'a {}\n</code></pre>\n",
        "OwnerUserId": "234590",
        "OwnerDisplayName": "",
        "LastEditorUserId": "234590",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-01-24 21:46:55",
        "LastActivityDate": "2019-01-24 21:46:55",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "9",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58546609",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58201173",
        "CreationDate": "2019-10-24 17:40:57",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<p>Another option is to use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API\" rel=\"nofollow noreferrer\">History API</a>.</p>\n\n<p>Once you are in the Results screen, you can utilize the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\" rel=\"nofollow noreferrer\">ReplaceState</a> to replace the URL in history of the browser.</p>\n",
        "OwnerUserId": "159342",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-10-24 17:40:57",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54021651",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54021490",
        "CreationDate": "2019-01-03 11:46:03",
        "DeletionDate": "",
        "Score": "6",
        "ViewCount": "",
        "Body": "<p>This is behaviour is in the documentation of the <code>method</code> parameter:</p>\n\n<pre><code>method : {\u2018pad\u2019, \u2018ffill\u2019, \u2018bfill\u2019, None}\n\nThe method to use when for replacement, when to_replace is a scalar, list or tuple and value is None.\n</code></pre>\n\n<p>So in your example <code>to_replace</code> is a <em>scalar</em>, and <code>value</code> is <code>None</code>. The method by default is <code>pad</code>, from the documentation of <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.fillna.html\" rel=\"noreferrer\">fillna</a>:</p>\n\n<pre><code>pad / ffill: propagate last valid observation forward to next valid\n</code></pre>\n",
        "OwnerUserId": "4001592",
        "OwnerDisplayName": "",
        "LastEditorUserId": "4001592",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-01-03 11:48:07",
        "LastActivityDate": "2019-01-03 11:48:07",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "11",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57530883",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57530882",
        "CreationDate": "2019-08-16 20:43:13",
        "DeletionDate": "",
        "Score": "6",
        "ViewCount": "",
        "Body": "<h2>.NET / C# - Construction from date parts</h2>\n\n<p><em>Impact Category 1</em></p>\n\n<p><strong>Defective Code</strong></p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>DateTime dt = DateTime.Now;\nDateTime result = new DateTime(dt.Year + 1, dt.Month, dt.Day);\n</code></pre>\n\n<p>This code will work properly until <code>dt</code> becomes February 29th.  Then, it will attempt to create a February 29th of a common year, which does not exist.  The <code>DateTime</code> constructor will throw an <code>ArgumentOutOfRangeException</code>.</p>\n\n<p>Variations include any form of <code>DateTime</code> or <code>DateTimeOffset</code> constructor that accepts year, month, and day parameters, when those values are derived from different sources or manipulated without regard to validity as a whole.</p>\n\n<p><strong>Corrected Code</strong></p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>DateTime dt = DateTime.Now;\nDateTime result = dt.AddYears(1);\n</code></pre>\n\n<hr>\n\n<h3>Common Variation - Birthdays (and other anniversaries)</h3>\n\n<p>One variation is when determining a user's current birthday without considering leaplings (persons born on February 29th).  It also applies to other types of anniversaries, such as hire date, date of service, billing date, etc.</p>\n\n<p><strong>Defective Code</strong></p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>DateTime birthdayThisYear = new DateTime(DateTime.Now.Year, dob.Month, dob.Day);\n</code></pre>\n\n<p>This approach needs adjustment, such as the following which uses February 28th for common years. (Though, march 1st might be preferred depending on the use case.)</p>\n\n<p><strong>Corrected Code</strong></p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>int year = DateTime.Now.Year;\nint month = dob.Month;\nint day = dob.Day;\nif (month == 2 &amp;&amp; day == 29 &amp;&amp; !DateTime.IsLeapYear(year))\n    day--;\n\nDateTime birthdayThisYear = new DateTime(year, month, day);\n</code></pre>\n\n<p><strong>Corrected Code (alternative implementation)</strong></p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>DateTime birthdayThisYear = dob.AddYears(DateTime.Now.Year - dob.Year);\n</code></pre>\n",
        "OwnerUserId": "634824",
        "OwnerDisplayName": "",
        "LastEditorUserId": "634824",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-11-05 18:29:24",
        "LastActivityDate": "2019-11-05 18:29:24",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": "2019-08-16 20:43:13"
    },
    {
        "Id": "57530901",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57530882",
        "CreationDate": "2019-08-16 20:44:17",
        "DeletionDate": "",
        "Score": "3",
        "ViewCount": "",
        "Body": "<h2>Win32 / C++ - <code>SYSTEMTIME</code> struct manipulation</h2>\n\n<p><em>Impact Category 1</em></p>\n\n<p><strong>Defective Code</strong></p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>SYSTEMTIME st;\nFILETIME ft;\n\nGetSystemTime(&amp;st);\nst.wYear++;\n\nSystemTimeToFileTime(&amp;st, &amp;ft);\n</code></pre>\n\n<p>This code will work properly until <code>st</code> becomes February 29th.  Then, it will attempt to create a February 29th of a common year, which does not exist.  Passing this to any function that accepts a <code>SYSTEMTIME</code> struct will likely fail.</p>\n\n<p>For example, the <code>SystemTimeToFileTime</code> call shown here will return an error code.  Since that return value is unchecked (which is extremely common), this will result in <code>ft</code> being left uninitialized.</p>\n\n<p><strong>Corrected Code</strong></p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>SYSTEMTIME st;\nFILETIME ft;\n\nGetSystemTime(&amp;st);\nst.wYear++;\n\nbool isLeapYear = st.wYear % 4 == 0 &amp;&amp; (st.wYear % 100 != 0 || st.wYear % 400 == 0);\nst.wDay = st.wMonth == 2 &amp;&amp; st.wDay == 29 &amp;&amp; !isLeapYear ? 28 : st.wDay;\n\nbool ok = SystemTimeToFileTime(&amp;st, &amp;ft);\nif (!ok)\n{\n  // handle error\n}\n</code></pre>\n\n<p>This fix checks for Feb 29th of a common year, and corrects it to Feb 28th.</p>\n",
        "OwnerUserId": "634824",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-08-16 20:44:17",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": "2019-08-16 20:44:17"
    },
    {
        "Id": "55417323",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55417186",
        "CreationDate": "2019-03-29 12:19:45",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<p>Personnally i don't like mixing macro/preprocessor-level evaluation and compilation-level test.</p>\n\n<p>There seem to be no standard way to do it at the macro level, but hacks exists here:\n<a href=\"https://stackoverflow.com/questions/2124339/c-preprocessor-va-args-number-of-arguments\">C++ preprocessor __VA_ARGS__ number of arguments</a></p>\n",
        "OwnerUserId": "2409837",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-03-29 12:19:45",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "55420185",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55417186",
        "CreationDate": "2019-03-29 14:58:09",
        "DeletionDate": "",
        "Score": "2",
        "ViewCount": "",
        "Body": "<p><em>Note: this version of this answer is the result of a major rewrite. Some claims have been removed and others significantly modified, so as to focus on and better justify the most important points.</em></p>\n\n<h2><s>Variadic macros and their variable arguments</s></h2>\n\n<p>[Controversial, much disputed position removed.  It was more distracting than helpful.]</p>\n\n<hr>\n\n<h2>The proposed macro</h2>\n\n<blockquote>\n  <p>I think I've found an easy solution that is both compact and standard:</p>\n\n<pre><code>#define is_empty(...) ( sizeof( (char[]){#__VA_ARGS__} ) == 1 )\n</code></pre>\n</blockquote>\n\n<p>We can sidestep any question of undefinedness by considering this variation:</p>\n\n<pre><code>#define is_empty(dummy, ...) ( sizeof( (char[]){#__VA_ARGS__} ) == 1 )\n</code></pre>\n\n<p>.  The same considerations apply to the interpretation of empty <em>vs.</em> non-empty variable arguments here as do in your original version.  Specifically,</p>\n\n<blockquote>\n  <p>Based on C17 6.10.3.2/2 (the # operator): \"<em>The character string\n  literal corresponding to an empty argument is \"\"</em>\", I believe that\n  <code>#__VA_ARGS__</code> is always well-defined.</p>\n</blockquote>\n\n<p>I agree.  Also relevant here is section 6.10.3.1/2: \"An identifier <code>__VA_ARGS__</code> that occurs in the replacement list shall be treated as if it were a parameter [...].\"</p>\n\n<blockquote>\n  <p>Explanation of the macro:</p>\n  \n  <ul>\n  <li>This creates a compound literal char array and initializes it by using a string literal.</li>\n  </ul>\n</blockquote>\n\n<p>Yes.</p>\n\n<blockquote>\n  <ul>\n  <li>No matter what is passed to the macro, all arguments will be translated to one long string literal.</li>\n  </ul>\n</blockquote>\n\n<p>Yes.  <code>__VA_ARGS__</code> is treated as <em>a</em> (one) parameter.  If there are multiple variable arguments then that can impact the rescan, but the stringification operator has its effect at the point of the macro expansion, before rescanning.</p>\n\n<blockquote>\n  <ul>\n  <li>In case the macro list is empty, the string literal will become \"\", which consists only of a null terminator and therefore has size 1.</li>\n  </ul>\n</blockquote>\n\n<p>Yes.</p>\n\n<blockquote>\n  <ul>\n  <li>In all other cases, it will have a size greater than 1.</li>\n  </ul>\n</blockquote>\n\n<p>Yes.  This holds even in the case of two zero-token arguments in the variable argument list, <code>is_empty(dummy,,)</code>, where <code>#__VA_ARGS__</code> will expand to <code>\",\"</code>.  It also holds in the case of an argument consisting of an empty string literal, <code>is_empty(dummy, \"\")</code>, where <code>#__VA_ARGS__</code> will expand to <code>\"\\\"\\\"\"</code>.</p>\n\n<p><strong>HOWEVER</strong>, that still might not serve your purpose.  In particular, you cannot use it in a conditional compilation directive.  Although <code>sizeof</code> expressions are <em>generally</em> allowed in integer constant expressions, such as form the control expressions of such directives,</p>\n\n<ul>\n<li>lexically, as a preprocessing token, <code>sizeof</code> is categorized as an identifier (there is no distinction between keywords and identifiers for preprocessing tokens), and</li>\n<li><p>according to <a href=\"https://port70.net/~nsz/c/c11/n1570.html#6.10.1p4\" rel=\"nofollow noreferrer\">paragraph 6.10.1/4</a> of the standard, when processing the control expression of a conditional compilation directive,</p>\n\n<blockquote>\n  <p>After all replacements due to macro expansion and the defined unary operator have been performed, <strong>all remaining identifiers (including those lexically identical to keywords) are replaced with the pp-number 0</strong></p>\n</blockquote>\n\n<p>(emphasis added).</p></li>\n</ul>\n\n<p>Therefore, if your macro is used as or in the control expression of a conditional compilation directive then it will be evaluated as if the <code>sizeof</code> operator in it were replaced by <code>0</code>, yielding an invalid expression.</p>\n",
        "OwnerUserId": "2402272",
        "OwnerDisplayName": "",
        "LastEditorUserId": "2402272",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-03-31 23:19:48",
        "LastActivityDate": "2019-03-31 23:19:48",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "19",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54368890",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54366277",
        "CreationDate": "2019-01-25 16:04:15",
        "DeletionDate": "",
        "Score": "8",
        "ViewCount": "",
        "Body": "<p>Some background. Each process has a notion of \"current directory\". When started from the command line, then it's the directory in which the command was executed. When started from the UI, it's usually the folder in which the program (the .exe file) is.</p>\n\n<p>In the command prompt or BASH, you can change this folder with <code>cd</code> for the process which runs the command prompt.</p>\n\n<p>When Maven builds a multi-module project, it has to change this for each module (so that the relative path <code>src/main/java/</code> always points to the right place). Unfortunately, Java doesn't have a \"set current directory\" method anywhere. You can only specify one when creating a new process and you can modify the system property <code>user.dir</code>.</p>\n\n<p>That's why <code>new File(\"a\").exists()</code> and <code>new File(\"a\").getAbsoluteFile().exists()</code> work differently.</p>\n\n<p>The latter will use <code>new File(System.getProperty(\"user.dir\"), \"a\")</code> to determine the path and the former will use the Windows API function <code>_wgetdcwd</code> (<a href=\"https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/getdcwd-wgetdcwd?view=vs-2017\" rel=\"nofollow noreferrer\">docs</a>) which in turn uses a field of the Windows process to get the current directory - in our case, that's always the folder in which Maven was originally started because Java doesn't update the field in the process when someone changes <code>user.dir</code> and Maven can only change this property to \"simulate\" changing folders.</p>\n\n<p><code>WinNTFileSystem_md.c</code> calls <code>fileToNTPath()</code>. That's defined in <code>io_util_md.c</code> and calls <code>pathToNTPath()</code>. For relative paths, it will call <code>currentDirLength()</code> which calls <code>currentDir()</code> which calls <code>_wgetdcwd()</code>.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://github.com/openjdk-mirror/jdk7u-jdk/blob/jdk7u6-b08/src/windows/native/java/io/WinNTFileSystem_md.c\" rel=\"nofollow noreferrer\">https://github.com/openjdk-mirror/jdk7u-jdk/blob/jdk7u6-b08/src/windows/native/java/io/WinNTFileSystem_md.c</a></li>\n<li><a href=\"https://github.com/openjdk-mirror/jdk7u-jdk/blob/jdk7u6-b08/src/windows/native/java/io/io_util_md.c\" rel=\"nofollow noreferrer\">https://github.com/openjdk-mirror/jdk7u-jdk/blob/jdk7u6-b08/src/windows/native/java/io/io_util_md.c</a></li>\n</ul>\n\n<p>and here is the place where the Surefire plugin modifies the Property <code>user.dir</code>: <a href=\"https://github.com/apache/maven-surefire/blob/56d41b4c903b6c134c5e1a2891f9f08be7e5039f/maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/AbstractSurefireMojo.java#L1060\" rel=\"nofollow noreferrer\">https://github.com/apache/maven-surefire/blob/56d41b4c903b6c134c5e1a2891f9f08be7e5039f/maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/AbstractSurefireMojo.java#L1060</a></p>\n\n<p>When not forking, it's copied into the current VM's System properties: <a href=\"https://github.com/apache/maven-surefire/blob/56d41b4c903b6c134c5e1a2891f9f08be7e5039f/maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/AbstractSurefireMojo.java#L1133\" rel=\"nofollow noreferrer\">https://github.com/apache/maven-surefire/blob/56d41b4c903b6c134c5e1a2891f9f08be7e5039f/maven-surefire-common/src/main/java/org/apache/maven/plugin/surefire/AbstractSurefireMojo.java#L1133</a></p>\n",
        "OwnerUserId": "34088",
        "OwnerDisplayName": "",
        "LastEditorUserId": "34088",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-01-28 16:14:20",
        "LastActivityDate": "2019-01-28 16:14:20",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "15",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54409706",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54366277",
        "CreationDate": "2019-01-28 20:21:33",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<p>Aaron, we develop the Surefire. We can help you if you provide the path for this:</p>\n\n<pre><code>assertTrue(\"Missing file: \" + file.getAbsolutePath(), file.exists());\n</code></pre>\n\n<p>Pls post the actual path, expected path and <strong>basedir</strong> where your POM resides.\nThe theory would not help here. We are testing all the spectrum of JDKs 7-12 but we do not have the combination Cygwin+Windows which must be considered.\nThe code setting <strong>user.dir</strong> in Surefire you mentioned exists a decade.</p>\n",
        "OwnerUserId": "2758738",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-01-28 20:21:33",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "7",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "59363193",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57530882",
        "CreationDate": "2019-12-16 19:35:04",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<p>Here's an interesting one I just came across.  Just another argument to use UTC wherever possible.</p>\n\n<pre><code>// **** Appears to \"Leap\" forward **** //\nmoment('2020-02-29T00:00:00Z').toISOString();\n// or\nmoment('2020-02-29T00:00:00Z').toJSON();\n// 2020-02-29T00:00:00.000Z\n\nmoment('2020-02-29T00:00:00Z').add(1, 'year').toISOString();\n// or\nmoment('2020-02-29T00:00:00Z').add(1, 'year').toJSON();\n// 2021-03-01T00:00:00.000Z\n\n\n// **** Falls back **** //\nmoment.utc('2020-02-29T00:00:00Z').toISOString();\n// or\nmoment.utc('2020-02-29T00:00:00Z').toJSON();\n// 2020-02-29T00:00:00.000Z\n\nmoment.utc('2020-02-29T00:00:00Z').add(1, 'year').toISOString();\n// or\nmoment.utc('2020-02-29T00:00:00Z').add(1, 'year').toJSON();\n// 2021-02-28T00:00:00.000Z\n</code></pre>\n\n<p>Given C#'s default behavior is to fall back...</p>\n\n<pre><code>DateTime dt = new DateTime(2020, 02, 29, 0, 0, 0, DateTimeKind.Utc);\nDateTime result = dt.AddYears(1);\n// 2021-02-28T00:00:00.0000000Z\n</code></pre>\n\n<p>This could be crucial to ensure the front end and back end agree on whether to fall back or leap forward a day.</p>\n",
        "OwnerUserId": "960073",
        "OwnerDisplayName": "",
        "LastEditorUserId": "960073",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-12-17 16:15:40",
        "LastActivityDate": "2019-12-17 16:15:40",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "59865749",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57530882",
        "CreationDate": "2020-01-22 18:02:33",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<h2>JavaScript - Adding Year(s)</h2>\n\n<p><em>Impact Category 2</em></p>\n\n<p><strong>Defective Code</strong></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var dt = new Date();\ndt.setFullYear(dt.getFullYear() + 1);\n</code></pre>\n\n<p>This code will work properly until <code>dt</code> becomes February 29th, such as on <code>2020-02-29</code>.  Then it will attempt to set the year to 2021.  Since <code>2021-02-29</code> doesn't exist, the <code>Date</code> object will roll forward to the next valid date, which is <code>2020-03-01</code>.</p>\n\n<p>This may be the intended behavior in some cases.  In other cases, being one day off may have negligible impact (such as an expiration date).</p>\n\n<p>However, in many cases the intention when advancing a year is to stay roughly in the same position for the month and day.  In other words, if you started at the end of February (<code>2020-02-29</code>) and advanced a year, you likely intended the result to also be and the end of February (<code>2021-02-28</code>), not at the start of March (<code>2021-03-01</code>).</p>\n\n<p><strong>Corrected Code</strong></p>\n\n<p>To add years in JavaScript while retaining an end-of-February behavior, use the following function.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function addYears(dt, n) {\n  var m = dt.getMonth();\n  dt.setFullYear(dt.getFullYear() + n);\n  if (dt.getMonth() !== m)\n    dt.setDate(dt.getDate() - 1);\n}\n\n// example usage\naddYears(dt, 1);\n</code></pre>\n\n<hr>\n\n<h3>Common Variation - Immutable Form</h3>\n\n<p>One may often have code that doesn't mutate the original object, such as the following:</p>\n\n<p><strong>Defective Code</strong></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var dt = new Date();\nvar result = new Date(dt.getFullYear() + 1, dt.getMonth(), dt.getDate());\n</code></pre>\n\n<p>The immutable form that retains end-of-February behavior is as follows:</p>\n\n<p><strong>Corrected Code</strong></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function addYears(dt, n) {\n  var result = new Date(dt);\n  result.setFullYear(result.getFullYear() + n);\n  if (result.getMonth() !== dt.getMonth())\n    result.setDate(result.getDate() - 1);\n  return result;\n}\n\n// example usage\nvar result = addYears(dt, 1);\n</code></pre>\n\n<hr>\n\n<h3>Libraries</h3>\n\n<p>JavaScript has many date/time libraries, such as <a href=\"https://moment.github.io/luxon/\" rel=\"nofollow noreferrer\">Luxon</a>, <a href=\"https://date-fns.org/\" rel=\"nofollow noreferrer\">Date-Fns</a>, <a href=\"https://momentjs.com/\" rel=\"nofollow noreferrer\">Moment</a>, and <a href=\"https://js-joda.github.io/js-joda/\" rel=\"nofollow noreferrer\">js-Joda</a>.  All of these libraries already use an end-of-February behavior for their add-years functions.  No additional adjustment is necessary unless you desire a start-of-March behavior instead.</p>\n",
        "OwnerUserId": "634824",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2020-01-22 18:02:33",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": "2020-01-22 18:02:33"
    },
    {
        "Id": "59865989",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57530882",
        "CreationDate": "2020-01-22 18:18:25",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<h2>Determining if a Year is a Leap Year</h2>\n\n<p><em>C# is used in examples to illustrate, but the pattern is common to all languages.</em></p>\n\n<p><em>Impact Category 2</em></p>\n\n<p><strong>Defective Code</strong></p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>bool isLeapYear = year % 4 == 0;\n</code></pre>\n\n<p>This code incorrectly assumes that a leap year occurs exactly every four years.  This is not the case with the Gregorian calendar system that we most commonly use in business and computing.</p>\n\n<p><strong>Corrected Code</strong></p>\n\n<p>The full algorithm (<a href=\"https://en.wikipedia.org/wiki/Leap_year#Algorithm\" rel=\"nofollow noreferrer\">from Wikipedia</a>) is as follows:</p>\n\n<blockquote>\n  <p><strong>if</strong> (<em>year</em> is not divisible by 4) then (it is a common year)<br>\n  <strong>else if</strong> (<em>year</em> is not divisible by 100) <strong>then</strong> (it is a leap year)<br>\n  <strong>else if</strong> (<em>year</em> is not divisible by 400) <strong>then</strong> (it is a common year)<br>\n  <strong>else</strong> (it is a leap year)</p>\n</blockquote>\n\n<p>One implementation of this algorithm is as follows:</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>bool isLeapYear = year % 4 == 0 &amp;&amp; (year % 100 != 0 || year % 400 == 0);\n</code></pre>\n\n<p>In many platforms, this function is built in.  For example, in .Net, the following is preferred:</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>bool isLeapYear = DateTime.IsLeapyear(year);\n</code></pre>\n",
        "OwnerUserId": "634824",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2020-01-22 18:18:25",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": "2020-01-22 18:18:25"
    },
    {
        "Id": "60468711",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57530882",
        "CreationDate": "2020-02-29 19:14:00",
        "DeletionDate": "",
        "Score": "3",
        "ViewCount": "",
        "Body": "<h2>Python - Replacing the year</h2>\n\n<p><em>Impact Category 1</em></p>\n\n<p><strong>Defective Code</strong></p>\n\n<pre class=\"lang-py prettyprint-override\"><code>from datetime import date\ntoday = date.today()\nlater = today.replace(year = today.year + 1)\n</code></pre>\n\n<p>This code will work properly until <code>today</code> becomes February 29th.  Then, it will attempt to create a February 29th of a common year, which does not exist.  The <code>date</code> constructor will raise an <code>ValueError</code> with the message <code>\"day is out of range for month\"</code>.</p>\n\n<p>Variations:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>from datetime import date\ntoday = date.today()\nlater = date(today.year + 1, today.month, today.day)\n</code></pre>\n\n<p><strong>Corrected Code</strong></p>\n\n<p>Without using any additional libraries, one can trap the error:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>from datetime import date\ntoday = date.today()\ntry:\n    later = today.replace(year = today.year + 1)\nexcept ValueError:\n    later = date(today.year + 1, 2, 28)\n</code></pre>\n\n<p>However, it is usually better to use a library such as <a href=\"https://dateutil.readthedocs.io/\" rel=\"nofollow noreferrer\">dateutil</a>:</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>from datetime import date\nfrom dateutil.relativedelta import relativedelta\ntoday = date.today()\nlater = today + relativedelta(years=1)\n</code></pre>\n",
        "OwnerUserId": "634824",
        "OwnerDisplayName": "",
        "LastEditorUserId": "634824",
        "LastEditorDisplayName": "",
        "LastEditDate": "2020-02-29 22:41:01",
        "LastActivityDate": "2020-02-29 22:41:01",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": "2020-02-29 19:14:00"
    },
    {
        "Id": "58857896",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54381791",
        "CreationDate": "2019-11-14 13:27:06",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<p>For</p>\n\n<p><code>const int&amp; r1=42</code></p>\n\n<p>The reference is of type <code>const int</code>, so <em>cv1</em> is <code>const</code>, and the prvalue is of type <code>const int</code>, so the materialized temporary is also of type <code>const int</code>.</p>\n",
        "OwnerUserId": "5597",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-11-14 13:27:06",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "1",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "55012175",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55012174",
        "CreationDate": "2019-03-05 21:52:33",
        "DeletionDate": "",
        "Score": "41",
        "ViewCount": "",
        "Body": "<p>The current return type (<code>string[]</code>) is intentional. Why?</p>\n\n<p>Consider some type like this:</p>\n\n<pre><code>interface Point {\n    x: number;\n    y: number;\n}\n</code></pre>\n\n<p>You write some code like this:</p>\n\n<pre><code>function fn(k: keyof Point) {\n    if (k === \"x\") {\n        console.log(\"X axis\");\n    } else if (k === \"y\") {\n        console.log(\"Y axis\");\n    } else {\n        throw new Error(\"This is impossible\");\n    }\n}\n</code></pre>\n\n<p>Let's ask a question:</p>\n\n<blockquote>\n  <p><strong>In a well-typed program, can a legal call to <code>fn</code> hit the error case?</strong></p>\n</blockquote>\n\n<p>The <em>desired</em> answer is, of course, \"No\". But what does this have to do with <code>Object.keys</code>?</p>\n\n<p>Now consider this <em>other</em> code:</p>\n\n<pre><code>interface NamedPoint extends Point {\n    name: string;\n}\n\nconst origin: NamedPoint = { name: \"origin\", x: 0, y: 0 };\n</code></pre>\n\n<p>Note that according to TypeScript's type system, all <code>NamedPoint</code>s are valid <code>Point</code>s.</p>\n\n<p>Now let's write <em>a little more code</em>:</p>\n\n<pre><code>function doSomething(pt: Point) {\n    for (const k of Object.keys(pt)) {\n        // A valid call iff Object.keys(pt) returns (keyof Point)[]\n        fn(k);\n    }\n}\n// Throws an exception\ndoSomething(origin);\n</code></pre>\n\n<p>Our well-typed program just threw an exception!</p>\n\n<p>Something went wrong here!\nBy returning <code>keyof T</code> from <code>Object.keys</code>, we've violated the assumption that <code>keyof T</code> forms an exhaustive list, because having a reference to an object doesn't mean that the <em>type of the reference</em> isn't a supertype of the <em>type of the value</em>.</p>\n\n<p>Basically, (at least) one of the following four things can't be true:</p>\n\n<ol>\n<li><code>keyof T</code> is an exhaustive list of the keys of <code>T</code></li>\n<li>A type with additional properties is always a subtype of its base type</li>\n<li>It is legal to alias a subtype value by a supertype reference</li>\n<li><code>Object.keys</code> returns <code>keyof T</code></li>\n</ol>\n\n<p>Throwing away point 1 makes <code>keyof</code> nearly useless, because it implies that <code>keyof Point</code> might be some value that isn't <code>\"x\"</code> or <code>\"y\"</code>.</p>\n\n<p>Throwing away point 2 completely destroys TypeScript's type system. Not an option.</p>\n\n<p>Throwing away point 3 also completely destroys TypeScript's type system.</p>\n\n<p>Throwing away point 4 is fine and makes you, the programmer, think about whether or not the object you're dealing with is possibly an alias for a subtype of the thing you think you have.</p>\n\n<p>The \"missing feature\" to make this <em>legal but not contradictory</em> is <a href=\"https://github.com/Microsoft/TypeScript/issues/12936\" rel=\"noreferrer\">Exact Types</a>, which would allow you to declare a new <em>kind</em> of type that wasn't subject to point #2. If this feature existed, it would presumably be possible to make <code>Object.keys</code> return <code>keyof T</code> only for <code>T</code>s which were declared as <em>exact</em>.</p>\n",
        "OwnerUserId": "1704166",
        "OwnerDisplayName": "",
        "LastEditorUserId": "3617886",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-03-05 23:04:33",
        "LastActivityDate": "2019-03-05 23:04:33",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "3",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56695191",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56657639",
        "CreationDate": "2019-06-20 23:49:46",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<p>EDIT: Found a workaround, but it might not work some day.</p>\n\n<p>It uses reflection to get the real path of the StorageVolume instance, and it uses what I had before to get the path of persistedUriPermissions . If there are intersections between them, it means I have access to the storageVolume.</p>\n\n<p>Seems to work on emulator, which finally has both internal storage and SD-card.</p>\n\n<p>Hopefully we will get proper API and not need to use reflections.</p>\n\n<p>If there is a better way to do it, without those kinds of tricks, please let me know.</p>\n\n<p>So, here's an example:</p>\n\n<p><strong>MainActivity.kt</strong></p>\n\n<pre><code>class MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        val storageManager = getSystemService(Context.STORAGE_SERVICE) as StorageManager\n        val storageVolumes = storageManager.storageVolumes\n        val primaryVolume = storageManager.primaryStorageVolume\n        checkAccessButton.setOnClickListener {\n            val persistedUriPermissions = contentResolver.persistedUriPermissions\n            val storageVolumePathsWeHaveAccessTo = HashSet&lt;String&gt;()\n            Log.d(\"AppLog\", \"got access to paths:\")\n            for (persistedUriPermission in persistedUriPermissions) {\n                val path = FileUtilEx.getFullPathFromTreeUri(this, persistedUriPermission.uri)\n                        ?: continue\n                Log.d(\"AppLog\", \"path: $path\")\n                storageVolumePathsWeHaveAccessTo.add(path)\n            }\n            Log.d(\"AppLog\", \"storage volumes:\")\n            for (storageVolume in storageVolumes) {\n                val volumePath = FileUtilEx.getVolumePath(storageVolume)\n                if (volumePath == null) {\n                    Log.d(\"AppLog\", \"storageVolume \\\"${storageVolume.getDescription(this)}\\\" - failed to get volumePath\")\n                } else {\n                    val hasAccess = storageVolumePathsWeHaveAccessTo.contains(volumePath)\n                    Log.d(\"AppLog\", \"storageVolume \\\"${storageVolume.getDescription(this)}\\\" - volumePath:$volumePath - gotAccess? $hasAccess\")\n                }\n            }\n        }\n        requestAccessButton.setOnClickListener {\n            val intent = primaryVolume.createOpenDocumentTreeIntent()\n            startActivityForResult(intent, 1)\n        }\n    }\n\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n        Log.d(\"AppLog\", \"resultCode:$resultCode\")\n        val uri = data?.data ?: return\n        val takeFlags = Intent.FLAG_GRANT_READ_URI_PERMISSION or Intent.FLAG_GRANT_WRITE_URI_PERMISSION\n        contentResolver.takePersistableUriPermission(uri, takeFlags)\n        val fullPathFromTreeUri = FileUtilEx.getFullPathFromTreeUri(this, uri)\n        Log.d(\"AppLog\", \"granted uri:$uri $fullPathFromTreeUri\")\n    }\n}\n</code></pre>\n\n<p><strong>FileUtilEx.java</strong></p>\n\n<pre><code>/**\n * Get the full path of a document from its tree URI.\n *\n * @param treeUri The tree RI.\n * @return The path (without trailing file separator).\n */\npublic static String getFullPathFromTreeUri(Context context, final Uri treeUri) {\n    if (treeUri == null)\n        return null;\n    String volumePath = getVolumePath(context, getVolumeIdFromTreeUri(treeUri));\n    if (volumePath == null)\n        return File.separator;\n    if (volumePath.endsWith(File.separator))\n        volumePath = volumePath.substring(0, volumePath.length() - 1);\n    String documentPath = getDocumentPathFromTreeUri(treeUri);\n    if (documentPath.endsWith(File.separator))\n        documentPath = documentPath.substring(0, documentPath.length() - 1);\n    if (documentPath.length() &gt; 0)\n        if (documentPath.startsWith(File.separator))\n            return volumePath + documentPath;\n        else return volumePath + File.separator + documentPath;\n    return volumePath;\n}\n\npublic static String getVolumePath(StorageVolume storageVolume){\n    if (VERSION.SDK_INT &lt; VERSION_CODES.LOLLIPOP)\n        return null;\n    try{\n        final Class&lt;?&gt; storageVolumeClazz = StorageVolume.class;\n        final Method getPath = storageVolumeClazz.getMethod(\"getPath\");\n        return (String) getPath.invoke(storageVolume);\n    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n        e.printStackTrace();\n    }\n    return null;\n}\n\n/**\n * Get the path of a certain volume.\n *\n * @param volumeId The volume id.\n * @return The path.\n */\n@SuppressLint(\"ObsoleteSdkInt\")\nprivate static String getVolumePath(Context context, final String volumeId) {\n    if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.LOLLIPOP)\n        return null;\n    try {\n        final StorageManager storageManager = (StorageManager) context.getSystemService(Context.STORAGE_SERVICE);\n        if (android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.N) {\n            final Class&lt;?&gt; storageVolumeClazz = StorageVolume.class;\n            //noinspection JavaReflectionMemberAccess\n            final Method getPath = storageVolumeClazz.getMethod(\"getPath\");\n            final List&lt;StorageVolume&gt; storageVolumes = storageManager.getStorageVolumes();\n            for (final StorageVolume storageVolume : storageVolumes) {\n                final String uuid = storageVolume.getUuid();\n                final boolean primary = storageVolume.isPrimary();\n                // primary volume?\n                if (primary &amp;&amp; PRIMARY_VOLUME_NAME.equals(volumeId)) {\n                    return (String) getPath.invoke(storageVolume);\n                }\n                // other volumes?\n                if (uuid != null &amp;&amp; uuid.equals(volumeId))\n                    return (String) getPath.invoke(storageVolume);\n            }\n            return null;\n        }\n        final Class&lt;?&gt; storageVolumeClazz = Class.forName(\"android.os.storage.StorageVolume\");\n        final Method getVolumeList = storageManager.getClass().getMethod(\"getVolumeList\");\n        final Method getUuid = storageVolumeClazz.getMethod(\"getUuid\");\n        //noinspection JavaReflectionMemberAccess\n        final Method getPath = storageVolumeClazz.getMethod(\"getPath\");\n        final Method isPrimary = storageVolumeClazz.getMethod(\"isPrimary\");\n        final Object result = getVolumeList.invoke(storageManager);\n        final int length = Array.getLength(result);\n        for (int i = 0; i &lt; length; i++) {\n            final Object storageVolumeElement = Array.get(result, i);\n            final String uuid = (String) getUuid.invoke(storageVolumeElement);\n            final Boolean primary = (Boolean) isPrimary.invoke(storageVolumeElement);\n            // primary volume?\n            if (primary &amp;&amp; PRIMARY_VOLUME_NAME.equals(volumeId)) {\n                return (String) getPath.invoke(storageVolumeElement);\n            }\n            // other volumes?\n            if (uuid != null &amp;&amp; uuid.equals(volumeId))\n                return (String) getPath.invoke(storageVolumeElement);\n        }\n        // not found.\n        return null;\n    } catch (Exception ex) {\n        return null;\n    }\n}\n\n/**\n * Get the document path (relative to volume name) for a tree URI (LOLLIPOP).\n *\n * @param treeUri The tree URI.\n * @return the document path.\n */\n@TargetApi(VERSION_CODES.LOLLIPOP)\nprivate static String getDocumentPathFromTreeUri(final Uri treeUri) {\n    final String docId = DocumentsContract.getTreeDocumentId(treeUri);\n    //TODO avoid using spliting of a string (because it uses extra strings creation)\n    final String[] split = docId.split(\":\");\n    if ((split.length &gt;= 2) &amp;&amp; (split[1] != null))\n        return split[1];\n    else\n        return File.separator;\n}\n\n/**\n * Get the volume ID from the tree URI.\n *\n * @param treeUri The tree URI.\n * @return The volume ID.\n */\n@TargetApi(VERSION_CODES.LOLLIPOP)\nprivate static String getVolumeIdFromTreeUri(final Uri treeUri) {\n    final String docId = DocumentsContract.getTreeDocumentId(treeUri);\n    final int end = docId.indexOf(':');\n    String result = end == -1 ? null : docId.substring(0, end);\n    return result;\n}\n</code></pre>\n\n<p><strong>activity_main.xml</strong></p>\n\n<pre><code>&lt;LinearLayout\n  xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:tools=\"http://schemas.android.com/tools\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"\n  android:gravity=\"center\" android:orientation=\"vertical\" tools:context=\".MainActivity\"&gt;\n\n  &lt;Button\n    android:id=\"@+id/checkAccessButton\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:text=\"checkAccess\"/&gt;\n\n  &lt;Button\n    android:id=\"@+id/requestAccessButton\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:text=\"requestAccess\"/&gt;\n\n&lt;/LinearLayout&gt;\n</code></pre>\n\n<p>To put it in a simple function, here:</p>\n\n<pre><code>/** for each storageVolume, tells if we have access or not, via a HashMap (true for each iff we identified it has access*/\nfun getStorageVolumesAccessState(context: Context): HashMap&lt;StorageVolume, Boolean&gt; {\n    val storageManager = context.getSystemService(Context.STORAGE_SERVICE) as StorageManager\n    val storageVolumes = storageManager.storageVolumes\n    val persistedUriPermissions = context.contentResolver.persistedUriPermissions\n    val storageVolumePathsWeHaveAccessTo = HashSet&lt;String&gt;()\n    //            Log.d(\"AppLog\", \"got access to paths:\")\n    for (persistedUriPermission in persistedUriPermissions) {\n        val path = FileUtilEx.getFullPathFromTreeUri(context, persistedUriPermission.uri)\n                ?: continue\n        //                Log.d(\"AppLog\", \"path: $path\")\n        storageVolumePathsWeHaveAccessTo.add(path)\n    }\n    //            Log.d(\"AppLog\", \"storage volumes:\")\n    val result = HashMap&lt;StorageVolume, Boolean&gt;(storageVolumes.size)\n    for (storageVolume in storageVolumes) {\n        val volumePath = FileUtilEx.getVolumePath(storageVolume)\n        val hasAccess = volumePath != null &amp;&amp; storageVolumePathsWeHaveAccessTo.contains(volumePath)\n        result[storageVolume] = hasAccess\n    }\n    return result\n}\n</code></pre>\n",
        "OwnerUserId": "878126",
        "OwnerDisplayName": "",
        "LastEditorUserId": "878126",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-06-24 21:57:00",
        "LastActivityDate": "2019-06-24 21:57:00",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56782485",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56657639",
        "CreationDate": "2019-06-27 00:28:43",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<p>Here is an alternate way to get what you want. It is a work-around like you have posted without using reflection or file paths.</p>\n\n<p>On an emulator, I see the following items for which I have permitted access.</p>\n\n<p>persistedUriPermissions array contents (value of URI only):</p>\n\n<blockquote>\n  <p>0 uri = content://com.android.externalstorage.documents/tree/primary%3A<br/>\n   1 uri = content://com.android.externalstorage.documents/tree/1D03-2E0E%3ADownload<br/>\n   2 uri = content://com.android.externalstorage.documents/tree/1D03-2E0E%3A<br/>\n   3 uri = content://com.android.externalstorage.documents/tree/primary%3ADCIM<br/>\n   4 uri = content://com.android.externalstorage.documents/tree/primary%3AAlarms</p>\n</blockquote>\n\n<p>\"%3A\" is a colon (\":\"). So, it appears that the URI is constructed as follows for a volume where \"&lt;volume>\" is the UUID of the volume.</p>\n\n<blockquote>\n  <p>uri = \"content://com.android.externalstorage.documents/tree/&lt;volume>:\"</p>\n</blockquote>\n\n<p>If the uri is a directory directly under a volume, then the structure is:</p>\n\n<blockquote>\n  <p>uri = \"content://com.android.externalstorage.documents/tree/&lt;volume>:&lt;directory>\"</p>\n</blockquote>\n\n<p>For directories deeper in the structure, the format is:</p>\n\n<blockquote>\n  <p>uri = \"content://com.android.externalstorage.documents/tree/&lt;volume>:&lt;directory>/&lt;directory>/&lt;directory>...\"</p>\n</blockquote>\n\n<p>So, it is just a matter of extracting volumes from URIs in these formats. The volume extracted can be used as a key for <code>StorageManager.storageVolumes</code>. The following code does just this.</p>\n\n<p>It seems to me that there should be an easier way to go about this. There must be a missing linkage in the API between storage volumes and URIs. I can't say that this technique covers all circumstances.</p>\n\n<p>I also question the UUID that is returned by <code>storageVolume.uuid</code> which seems to be a 32-bit value. I thought that UUIDs are 128 bits in length. Is this an alternative format for a UUID or somehow derived from the UUID? Interesting, and it is all about to drop! :(</p>\n\n<p><strong>MainActivity.kt</strong></p>\n\n<pre><code>class MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        val storageManager = getSystemService(Context.STORAGE_SERVICE) as StorageManager\n        var storageVolumes = storageManager.storageVolumes\n        val storageVolumePathsWeHaveAccessTo = HashSet&lt;String&gt;()\n\n        checkAccessButton.setOnClickListener {\n            checkAccessToStorageVolumes()\n        }\n\n        requestAccessButton.setOnClickListener {\n            storageVolumes = storageManager.storageVolumes\n            val primaryVolume = storageManager.primaryStorageVolume\n            val intent = primaryVolume.createOpenDocumentTreeIntent()\n            startActivityForResult(intent, 1)\n        }\n    }\n\n    private fun checkAccessToStorageVolumes() {\n        val storageVolumePathsWeHaveAccessTo = HashSet&lt;String&gt;()\n        val persistedUriPermissions = contentResolver.persistedUriPermissions\n        persistedUriPermissions.forEach {\n            storageVolumePathsWeHaveAccessTo.add(it.uri.toString())\n        }\n        val storageManager = getSystemService(Context.STORAGE_SERVICE) as StorageManager\n        val storageVolumes = storageManager.storageVolumes\n\n        for (storageVolume in storageVolumes) {\n            val uuid = if (storageVolume.isPrimary) {\n                // Primary storage doesn't get a UUID here.\n                \"primary\"\n            } else {\n                storageVolume.uuid\n            }\n            val volumeUri = uuid?.let { buildVolumeUriFromUuid(it) }\n            when {\n                uuid == null -&gt; \n                    Log.d(\"AppLog\", \"UUID is null for ${storageVolume.getDescription(this)}!\")\n                storageVolumePathsWeHaveAccessTo.contains(volumeUri) -&gt; \n                    Log.d(\"AppLog\", \"Have access to $uuid\")\n                else -&gt; Log.d(\"AppLog\", \"Don't have access to $uuid\")\n            }\n        }\n    }\n\n    private fun buildVolumeUriFromUuid(uuid: String): String {\n        return DocumentsContract.buildTreeDocumentUri(\n            \"com.android.externalstorage.documents\",\n            \"$uuid:\"\n        ).toString()\n    }\n\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n        Log.d(\"AppLog\", \"resultCode:$resultCode\")\n        val uri = data?.data ?: return\n        val takeFlags =\n            Intent.FLAG_GRANT_READ_URI_PERMISSION or Intent.FLAG_GRANT_WRITE_URI_PERMISSION\n        contentResolver.takePersistableUriPermission(uri, takeFlags)\n        Log.d(\"AppLog\", \"granted uri: ${uri.path}\")\n    }\n}\n</code></pre>\n",
        "OwnerUserId": "6287910",
        "OwnerDisplayName": "",
        "LastEditorUserId": "6287910",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-06-29 21:44:07",
        "LastActivityDate": "2019-06-29 21:44:07",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "5",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54201224",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54200988",
        "CreationDate": "2019-01-15 14:47:35",
        "DeletionDate": "",
        "Score": "15",
        "ViewCount": "",
        "Body": "<p>I think <a href=\"https://en.cppreference.com/w/cpp/language/constraints\" rel=\"noreferrer\">cppreference's concepts page</a> explains this. I can explain with \"math\" so to say, why this must be like this:</p>\n\n<p>If you want to define a concept, you do this:</p>\n\n<pre><code>template&lt;typename T&gt;\nconcept Addable = requires (T x) { x + x; }; // requires-expression\n</code></pre>\n\n<p>If you want to declare a function that uses that concept, you do this:</p>\n\n<pre><code>template&lt;typename T&gt; requires Addable&lt;T&gt; // requires-clause, not requires-expression\nT add(T a, T b) { return a + b; }\n</code></pre>\n\n<p>Now if you don't want to define the concept separately, I guess all you have to do is some substitution. Take this part <code>requires (T x) { x + x; };</code> and replace the <code>Addable&lt;T&gt;</code> part, and you'll get:</p>\n\n<pre><code>template&lt;typename T&gt; requires requires (T x) { x + x; }\nT add(T a, T b) { return a + b; }\n</code></pre>\n\n<p>which is what you're asking about.</p>\n",
        "OwnerUserId": "1317944",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-01-15 14:47:35",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "8",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54201537",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54200988",
        "CreationDate": "2019-01-15 15:03:46",
        "DeletionDate": "",
        "Score": "78",
        "ViewCount": "",
        "Body": "<p>It is because the grammar requires it. It does.</p>\n\n<p>A <code>requires</code> constraint does not <em>have to</em> use a <code>requires</code> expression. It can use any more-or-less arbitrary boolean constant expression. Therefore, <code>requires (foo)</code> must be a legitimate <code>requires</code> constraint.</p>\n\n<p>A <code>requires</code> <em>expression</em> (that thing that tests whether certain things follow certain constraints) is a distinct construct; it's just introduced by the same keyword. <code>requires (foo f)</code> would be the beginning of a valid <code>requires</code> expression.</p>\n\n<p>What you want is that if you use <code>requires</code> in a place that accepts constraints, you should be able to make a \"constraint+expression\" out of the <code>requires</code> clause.</p>\n\n<p>So here's the question: if you put <code>requires (foo)</code> into a place that is appropriate for a requires constraint... how far does the parser have to go before it can realize that this is a requires <em>constraint</em> rather than a constraint+expression the way you want it to be?</p>\n\n<p>Consider this:</p>\n\n<pre><code>void bar() requires (foo)\n{\n  //stuff\n}\n</code></pre>\n\n<p>If <code>foo</code> is a type, then <code>(foo)</code> is a parameter list of a requires expression, and everything in the <code>{}</code> is not the body of the function but the body of that <code>requires</code> expression. Otherwise, <code>foo</code> is an expression in a <code>requires</code> clause.</p>\n\n<p>Well, you could say that the compiler should just figure out what <code>foo</code> is first. But C++ <em>really</em> doesn't like it when the basic act of parsing a sequence of tokens requires that the compiler figure out what those identifiers mean before it can make sense of the tokens. Yes, C++ is context-sensitive, so this does happen. But the committee prefers to avoid it where possible.</p>\n\n<p>So yes, it's grammar.</p>\n",
        "OwnerUserId": "734069",
        "OwnerDisplayName": "",
        "LastEditorUserId": "734069",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-01-15 17:01:42",
        "LastActivityDate": "2019-01-15 17:01:42",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "16",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54201765",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54200988",
        "CreationDate": "2019-01-15 15:18:11",
        "DeletionDate": "",
        "Score": "-10",
        "ViewCount": "",
        "Body": "<p>Because you are saying that a thing A has a requirement B, and the requirement B has a requirement C.</p>\n\n<p>The thing A requires B which in turn requires C.</p>\n\n<p>The \"requires\" clause itself requires something.</p>\n\n<p>You have thing A (requiring B (requiring C)).</p>\n\n<p>Meh. :)</p>\n",
        "OwnerUserId": "560648",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-01-15 15:18:11",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54203135",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54200988",
        "CreationDate": "2019-01-15 16:36:34",
        "DeletionDate": "",
        "Score": "59",
        "ViewCount": "",
        "Body": "<p>The situation is exactly analogous to <code>noexcept(noexcept(...))</code>. Sure, this sounds more like a bad thing than a good thing, but let me explain. :)  We'll start with what you already know:</p>\n\n<p>C++11 has \"<code>noexcept</code>-clauses\" and \"<code>noexcept</code>-expressions.\" They do different things.</p>\n\n<ul>\n<li><p>A <code>noexcept</code>-clause says, \"This function <em>should be noexcept when...</em> (some condition).\" It goes on a function declaration, takes a boolean parameter, and causes a behavioral change in the declared function.</p></li>\n<li><p>A <code>noexcept</code>-expression says, \"Compiler, <em>please tell me whether</em> (some expression) is noexcept.\" It is itself a boolean expression. It has no \"side effects\" on the behavior of the program \u2014 it's just asking the compiler for the answer to a yes/no question. \"Is this expression noexcept?\"</p></li>\n</ul>\n\n<p>We <em>can</em> nest a <code>noexcept</code>-expression inside a <code>noexcept</code>-clause, but we typically consider it bad style to do so.</p>\n\n<pre><code>template&lt;class T&gt;\nvoid incr(T t) noexcept(noexcept(++t));  // NOT SO HOT\n</code></pre>\n\n<p>It's considered better style to encapsulate the <code>noexcept</code>-expression in a type-trait.</p>\n\n<pre><code>template&lt;class T&gt; inline constexpr bool is_nothrow_incrable_v =\n    noexcept(++std::declval&lt;T&amp;&gt;());  // BETTER, PART 1\n\ntemplate&lt;class T&gt;\nvoid incr(T t) noexcept(is_nothrow_incrable_v&lt;T&gt;);  // BETTER, PART 2\n</code></pre>\n\n<hr>\n\n<p>The C++2a Working Draft has \"<code>requires</code>-clauses\" and \"<code>requires</code>-expressions.\" They do different things.</p>\n\n<ul>\n<li><p>A <code>requires</code>-clause says, \"This function <em>should participate in overload resolution when...</em> (some condition).\" It goes on a function declaration, takes a boolean parameter, and causes a behavioral change in the declared function.</p></li>\n<li><p>A <code>requires</code>-expression says, \"Compiler, <em>please tell me whether</em> (some set of expressions) is well-formed.\" It is itself a boolean expression. It has no \"side effects\" on the behavior of the program \u2014 it's just asking the compiler for the answer to a yes/no question. \"Is this expression well-formed?\"</p></li>\n</ul>\n\n<p>We <em>can</em> nest a <code>requires</code>-expression inside a <code>requires</code>-clause, but we typically consider it bad style to do so.</p>\n\n<pre><code>template&lt;class T&gt;\nvoid incr(T t) requires (requires(T t) { ++t; });  // NOT SO HOT\n</code></pre>\n\n<p>It's considered better style to encapsulate the <code>requires</code>-expression in a type-trait...</p>\n\n<pre><code>template&lt;class T&gt; inline constexpr bool is_incrable_v =\n    requires(T t) { ++t; };  // BETTER, PART 1\n\ntemplate&lt;class T&gt;\nvoid incr(T t) requires is_incrable_v&lt;T&gt;;  // BETTER, PART 2\n</code></pre>\n\n<p>...or in a (C++2a Working Draft) concept.</p>\n\n<pre><code>template&lt;class T&gt; concept Incrable =\n    requires(T t) { ++t; };  // BETTER, PART 1\n\ntemplate&lt;class T&gt;\nvoid incr(T t) requires Incrable&lt;T&gt;;  // BETTER, PART 2\n</code></pre>\n",
        "OwnerUserId": "1424877",
        "OwnerDisplayName": "",
        "LastEditorUserId": "1424877",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-01-16 16:08:59",
        "LastActivityDate": "2019-01-16 16:08:59",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "4",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54507048",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54366277",
        "CreationDate": "2019-02-03 20:06:37",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<p>So I <a href=\"https://github.com/khmarbaise/javaee/commit/b51ccd76fd51e32ca7c3c360e6eba0bb4e451876#diff-e1a6958b3feca268fecd28f2e9aa9620\" rel=\"nofollow noreferrer\">have checked via printing out the system properties with some simple tests</a>.</p>\n\n<p>During the tests via maven-surefire-plugin the <code>user.dir</code> will be changed to the root of the appropriate module in a multi module build.</p>\n\n<p>But as I mentioned already there is a system property available <code>basedir</code> which can be used to correctly handle the location for tests which needs to access them via <code>File</code>...The <code>basedir</code> is pointed to the location of the <code>pom.xml</code> of the appropriate module. </p>\n\n<p>But unfortunately the <code>basedir</code> property is <strong>not</strong> set by IDEA IntelliJ during the test run. </p>\n\n<p>But this can be solved by a setup like this:</p>\n\n<pre><code> private String basedir;\n\n @Before\n public void before() {\n    this.basedir = System.getProperty(\"basedir\", System.getProperty(\"user.dir\", \"Need to think about the default value\"));\n }\n\n @Test\n public void testX() {\n   File file = new File(this.basedir, \"src/main/java/com/pany/Foo.java\");\n   assertTrue(\"Missing file: \" + file.getAbsolutePath(), file.exists());\n }\n</code></pre>\n\n<p>This will work in Maven Surefire with <code>-DforkCount=0</code> as well as <code>-DforkCount=1</code> and in IDE's (checked only IDEA IntelliJ).</p>\n\n<p>And yes that is an issue in Maven Surefire plugin changing the <code>user.dir</code>. </p>\n\n<p>We might convince IDE's to support the <code>basedir</code> property as well ? </p>\n",
        "OwnerUserId": "296328",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-02-03 20:06:37",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56599142",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55578429",
        "CreationDate": "2019-06-14 13:24:20",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<p><strong>You question was:</strong></p>\n\n<blockquote>\n  <p>Do we need to use std::launder when doing pointer arithmetic within a\n  standard-layout object (e.g., with offsetof)?</p>\n</blockquote>\n\n<p>No.</p>\n\n<p><code>std::launder</code> won't change anything in this case and therefore has nothing to do with the presented example (<em>imo</em> edit launder out of the question or ask another question).</p>\n\n<p><code>std::launder</code> is usually just needed in a subset of cases (eg. due to a const member) where you change (or create) <em>an underlying object</em> in some <em>runtime</em> manner (eg. via placement new). Mnemonic: the object is 'dirty' and needs to be <code>std::launder</code>'ed.</p>\n\n<p><strong>Using only a standard layout type cannot result in a situation where you would ever need to use std::launder.</strong></p>\n",
        "OwnerUserId": "2261538",
        "OwnerDisplayName": "",
        "LastEditorUserId": "2261538",
        "LastEditorDisplayName": "",
        "LastEditDate": "2020-02-21 15:39:27",
        "LastActivityDate": "2020-02-21 15:39:27",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "3",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "55490354",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55487397",
        "CreationDate": "2019-04-03 08:21:47",
        "DeletionDate": "",
        "Score": "42",
        "ViewCount": "",
        "Body": "<p>We cannot directly upgrade VS 2017 to VS 2019.  They are compatible and work side by side though (like the following).  Please download and install VS 2019 from <a href=\"https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes\" rel=\"noreferrer\">https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes</a> \n<a href=\"https://i.stack.imgur.com/L3Gay.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/L3Gay.png\" alt=\"enter image description here\"></a></p>\n",
        "OwnerUserId": "6593065",
        "OwnerDisplayName": "",
        "LastEditorUserId": "5405967",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-06-29 14:25:46",
        "LastActivityDate": "2019-06-29 14:25:46",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "5",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56612565",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55487397",
        "CreationDate": "2019-06-15 17:20:53",
        "DeletionDate": "",
        "Score": "3",
        "ViewCount": "",
        "Body": "<p>On Visual Studio Installer, You will see two tabs : Installed and Available. On Installed Tab, Visual Studio Community 2017, Click on More Drop-down, Choose Uninstall. Reboot is recommended before you begin with Installing Visual Studio Community 2019 from Available Tab.</p>\n",
        "OwnerUserId": "1864358",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-06-15 17:20:53",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57048676",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55487397",
        "CreationDate": "2019-07-16 00:37:17",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<p>user1864358 gave a GREAT answer!  That is brilliant!</p>\n\n<p>I have 2017 on one box and 2019 on another.  </p>\n\n<p>Kinda prefer 2019 and I thought installing 2017 on box #3 would just install the LATEST ver.... assumptions, I am finding in life, are very, VERY time consuming.</p>\n\n<ol>\n<li>Following his advice, I went to Uninstall or change a program ...</li>\n<li>I Ran \"MS Vis Studio INSTALLER\" (you run the installer to uninstall, neato!) </li>\n<li>NOTE: NO UNINSTALL, so, as above, you install to uninstall, groovy!</li>\n<li>The first question was \"Remove VS Installer and installations of VS?\"</li>\n<li>Hit Uninstall Button ...</li>\n<li>Let it do its thang, for like, 20-30 hours...</li>\n<li>Download and install 2019</li>\n</ol>\n\n<p>Voila!!</p>\n",
        "OwnerUserId": "10018705",
        "OwnerDisplayName": "",
        "LastEditorUserId": "10018705",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-07-16 00:52:15",
        "LastActivityDate": "2019-07-16 00:52:15",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "55703850",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55703849",
        "CreationDate": "2019-04-16 08:35:37",
        "DeletionDate": "",
        "Score": "28",
        "ViewCount": "",
        "Body": "<p>A possible workaround is to use reflection:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>import java.util.Arrays;\n\npublic class X&lt;T&gt; {\n    void m() {\n        class Z {}\n\n        for (Object o : Arrays.asList(1, 2, 3))\n            if (Z.class.isInstance(o)) {}\n    }\n}\n</code></pre>\n",
        "OwnerUserId": "521799",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-04-16 08:35:37",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "55703952",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55703849",
        "CreationDate": "2019-04-16 08:41:30",
        "DeletionDate": "",
        "Score": "3",
        "ViewCount": "",
        "Body": "<p>This should work either. Using reflection too. But seems a valid solution.</p>\n\n<pre><code>import java.util.Arrays;\n\npublic class X&lt;T&gt; {\n\n\n    void m() {\n\n        class Z2 {\n        }\n\n        for(Object o: Arrays.asList(1,2,3)) {\n            if(Z2.class.isAssignableFrom(o.getClass())) {\n\n            }\n        }\n\n    }\n\n}\n</code></pre>\n",
        "OwnerUserId": "3865831",
        "OwnerDisplayName": "",
        "LastEditorUserId": "466862",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-04-16 08:44:32",
        "LastActivityDate": "2019-04-16 08:44:32",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "1",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "55703981",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55703849",
        "CreationDate": "2019-04-16 08:42:40",
        "DeletionDate": "",
        "Score": "5",
        "ViewCount": "",
        "Body": "<p>Apparently, by making Z generic compilation succeeds. I expected that to require <code>&lt;T&gt;</code> as the type parameter, but you just have to make it generic, so anything will do</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>import java.util.Arrays;\n\npublic class X&lt;T&gt; {\n    void m() {\n        class Z&lt;Anything&gt; {}\n\n        for (Object o : Arrays.asList(1, 2, 3))\n            if (Z.class.isInstance(o)) {}\n    }\n}\n</code></pre>\n\n<p>Proper solution would be qualify the local class, but I don't think you can. Either you refactor it to a private static class or that's probably the best you can get.</p>\n",
        "OwnerUserId": "7849",
        "OwnerDisplayName": "",
        "LastEditorUserId": "7849",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-04-16 08:47:55",
        "LastActivityDate": "2019-04-16 08:47:55",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "1",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "55704281",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55703849",
        "CreationDate": "2019-04-16 08:57:13",
        "DeletionDate": "",
        "Score": "43",
        "ViewCount": "",
        "Body": "<p>To me this seems to be an oversight or limitation in the Java language and I do not think it is possible. </p>\n\n<p>The referenced type in an <code>instanceof</code> expression must be reifiable according to <a href=\"https://docs.oracle.com/javase/specs/jls/se9/html/jls-4.html#jls-4.7\" rel=\"noreferrer\">JLS 4.7</a>, meaning that it must be expressed as a reifiable type by its fully qualified name. At the same time, <a href=\"https://docs.oracle.com/javase/specs/jls/se7/html/jls-6.html#jls-6.7\" rel=\"noreferrer\">JLS 6.7</a> states that local classes do not have a fully qualified name, they can therefore not be expressed as reifiable.</p>\n\n<p>If you declare Z as generic, the <code>instanceof</code> operator treats <code>Z</code> as a raw type where all generic properties to it - in this case the enclosing class - are considered raw as well. (Similar to a generic methods of a raw type being considered as raw despite any generic signature. This is a measure to retain backwards compatiblity of type generification.) Since any raw type is reifiable, declaring Z to be generic will compile.</p>\n",
        "OwnerUserId": "1237575",
        "OwnerDisplayName": "",
        "LastEditorUserId": "1237575",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-04-16 09:42:10",
        "LastActivityDate": "2019-04-16 09:42:10",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "6",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57131970",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57129668",
        "CreationDate": "2019-07-21 09:40:49",
        "DeletionDate": "",
        "Score": "13",
        "ViewCount": "",
        "Body": "<p>To support state restoration in iOS 13 you will need to encode enough state into the <code>NSUserActivity</code>:</p>\n\n<blockquote>\n  <p>Use this method to return an NSUserActivity object with information about your scene's data. Save enough information to be able to retrieve that data again after UIKit disconnects and then reconnects the scene. User activity objects are meant for recording what the user was doing, so you don't need to save the state of your scene's UI</p>\n</blockquote>\n\n<p>The advantage of this approach is that it can make it easier to support handoff, since you are creating the code necessary to persist and restore state via user activities.</p>\n\n<p>Unlike the previous state restoration approach where iOS recreated the view controller hierarchy for you, you are responsible for creating the view hierarchy for your scene in the scene delegate.  </p>\n\n<p>If you have multiple active scenes then your delegate will be called multiple times to save the state and multiple times to restore state; Nothing special is needed.</p>\n\n<p>The changes I made to your code are:</p>\n\n<p><strong>AppDelegate.swift</strong></p>\n\n<p>Disable \"legacy\" state restoration on iOS 13 &amp; later:</p>\n\n<pre><code>func application(_ application: UIApplication, viewControllerWithRestorationIdentifierPath identifierComponents: [String], coder: NSCoder) -&gt; UIViewController? {\n    if #available(iOS 13, *) {\n\n    } else {\n        print(\"AppDelegate viewControllerWithRestorationIdentifierPath\")\n\n        // If this is for the nav controller, restore it and set it as the window's root\n        if identifierComponents.first == \"RootNC\" {\n            let nc = UINavigationController()\n            nc.restorationIdentifier = \"RootNC\"\n            self.window?.rootViewController = nc\n\n            return nc\n        }\n    }\n    return nil\n}\n\nfunc application(_ application: UIApplication, willEncodeRestorableStateWith coder: NSCoder) {\n    print(\"AppDelegate willEncodeRestorableStateWith\")\n    if #available(iOS 13, *) {\n\n    } else {\n    // Trigger saving of the root view controller\n        coder.encode(self.window?.rootViewController, forKey: \"root\")\n    }\n}\n\nfunc application(_ application: UIApplication, didDecodeRestorableStateWith coder: NSCoder) {\n    print(\"AppDelegate didDecodeRestorableStateWith\")\n}\n\nfunc application(_ application: UIApplication, shouldSaveApplicationState coder: NSCoder) -&gt; Bool {\n    print(\"AppDelegate shouldSaveApplicationState\")\n    if #available(iOS 13, *) {\n        return false\n    } else {\n        return true\n    }\n}\n\nfunc application(_ application: UIApplication, shouldRestoreApplicationState coder: NSCoder) -&gt; Bool {\n    print(\"AppDelegate shouldRestoreApplicationState\")\n    if #available(iOS 13, *) {\n        return false\n    } else {\n        return true\n    }\n}\n</code></pre>\n\n<p><strong>SceneDelegate.swift</strong></p>\n\n<p>Create a user activity when required and use it to recreate the view controller.  Note that you are responsible for creating the view hierarchy in both normal and restore cases. </p>\n\n<pre><code>func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {\n    print(\"SceneDelegate willConnectTo\")\n\n    guard let winScene = (scene as? UIWindowScene) else { return }\n\n    // Got some of this from WWDC2109 video 258\n    window = UIWindow(windowScene: winScene)\n\n    let vc = ViewController()\n\n    if let activity = connectionOptions.userActivities.first ?? session.stateRestorationActivity {\n        vc.continueFrom(activity: activity)\n    }\n\n    let nc = UINavigationController(rootViewController: vc)\n    nc.restorationIdentifier = \"RootNC\"\n\n    self.window?.rootViewController = nc\n    window?.makeKeyAndVisible()\n\n\n}\n\nfunc stateRestorationActivity(for scene: UIScene) -&gt; NSUserActivity? {\n    print(\"SceneDelegate stateRestorationActivity\")\n\n    if let nc = self.window?.rootViewController as? UINavigationController, let vc = nc.viewControllers.first as? ViewController {\n        return vc.continuationActivity\n    } else {\n        return nil\n    }\n\n}\n</code></pre>\n\n<p><strong>ViewController.swift</strong></p>\n\n<p>Add support for saving and loading from an <code>NSUserActivity</code>.</p>\n\n<pre><code>var continuationActivity: NSUserActivity {\n    let activity = NSUserActivity(activityType: \"restoration\")\n    activity.persistentIdentifier = UUID().uuidString\n    activity.addUserInfoEntries(from: [\"Count\":self.count])\n    return activity\n}\n\nfunc continueFrom(activity: NSUserActivity) {\n    let count = activity.userInfo?[\"Count\"] as? Int ?? 0\n    self.count = count\n}\n</code></pre>\n",
        "OwnerUserId": "3418066",
        "OwnerDisplayName": "",
        "LastEditorUserId": "3418066",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-07-21 23:49:27",
        "LastActivityDate": "2019-07-21 23:49:27",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "1",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57211182",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57129668",
        "CreationDate": "2019-07-25 23:09:22",
        "DeletionDate": "",
        "Score": "8",
        "ViewCount": "",
        "Body": "<p>Based on more research and very helpful suggestions from <a href=\"https://stackoverflow.com/a/57131970/1226963\">the answer by Paulw11</a> I have come up with an approach that works for iOS 13 and iOS 12 (and earlier) with no duplication of code and using the same approach for all versions of iOS.</p>\n\n<p>Note that while the original question and this answer don't use storyboards, the solution would be essentially the same. The only differences is that with storyboards, the AppDelegate and SceneDelegate wouldn't need the code to create the window and root view controller. And of course the ViewController wouldn't need code to create its views.</p>\n\n<p>The basic idea is to migrate the iOS 12 code to work the same as iOS 13. This means that the old state restoration is no longer used. <code>NSUserTask</code> is used to save and restore state. This approach has several benefits. It lets the same code work for all iOS versions, it gets you really close to supporting handoff with virtually no additional effort, and it lets you support multiple window scenes and full state restoration using the same basic code.</p>\n\n<p>Here's the updated AppDelegate.swift:</p>\n\n<pre><code>@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n    var window: UIWindow?\n\n    func application(_ application: UIApplication, willFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -&gt; Bool {\n        print(\"AppDelegate willFinishLaunchingWithOptions\")\n\n        if #available(iOS 13.0, *) {\n            // no-op - UI created in scene delegate\n        } else {\n            self.window = UIWindow(frame: UIScreen.main.bounds)\n            let vc = ViewController()\n            let nc = UINavigationController(rootViewController: vc)\n\n            self.window?.rootViewController = nc\n\n            self.window?.makeKeyAndVisible()\n        }\n\n        return true\n    }\n\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool {\n        print(\"AppDelegate didFinishLaunchingWithOptions\")\n\n        return true\n    }\n\n    func application(_ application: UIApplication, viewControllerWithRestorationIdentifierPath identifierComponents: [String], coder: NSCoder) -&gt; UIViewController? {\n        print(\"AppDelegate viewControllerWithRestorationIdentifierPath\")\n\n        return nil // We don't want any UI hierarchy saved\n    }\n\n    func application(_ application: UIApplication, willEncodeRestorableStateWith coder: NSCoder) {\n        print(\"AppDelegate willEncodeRestorableStateWith\")\n\n        if #available(iOS 13.0, *) {\n            // no-op\n        } else {\n            // This is the important link for iOS 12 and earlier\n            // If some view in your app sets a user activity on its window,\n            // here we give the view hierarchy a chance to update the user\n            // activity with whatever state info it needs to record so it can\n            // later be restored to restore the app to its previous state.\n            if let activity = window?.userActivity {\n                activity.userInfo = [:]\n                ((window?.rootViewController as? UINavigationController)?.viewControllers.first as? ViewController)?.updateUserActivityState(activity)\n\n                // Now save off the updated user activity\n                let wrap = NSUserActivityWrapper(activity)\n                coder.encode(wrap, forKey: \"userActivity\")\n            }\n        }\n    }\n\n    func application(_ application: UIApplication, didDecodeRestorableStateWith coder: NSCoder) {\n        print(\"AppDelegate didDecodeRestorableStateWith\")\n\n        // If we find a stored user activity, load it and give it to the view\n        // hierarchy so the UI can be restored to its previous state\n        if let wrap = coder.decodeObject(forKey: \"userActivity\") as? NSUserActivityWrapper {\n            ((window?.rootViewController as? UINavigationController)?.viewControllers.first as? ViewController)?.restoreUserActivityState(wrap.userActivity)\n        }\n    }\n\n    func application(_ application: UIApplication, shouldSaveApplicationState coder: NSCoder) -&gt; Bool {\n        print(\"AppDelegate shouldSaveApplicationState\")\n\n        if #available(iOS 13.0, *) {\n            return false\n        } else {\n            // Enabled just so we can persist the NSUserActivity if there is one\n            return true\n        }\n    }\n\n    func application(_ application: UIApplication, shouldRestoreApplicationState coder: NSCoder) -&gt; Bool {\n        print(\"AppDelegate shouldRestoreApplicationState\")\n\n        if #available(iOS 13.0, *) {\n            return false\n        } else {\n            return true\n        }\n    }\n\n    // MARK: UISceneSession Lifecycle\n\n    @available(iOS 13.0, *)\n    func application(_ application: UIApplication, configurationForConnecting connectingSceneSession: UISceneSession, options: UIScene.ConnectionOptions) -&gt; UISceneConfiguration {\n        print(\"AppDelegate configurationForConnecting\")\n\n        return UISceneConfiguration(name: \"Default Configuration\", sessionRole: connectingSceneSession.role)\n    }\n\n    @available(iOS 13.0, *)\n    func application(_ application: UIApplication, didDiscardSceneSessions sceneSessions: Set&lt;UISceneSession&gt;) {\n        print(\"AppDelegate didDiscardSceneSessions\")\n    }\n}\n</code></pre>\n\n<p>Under iOS 12 and earlier, the standard state restoration process is now only used to save/restore the <code>NSUserActivity</code>. It's not used to persist the view hierarchy any more.</p>\n\n<p>Since <code>NSUserActivity</code> doesn't conform to <code>NSCoding</code>, a wrapper class is used.</p>\n\n<p>NSUserActivityWrapper.swift:</p>\n\n<pre><code>import Foundation\n\nclass NSUserActivityWrapper: NSObject, NSCoding {\n    private (set) var userActivity: NSUserActivity\n\n    init(_ userActivity: NSUserActivity) {\n        self.userActivity = userActivity\n    }\n\n    required init?(coder: NSCoder) {\n        if let activityType = coder.decodeObject(forKey: \"activityType\") as? String {\n            userActivity = NSUserActivity(activityType: activityType)\n            userActivity.title = coder.decodeObject(forKey: \"activityTitle\") as? String\n            userActivity.userInfo = coder.decodeObject(forKey: \"activityUserInfo\") as? [AnyHashable: Any]\n        } else {\n            return nil;\n        }\n    }\n\n    func encode(with coder: NSCoder) {\n        coder.encode(userActivity.activityType, forKey: \"activityType\")\n        coder.encode(userActivity.title, forKey: \"activityTitle\")\n        coder.encode(userActivity.userInfo, forKey: \"activityUserInfo\")\n    }\n}\n</code></pre>\n\n<p>Note that additional properties of <code>NSUserActivity</code> might be needed depending on your needs.</p>\n\n<p>Here's the updated SceneDelegate.swift:</p>\n\n<pre><code>import UIKit\n\n@available(iOS 13.0, *)\nclass SceneDelegate: UIResponder, UIWindowSceneDelegate {\n    var window: UIWindow?\n\n    func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {\n        print(\"SceneDelegate willConnectTo\")\n\n        guard let winScene = (scene as? UIWindowScene) else { return }\n\n        window = UIWindow(windowScene: winScene)\n\n        let vc = ViewController()\n        let nc = UINavigationController(rootViewController: vc)\n\n        if let activity = connectionOptions.userActivities.first ?? session.stateRestorationActivity {\n            vc.restoreUserActivityState(activity)\n        }\n\n        self.window?.rootViewController = nc\n        window?.makeKeyAndVisible()\n    }\n\n    func stateRestorationActivity(for scene: UIScene) -&gt; NSUserActivity? {\n        print(\"SceneDelegate stateRestorationActivity\")\n\n        if let activity = window?.userActivity {\n            activity.userInfo = [:]\n            ((window?.rootViewController as? UINavigationController)?.viewControllers.first as? ViewController)?.updateUserActivityState(activity)\n\n            return activity\n        }\n\n        return nil\n    }\n}\n</code></pre>\n\n<p>And finally the updated ViewController.swift:</p>\n\n<pre><code>import UIKit\n\nclass ViewController: UIViewController {\n    var label: UILabel!\n    var count: Int = 0 {\n        didSet {\n            if let label = self.label {\n                label.text = \"\\(count)\"\n            }\n        }\n    }\n    var timer: Timer?\n\n    override func viewDidLoad() {\n        print(\"ViewController viewDidLoad\")\n\n        super.viewDidLoad()\n\n        view.backgroundColor = .green\n\n        label = UILabel(frame: .zero)\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.text = \"\\(count)\"\n        view.addSubview(label)\n        NSLayoutConstraint.activate([\n            label.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            label.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n        ])\n    }\n\n    override func viewWillAppear(_ animated: Bool) {\n        print(\"ViewController viewWillAppear\")\n\n        super.viewWillAppear(animated)\n\n        timer = Timer.scheduledTimer(withTimeInterval: 1, repeats: true, block: { (timer) in\n            self.count += 1\n            //self.userActivity?.needsSave = true\n        })\n        self.label.text = \"\\(count)\"\n    }\n\n    override func viewDidAppear(_ animated: Bool) {\n        super.viewDidAppear(animated)\n\n        let act = NSUserActivity(activityType: \"com.whatever.View\")\n        act.title = \"View\"\n        self.view.window?.userActivity = act\n    }\n\n    override func viewWillDisappear(_ animated: Bool) {\n        super.viewWillDisappear(animated)\n\n        self.view.window?.userActivity = nil\n    }\n\n    override func viewDidDisappear(_ animated: Bool) {\n        print(\"ViewController viewDidDisappear\")\n\n        super.viewDidDisappear(animated)\n\n        timer?.invalidate()\n        timer = nil\n    }\n\n    override func updateUserActivityState(_ activity: NSUserActivity) {\n        print(\"ViewController updateUserActivityState\")\n        super.updateUserActivityState(activity)\n\n        activity.addUserInfoEntries(from: [\"count\": count])\n    }\n\n    override func restoreUserActivityState(_ activity: NSUserActivity) {\n        print(\"ViewController restoreUserActivityState\")\n        super.restoreUserActivityState(activity)\n\n        count = activity.userInfo?[\"count\"] as? Int ?? 0\n    }\n}\n</code></pre>\n\n<p>Note that all code related to the old state restoration has been removed. It has been replaced with the use of <code>NSUserActivity</code>.</p>\n\n<p>In a real app, you would store all kinds of other details in the user activity needed to fully restore the app state on relaunch or to support handoff. Or store minimal data needed to launch a new window scene.</p>\n\n<p>You would also want to chain calls to <code>updateUserActivityState</code> and <code>restoreUserActivityState</code> to any child views as needed in a real app.</p>\n",
        "OwnerUserId": "1226963",
        "OwnerDisplayName": "",
        "LastEditorUserId": "1226963",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-07-26 04:10:27",
        "LastActivityDate": "2019-07-26 04:10:27",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "4",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57878874",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57129668",
        "CreationDate": "2019-09-10 22:21:28",
        "DeletionDate": "",
        "Score": "7",
        "ViewCount": "",
        "Body": "<p>This, it seems to me, is the major flaw in the structure of the <a href=\"https://stackoverflow.com/a/57211182/341994\">answers presented so far</a>: </p>\n\n<blockquote>\n  <p>You would also want to chain calls to <code>updateUserActivityState</code></p>\n</blockquote>\n\n<p>That misses the whole point of <code>updateUserActivityState</code>, which is that it is <em>called for you, automatically</em>, for all view controllers whose <code>userActivity</code> is the <em>same</em> as the NSUserActivity returned by the scene delegate's <code>stateRestorationActivity</code>.</p>\n\n<p>Thus, we automatically have a state-saving mechanism, and it remains only to devise a state-restoration mechanism to match. I will illustrate an entire architecture I've come up with.</p>\n\n<p><strong>NOTE:</strong> This discussion ignores multiple windows and it also ignores the original requirement of the question, that we be compatible with iOS 12 view controller-based state saving and restoration. My goal here is only to show <strong>how to do state saving and restoration in iOS 13 using NSUserActivity.</strong> However, only minor modifications are needed in order to fold this into a multiple-window app, so I think it answers the original question adequately.</p>\n\n<h3>Saving</h3>\n\n<p>Let's start with state-saving. This is entirely boilerplate. The scene delegate either creates the scene <code>userActivity</code> or passes the received restoration activity into it, and returns that as its own user activity:</p>\n\n<pre><code>func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {\n    guard let scene = (scene as? UIWindowScene) else { return }\n    scene.userActivity =\n        session.stateRestorationActivity ??\n        NSUserActivity(activityType: \"restoration\")\n}\nfunc stateRestorationActivity(for scene: UIScene) -&gt; NSUserActivity? {\n    return scene.userActivity\n}\n</code></pre>\n\n<p>Every view controller must use its own <code>viewDidAppear</code> to <em>share</em> that user activity object. That way, its own <code>updateUserActivityState</code> will be called <em>automatically</em> when we go into the background, and it has a chance to contribute to the global pool of the user info:</p>\n\n<pre><code>override func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n    self.userActivity = self.view.window?.windowScene?.userActivity\n}\n// called automatically at saving time!\noverride func updateUserActivityState(_ activity: NSUserActivity) {\n    super.updateUserActivityState(activity)\n    // gather info into `info`\n    activity.addUserInfoEntries(from: info)\n}\n</code></pre>\n\n<p>That's all! If every view controller does that, then every view controller that is alive at the time we go into background gets a chance to contribute to the user info of the user activity that will arrive next time we launch.</p>\n\n<h3>Restoration</h3>\n\n<p>This part is harder. The restoration info will arrive as <code>session.stateRestorationActivity</code> into the scene delegate. As the original question rightly asks: now what?</p>\n\n<p>There's more than one way to skin this cat, and I've tried most of them and settled on this one. My rule is this:</p>\n\n<ul>\n<li><p>Every view controller must have a <code>restorationInfo</code> property which is a dictionary. When any view controller is created during restoration, its creator (parent) must set that <code>restorationInfo</code> to the <code>userInfo</code> that arrived from <code>session.stateRestorationActivity</code>.</p></li>\n<li><p>This <code>userInfo</code> must be copied out right at the start, because it will be wiped out from the saved activity the first time <code>updateUserActivityState</code> is called (that is the part that really drove me crazy working out this architecture).</p></li>\n</ul>\n\n<p>The cool part is that if we do this right, the <code>restorationInfo</code> is set <em>before</em> <code>viewDidLoad</code>, and so the view controller can configure itself based on the info it put into the dictionary on saving.</p>\n\n<p>Each view controller must also <em>delete</em> its own <code>restorationInfo</code> when it is done with it, lest it use it again during the app's lifetime. It must be used only the once, on launch.</p>\n\n<p>So we must change our boilerplate:</p>\n\n<pre><code>var restorationInfo :  [AnyHashable : Any]?\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n    self.userActivity = self.view.window?.windowScene?.userActivity\n    self.restorationInfo = nil\n}\n</code></pre>\n\n<p>So now the only problem is the chain of how the <code>restorationInfo</code> of each view controller is set. The chain starts with the scene delegate, which is responsible for setting this property in the root view controller:</p>\n\n<pre><code>func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {\n    guard let scene = (scene as? UIWindowScene) else { return }\n    scene.userActivity =\n        session.stateRestorationActivity ??\n        NSUserActivity(activityType: \"restoration\")\n    if let rvc = window?.rootViewController as? RootViewController {\n        rvc.restorationInfo = scene.userActivity?.userInfo\n    }\n}\n</code></pre>\n\n<p>Each view controller is then responsible not only for configuring itself in its <code>viewDidLoad</code> based on the <code>restorationInfo</code>, but also for looking to see whether it was the parent / presenter of any further view controller. If so, it must create and present / push / whatever that view controller, making sure to pass on the <code>restorationInfo</code> before that child view controller's <code>viewDidLoad</code> runs.</p>\n\n<p>If every view controller does this correctly, the whole interface and state will be restored!</p>\n\n<h3>A bit more of an example</h3>\n\n<p>Presume we have just two possible view controllers: RootViewController and PresentedViewController. Either RootViewController was presenting PresentedViewController at the time we were backgrounded, or it wasn't. Either way, that information has been written into the info dictionary.</p>\n\n<p>So here is what RootViewController does:</p>\n\n<pre><code>var restorationInfo : [AnyHashable:Any]?\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    // configure self, including any info from restoration info\n}\n\n// this is the earliest we have a window, so it's the earliest we can present\n// if we are restoring the editing window\nvar didFirstWillLayout = false\noverride func viewWillLayoutSubviews() {\n    if didFirstWillLayout { return }\n    didFirstWillLayout = true\n    let key = PresentedViewController.editingRestorationKey\n    let info = self.restorationInfo\n    if let editing = info?[key] as? Bool, editing {\n        self.performSegue(withIdentifier: \"PresentWithNoAnimation\", sender: self)\n    }\n}\n\n// boilerplate\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n    self.userActivity = self.view.window?.windowScene?.userActivity\n    self.restorationInfo = nil\n}\n\n// called automatically because we share this activity with the scene\noverride func updateUserActivityState(_ activity: NSUserActivity) {\n    super.updateUserActivityState(activity)\n    // express state as info dictionary\n    activity.addUserInfoEntries(from: info)\n}\n</code></pre>\n\n<p>The cool part is that the PresentedViewController does exactly the same thing!</p>\n\n<pre><code>var restorationInfo :  [AnyHashable : Any]?\nstatic let editingRestorationKey = \"editing\"\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    // configure self, including info from restoration info\n}\n\n// boilerplate\noverride func viewDidAppear(_ animated: Bool) {\n    super.viewDidAppear(animated)\n    self.userActivity = self.view.window?.windowScene?.userActivity\n    self.restorationInfo = nil\n}\n\noverride func updateUserActivityState(_ activity: NSUserActivity) {\n    super.updateUserActivityState(activity)\n    let key = Self.editingRestorationKey\n    activity.addUserInfoEntries(from: [key:true])\n    // and add any other state info as well\n}\n</code></pre>\n\n<p>I think you can see that at this point it's only a matter of degree. If we have more view controllers to chain during the restoration process, they all work exactly the same way.</p>\n\n<h3>Final notes</h3>\n\n<p>As I said, this is not the only way to skin the restoration cat. But there are problems of timing and of distribution of responsibilities, and I think this is the most equitable approach.</p>\n\n<p>In particular, I do not hold with the idea that the scene delegate should be responsible for the whole restoration of the interface. It would need to know too much about the details of how to initialize each view controller along the line, and there are serious timing issues that are difficult to overcome in a deterministic way. My approach sort of imitates the old view controller-based restoration, making each view controller responsible for its child in the same way it would normally be.</p>\n",
        "OwnerUserId": "341994",
        "OwnerDisplayName": "",
        "LastEditorUserId": "341994",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-09-11 02:55:00",
        "LastActivityDate": "2019-09-11 02:55:00",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "7",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57955231",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57129668",
        "CreationDate": "2019-09-16 10:48:02",
        "DeletionDate": "",
        "Score": "5",
        "ViewCount": "",
        "Body": "<p>On 6th Sept 2019 Apple released <a href=\"https://developer.apple.com/documentation/uikit/uiviewcontroller/restoring_your_app_s_state\" rel=\"nofollow noreferrer\">this sample app</a> that demonstrates iOS 13 state restoration with backwards compatibility with iOS 12.</p>\n\n<p><strong>From Readme.md</strong></p>\n\n<p><em>The sample supports two different state preservation approaches. In iOS 13 and later, apps save state for each window scene using NSUserActivity objects. In iOS 12 and earlier, apps preserve the state of their user interface by saving and restoring the configuration of view controllers.</em></p>\n\n<p>The Readme convers in detail how it works - the basic trick is that on iOS 12 it encodes the Activity Object (available in iOS 12 for another purpose) in the old <code>encodeRestorableState</code> method.</p>\n\n<pre><code>override func encodeRestorableState(with coder: NSCoder) {\n    super.encodeRestorableState(with: coder)\n\n    let encodedActivity = NSUserActivityEncoder(detailUserActivity)\n    coder.encode(encodedActivity, forKey: DetailViewController.restoreActivityKey)\n}\n</code></pre>\n\n<p>And on iOS 13 it implements the missing automatic view controller hierarchy restoration using the configure method of the <code>SceneDelegate</code>.</p>\n\n<pre><code>func configure(window: UIWindow?, with activity: NSUserActivity) -&gt; Bool {\n    if let detailViewController = DetailViewController.loadFromStoryboard() {\n        if let navigationController = window?.rootViewController as? UINavigationController {\n            navigationController.pushViewController(detailViewController, animated: false)\n            detailViewController.restoreUserActivityState(activity)\n            return true\n        }\n    }\n    return false\n}\n</code></pre>\n\n<p>Lastly, the Readme includes testing advice but I'd like to add if you launch the Xcode 10.2 simulator first, e.g. iPhone 8 Plus and then launch Xcode 11 you will have the iPhone 8 Plus (12.4) as an option and you can experience the backwards-compatible behaviour. I also like to use these user defaults, the second allows the restoration archive to survive crashes:</p>\n\n<pre><code>[NSUserDefaults.standardUserDefaults setBool:YES forKey:@\"UIStateRestorationDebugLogging\"];\n[NSUserDefaults.standardUserDefaults setBool:YES forKey:@\"UIStateRestorationDeveloperMode\"];\n</code></pre>\n",
        "OwnerUserId": "259521",
        "OwnerDisplayName": "",
        "LastEditorUserId": "259521",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-09-19 08:59:34",
        "LastActivityDate": "2019-09-19 08:59:34",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "4",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57372610",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57372554",
        "CreationDate": "2019-08-06 09:08:27",
        "DeletionDate": "",
        "Score": "41",
        "ViewCount": "",
        "Body": "<p>See <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-abstract-equality-comparison\" rel=\"noreferrer\">Abstract Equality Comparison:</a>:</p>\n\n<blockquote>\n  <p>The comparison <code>x == y</code>, where x and y are values, produces true or false. Such a comparison is performed as follows:</p>\n</blockquote>\n\n<p>So, in your situation, <code>x</code> is a string, and <code>y</code> is a boolean. The first condition that is fulfilled here is:</p>\n\n<blockquote>\n  <ol start=\"9\">\n  <li>If Type(y) is Boolean, return the result of the comparison <code>x == ToNumber(y)</code>.</li>\n  </ol>\n</blockquote>\n\n<p>Turning the check into</p>\n\n<pre><code>'\\t' == 0\n</code></pre>\n\n<p>Which then fulfills:</p>\n\n<blockquote>\n  <ol start=\"7\">\n  <li>If Type(x) is String and Type(y) is Number, return the result of the comparison ToNumber(x) == y.</li>\n  </ol>\n</blockquote>\n\n<p>And <code>ToNumber('\\t') === 0</code>:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>console.log(Number('\\t'));</code></pre>\n</div>\n</div>\n</p>\n\n<p>Turning the check into</p>\n\n<pre><code>0 == 0\n</code></pre>\n\n<p>which is the same as</p>\n\n<pre><code>0 === 0\n</code></pre>\n\n<p>or <code>true</code>.</p>\n\n<p>Note that while a string composed of all whitespace is <code>== false</code>, calling Boolean on such a string will return <code>true</code>, because the string has a non-zero length:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>console.log(\n  Boolean(' '),\n  Boolean('\\t')\n);</code></pre>\n</div>\n</div>\n</p>\n\n<p>Of course, it would be best to always avoid <code>==</code> - use <code>===</code> instead, and you won't have to worry about these silly coercion rules.</p>\n",
        "OwnerUserId": "9515207",
        "OwnerDisplayName": "",
        "LastEditorUserId": "9515207",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-08-06 21:01:30",
        "LastActivityDate": "2019-08-06 21:01:30",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56994211",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56615513",
        "CreationDate": "2019-07-11 17:07:12",
        "DeletionDate": "",
        "Score": "8",
        "ViewCount": "",
        "Body": "<p>The workaround you found is the 'official' way to disable this behavior, as explained in a <a href=\"https://twitter.com/rincewindsama/status/1143917253533949952\" rel=\"noreferrer\">thread on Twitter</a> by David Duncan who is on the iOS System Experience team at Apple.</p>\n\n<blockquote>\n  <p>to control what happens when the UINavigationBar is completely\n  unfurled, you want to set the scrollEdgeAppearance. By setting\n  standardAppearance and scrollEdgeAppearance to the same values, you\n  will get a bar that doesn't change.</p>\n</blockquote>\n\n<p>An Apple app that does not disable this behavior is the Settings app.</p>\n",
        "OwnerUserId": "1795356",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-07-11 17:07:12",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "1",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54432584",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54432583",
        "CreationDate": "2019-01-30 02:34:29",
        "DeletionDate": "",
        "Score": "90",
        "ViewCount": "",
        "Body": "<h1><code>apply</code>, the Convenience Function you Never Needed</h1>\n\n<p>We start by addressing the questions in the OP, one by one.</p>\n\n<blockquote>\n  <h2>\"<em>If</em> apply <em>is so bad, then why is it in the API?</em>\"</h2>\n</blockquote>\n\n<p><a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.apply.html#pandas.DataFrame.apply\" rel=\"noreferrer\"><code>DataFrame.apply</code></a> and <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.apply.html\" rel=\"noreferrer\"><code>Series.apply</code></a> are <em>convenience functions</em> defined on DataFrame and Series object respectively. <code>apply</code> accepts any user defined function that applies a transformation/aggregation on a DataFrame. <code>apply</code> is effectively a silver bullet that does whatever any existing pandas function cannot do. </p>\n\n<p>Some of the things <code>apply</code> can do:</p>\n\n<ul>\n<li>Run any user-defined function on a DataFrame or Series</li>\n<li>Apply a function either row-wise (<code>axis=1</code>) or column-wise (<code>axis=0</code>) on a DataFrame</li>\n<li>Perform index alignment while applying the function</li>\n<li>Perform aggregation with user-defined functions (however, we usually prefer <code>agg</code> or <code>transform</code> in these cases)</li>\n<li>Perform element-wise transformations </li>\n<li>Broadcast aggregated results to original rows (see the <code>result_type</code> argument).</li>\n<li>Accept positional/keyword arguments to pass to the user-defined functions.</li>\n</ul>\n\n<p>...Among others. For more information, see <a href=\"https://pandas.pydata.org/pandas-docs/stable/getting_started/basics.html#row-or-column-wise-function-application\" rel=\"noreferrer\">Row or Column-wise Function Application</a> in the documentation.</p>\n\n<p>So, with all these features, why is <code>apply</code> bad? It is <strong>because <code>apply</code> is</strong> <strong>slow</strong>. Pandas makes no assumptions about the nature of your function, and so <strong>iteratively applies your function</strong> to each row/column as necessary. Additionally, handling <em>all</em> of the situations above means <code>apply</code> incurs some major overhead at each iteration. Further, <code>apply</code> consumes a lot more memory, which is a challenge for memory bounded applications.</p>\n\n<p>There are very few situations where <code>apply</code> is appropriate to use (more on that below). <strong>If you're not sure whether you should be using <code>apply</code>, you probably shouldn't.</strong></p>\n\n<hr>\n\n<p>Let's address the next question.</p>\n\n<blockquote>\n  <h2>\"<em>How and when should I make my code</em> apply <em>-free?</em>\"</h2>\n</blockquote>\n\n<p>To rephrase, here are some common situations where you will want to <em>get rid</em> of any calls to <code>apply</code>.</p>\n\n<h3><strong>Numeric Data</strong></h3>\n\n<p>If you're working with numeric data, there is likely already a vectorized cython function that does exactly what you're trying to do (if not, please either ask a question on Stack Overflow or open a feature request on GitHub).</p>\n\n<p>Contrast the performance of <code>apply</code> for a simple addition operation.</p>\n\n<pre><code>df = pd.DataFrame({\"A\": [9, 4, 2, 1], \"B\": [12, 7, 5, 4]})\ndf\n\n   A   B\n0  9  12\n1  4   7\n2  2   5\n3  1   4\n</code></pre>\n\n<p></p>\n\n<pre><code>df.apply(np.sum)\n\nA    16\nB    28\ndtype: int64\n\ndf.sum()\n\nA    16\nB    28\ndtype: int64\n</code></pre>\n\n<p>Performance wise, there's no comparison, the cythonized equivalent is much faster. There's no need for a graph, because the difference is obvious even for toy data.</p>\n\n<pre><code>%timeit df.apply(np.sum)\n%timeit df.sum()\n2.22 ms \u00b1 41.2 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n471 \u00b5s \u00b1 8.16 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n</code></pre>\n\n<p>Even if you enable passing raw arrays with the <code>raw</code> argument, it's still twice as slow.</p>\n\n<pre><code>%timeit df.apply(np.sum, raw=True)\n840 \u00b5s \u00b1 691 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n</code></pre>\n\n<p>Another example:</p>\n\n<pre><code>df.apply(lambda x: x.max() - x.min())\n\nA    8\nB    8\ndtype: int64\n\ndf.max() - df.min()\n\nA    8\nB    8\ndtype: int64\n\n%timeit df.apply(lambda x: x.max() - x.min())\n%timeit df.max() - df.min()\n\n2.43 ms \u00b1 450 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n1.23 ms \u00b1 14.7 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n</code></pre>\n\n<p>In general, <strong>seek out vectorized alternatives if possible.</strong></p>\n\n<h3><strong>String/Regex</strong></h3>\n\n<p>Pandas provides \"vectorized\" string functions in most situations, but there are rare cases where those functions do not... \"apply\", so to speak.</p>\n\n<p>A common problem is to check whether a value in a column is present in another column of the same row. </p>\n\n<pre><code>df = pd.DataFrame({\n    'Name': ['mickey', 'donald', 'minnie'],\n    'Title': ['wonderland', \"welcome to donald's castle\", 'Minnie mouse clubhouse'],\n    'Value': [20, 10, 86]})\ndf\n\n     Name  Value                       Title\n0  mickey     20                  wonderland\n1  donald     10  welcome to donald's castle\n2  minnie     86      Minnie mouse clubhouse\n</code></pre>\n\n<p>This should return the row second and third row, since \"donald\" and \"minnie\" are present in their respective \"Title\" columns.</p>\n\n<p>Using apply, this would be done using </p>\n\n<pre><code>df.apply(lambda x: x['Name'].lower() in x['Title'].lower(), axis=1)\n\n0    False\n1     True\n2     True\ndtype: bool\n\ndf[df.apply(lambda x: x['Name'].lower() in x['Title'].lower(), axis=1)]\n\n     Name                       Title  Value\n1  donald  welcome to donald's castle     10\n2  minnie      Minnie mouse clubhouse     86\n</code></pre>\n\n<p>However, a better solution exists using list comprehensions. </p>\n\n<pre><code>df[[y.lower() in x.lower() for x, y in zip(df['Title'], df['Name'])]]\n\n     Name                       Title  Value\n1  donald  welcome to donald's castle     10\n2  minnie      Minnie mouse clubhouse     86\n</code></pre>\n\n<p></p>\n\n<pre><code>%timeit df[df.apply(lambda x: x['Name'].lower() in x['Title'].lower(), axis=1)]\n%timeit df[[y.lower() in x.lower() for x, y in zip(df['Title'], df['Name'])]]\n\n2.85 ms \u00b1 38.4 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n788 \u00b5s \u00b1 16.4 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n</code></pre>\n\n<p>The thing to note here is that iterative routines happen to be faster than <code>apply</code>, because of the lower overhead. If you need to handle NaNs and invalid dtypes, you can build on this using a custom function you can then call with arguments inside the list comprehension.</p>\n\n<p>For more information on when list comprehensions should be considered a good option, see my writeup: <a href=\"https://stackoverflow.com/questions/54028199/for-loops-with-pandas-when-should-i-care\">For loops with pandas - When should I care?</a>.</p>\n\n<blockquote>\n  <p><strong>Note</strong><br>\n  Date and datetime operations also have vectorized versions. So, for example, you should prefer <code>pd.to_datetime(df['date'])</code>, over,\n  say, <code>df['date'].apply(pd.to_datetime)</code>.</p>\n  \n  <p>Read more at the\n  <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html\" rel=\"noreferrer\">docs</a>.</p>\n</blockquote>\n\n<h3><strong>A Common Pitfall: Exploding Columns of Lists</strong></h3>\n\n<pre><code>s = pd.Series([[1, 2]] * 3)\ns\n\n0    [1, 2]\n1    [1, 2]\n2    [1, 2]\ndtype: object\n</code></pre>\n\n<p>People are tempted to use <code>apply(pd.Series)</code>. This is <em>horrible</em> in terms of performance.</p>\n\n<pre><code>s.apply(pd.Series)\n\n   0  1\n0  1  2\n1  1  2\n2  1  2\n</code></pre>\n\n<p>A better option is to listify the column and pass it to pd.DataFrame.</p>\n\n<pre><code>pd.DataFrame(s.tolist())\n\n   0  1\n0  1  2\n1  1  2\n2  1  2\n</code></pre>\n\n<p></p>\n\n<pre><code>%timeit s.apply(pd.Series)\n%timeit pd.DataFrame(s.tolist())\n\n2.65 ms \u00b1 294 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n816 \u00b5s \u00b1 40.5 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n</code></pre>\n\n<hr>\n\n<p>Lastly,</p>\n\n<blockquote>\n  <h2>\"<em>Are there any situations where</em> <code>apply</code> <em>is good?</em>\"</h2>\n</blockquote>\n\n<p>Apply is a convenience function, so there <em>are</em> situations where the overhead is negligible enough to forgive. It really depends on how many times the function is called.</p>\n\n<p><strong>Functions that are Vectorized for Series, but not DataFrames</strong><br>\nWhat if you want to apply a string operation on multiple columns? What if you want to convert multiple columns to datetime? These functions are vectorized for Series only, so they must be <em>applied</em> over each column that you want to convert/operate on.</p>\n\n<pre><code>df = pd.DataFrame(\n         pd.date_range('2018-12-31','2019-01-31', freq='2D').date.astype(str).reshape(-1, 2), \n         columns=['date1', 'date2'])\ndf\n\n       date1      date2\n0 2018-12-31 2019-01-02\n1 2019-01-04 2019-01-06\n2 2019-01-08 2019-01-10\n3 2019-01-12 2019-01-14\n4 2019-01-16 2019-01-18\n5 2019-01-20 2019-01-22\n6 2019-01-24 2019-01-26\n7 2019-01-28 2019-01-30\n\ndf.dtypes\n\ndate1    object\ndate2    object\ndtype: object\n</code></pre>\n\n<p>This is an admissible case for <code>apply</code>:</p>\n\n<pre><code>df.apply(pd.to_datetime, errors='coerce').dtypes\n\ndate1    datetime64[ns]\ndate2    datetime64[ns]\ndtype: object\n</code></pre>\n\n<p>Note that it would also make sense to <code>stack</code>, or just use an explicit loop. All these options are slightly faster than using <code>apply</code>, but the difference is small enough to forgive.</p>\n\n<pre><code>%timeit df.apply(pd.to_datetime, errors='coerce')\n%timeit pd.to_datetime(df.stack(), errors='coerce').unstack()\n%timeit pd.concat([pd.to_datetime(df[c], errors='coerce') for c in df], axis=1)\n%timeit for c in df.columns: df[c] = pd.to_datetime(df[c], errors='coerce')\n\n5.49 ms \u00b1 247 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n3.94 ms \u00b1 48.1 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n3.16 ms \u00b1 216 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n2.41 ms \u00b1 1.71 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\n</code></pre>\n\n<p>You can make a similar case for other operations such as string operations, or conversion to category. </p>\n\n<pre><code>u = df.apply(lambda x: x.str.contains(...))\nv = df.apply(lambda x: x.astype(category))\n</code></pre>\n\n<p>v/s</p>\n\n<pre><code>u = pd.concat([df[c].str.contains(...) for c in df], axis=1)\nv = df.copy()\nfor c in df:\n    v[c] = df[c].astype(category)\n</code></pre>\n\n<p>And so on...</p>\n\n<h3><strong>Converting Series to <code>str</code>: <code>astype</code> versus <code>apply</code></strong></h3>\n\n<p>This seems like an idiosyncrasy of the API. Using <code>apply</code> to convert integers in a Series to string is comparable (and sometimes faster) than using <code>astype</code>.</p>\n\n<p><a href=\"https://i.stack.imgur.com/eSs2r.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/eSs2r.png\" alt=\"enter image description here\"></a>\nThe graph was plotted using the <a href=\"https://github.com/nschloe/perfplot\" rel=\"noreferrer\"><code>perfplot</code></a> library.</p>\n\n<pre><code>import perfplot\n\nperfplot.show(\n    setup=lambda n: pd.Series(np.random.randint(0, n, n)),\n    kernels=[\n        lambda s: s.astype(str),\n        lambda s: s.apply(str)\n    ],\n    labels=['astype', 'apply'],\n    n_range=[2**k for k in range(1, 20)],\n    xlabel='N',\n    logx=True,\n    logy=True,\n    equality_check=lambda x, y: (x == y).all())\n</code></pre>\n\n<p>With floats, I see the <code>astype</code> is consistently as fast as, or slightly faster than <code>apply</code>. So this has to do with the fact that the data in the test is integer type.</p>\n\n<h3><strong><code>GroupBy</code> operations with chained transformations</strong></h3>\n\n<p><code>GroupBy.apply</code> has not been discussed until now, but <code>GroupBy.apply</code> is also an iterative convenience function to handle anything that the existing <code>GroupBy</code> functions do not. </p>\n\n<p>One common requirement is to perform a GroupBy and then two prime operations such as a \"lagged cumsum\":</p>\n\n<pre><code>df = pd.DataFrame({\"A\": list('aabcccddee'), \"B\": [12, 7, 5, 4, 5, 4, 3, 2, 1, 10]})\ndf\n\n   A   B\n0  a  12\n1  a   7\n2  b   5\n3  c   4\n4  c   5\n5  c   4\n6  d   3\n7  d   2\n8  e   1\n9  e  10\n</code></pre>\n\n<p></p>\n\n<p>You'd need two successive groupby calls here:</p>\n\n<pre><code>df.groupby('A').B.cumsum().groupby(df.A).shift()\n\n0     NaN\n1    12.0\n2     NaN\n3     NaN\n4     4.0\n5     9.0\n6     NaN\n7     3.0\n8     NaN\n9     1.0\nName: B, dtype: float64\n</code></pre>\n\n<p>Using <code>apply</code>, you can shorten this to a a single call.</p>\n\n<pre><code>df.groupby('A').B.apply(lambda x: x.cumsum().shift())\n\n0     NaN\n1    12.0\n2     NaN\n3     NaN\n4     4.0\n5     9.0\n6     NaN\n7     3.0\n8     NaN\n9     1.0\nName: B, dtype: float64\n</code></pre>\n\n<p>It is very hard to quantify the performance because it depends on the data. But in general, <code>apply</code> is an acceptable solution if the goal is to reduce a <code>groupby</code> call (because <code>groupby</code> is also quite expensive).</p>\n\n<hr>\n\n<h2>Other Caveats</h2>\n\n<p>Aside from the caveats mentioned above, it is also worth mentioning that <code>apply</code> operates on the first row (or column) twice. This is done to determine whether the function has any side effects. If not, <code>apply</code> may be able to use a fast-path for evaluating the result, else it falls back to a slow implementation.</p>\n\n<pre><code>df = pd.DataFrame({\n    'A': [1, 2],\n    'B': ['x', 'y']\n})\n\ndef func(x):\n    print(x['A'])\n    return x\n\ndf.apply(func, axis=1)\n\n# 1\n# 1\n# 2\n   A  B\n0  1  x\n1  2  y\n</code></pre>\n\n<p>This behaviour is also seen in <code>GroupBy.apply</code> on pandas versions &lt;0.25 (it was fixed for 0.25, <a href=\"https://stackoverflow.com/a/56215416/4909087\">see here for more information</a>.)</p>\n",
        "OwnerUserId": "4909087",
        "OwnerDisplayName": "",
        "LastEditorUserId": "4909087",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-06-23 03:23:56",
        "LastActivityDate": "2019-06-23 03:23:56",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "6",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54433552",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54432583",
        "CreationDate": "2019-01-30 04:53:41",
        "DeletionDate": "",
        "Score": "35",
        "ViewCount": "",
        "Body": "<h1>Not all <code>apply</code>s are alike</h1>\n\n<p>The below chart suggests when to consider <code>apply</code><sup>1</sup>. Green means possibly efficient; red avoid.</p>\n\n<p><a href=\"https://i.stack.imgur.com/b4J3f.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/b4J3f.png\" alt=\"enter image description here\"></a></p>\n\n<p><em>Some</em> of this is intuitive: <code>pd.Series.apply</code> is a Python-level row-wise loop, ditto <code>pd.DataFrame.apply</code> row-wise (<code>axis=1</code>). The misuses of these are many and wide-ranging. The other post deals with them in more depth. Popular solutions are to use vectorised methods, list comprehensions (assumes clean data), or efficient tools such as the <code>pd.DataFrame</code> constructor (e.g. to avoid <code>apply(pd.Series)</code>).</p>\n\n<p>If you are using <code>pd.DataFrame.apply</code> row-wise, specifying <code>raw=True</code> (where possible) is often beneficial. At this stage, <a href=\"http://numba.pydata.org/\" rel=\"nofollow noreferrer\"><code>numba</code></a> is usually a better choice.</p>\n\n<h1><code>GroupBy.apply</code>: generally favoured</h1>\n\n<p>Repeating <code>groupby</code> operations to avoid <code>apply</code> will hurt performance. <code>GroupBy.apply</code> is usually fine here, provided the methods you use in your custom function are themselves vectorised. Sometimes there is no native Pandas method for a groupwise aggregation you wish to apply. In this case, for a small number of groups <code>apply</code> with a custom function may still offer reasonable performance.</p>\n\n<h1><code>pd.DataFrame.apply</code> column-wise: a mixed bag</h1>\n\n<p><code>pd.DataFrame.apply</code> column-wise (<code>axis=0</code>) is an interesting case. For a small number of rows versus a large number of columns, it's almost always expensive. For a large number of rows relative to columns, the more common case, you may <em>sometimes</em> see significant performance improvements using <code>apply</code>:</p>\n\n<pre><code># Python 3.7, Pandas 0.23.4\nnp.random.seed(0)\ndf = pd.DataFrame(np.random.random((10**7, 3)))     # Scenario_1, many rows\ndf = pd.DataFrame(np.random.random((10**4, 10**3))) # Scenario_2, many columns\n\n                                               # Scenario_1  | Scenario_2\n%timeit df.sum()                               # 800 ms      | 109 ms\n%timeit df.apply(pd.Series.sum)                # 568 ms      | 325 ms\n\n%timeit df.max() - df.min()                    # 1.63 s      | 314 ms\n%timeit df.apply(lambda x: x.max() - x.min())  # 838 ms      | 473 ms\n\n%timeit df.mean()                              # 108 ms      | 94.4 ms\n%timeit df.apply(pd.Series.mean)               # 276 ms      | 233 ms\n</code></pre>\n\n<hr>\n\n<p><sup>1</sup> There are exceptions, but these are usually marginal or uncommon. A couple of examples:</p>\n\n<ol>\n<li><code>df['col'].apply(str)</code> may slightly outperform <code>df['col'].astype(str)</code>.</li>\n<li><code>df.apply(pd.to_datetime)</code> working on strings doesn't scale well with rows versus a regular <code>for</code> loop.</li>\n</ol>\n",
        "OwnerUserId": "9209546",
        "OwnerDisplayName": "",
        "LastEditorUserId": "4909087",
        "LastEditorDisplayName": "",
        "LastEditDate": "2020-02-20 18:23:46",
        "LastActivityDate": "2020-02-20 18:23:46",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "7",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54843455",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54432583",
        "CreationDate": "2019-02-23 16:11:06",
        "DeletionDate": "",
        "Score": "3",
        "ViewCount": "",
        "Body": "<p>Are there ever any situations where <code>apply</code> is good?\nYes, sometimes.</p>\n\n<p>Task: decode Unicode strings.</p>\n\n<pre><code>import numpy as np\nimport pandas as pd\nimport unidecode\n\ns = pd.Series(['ma\u00f1ana','Ce\u00f1\u00eda'])\ns.head()\n0    ma\u00f1ana\n1     Ce\u00f1\u00eda\n\n\ns.apply(unidecode.unidecode)\n0    manana\n1     Cenia\n</code></pre>\n\n<p><strong>Update</strong><br>\nI was by no means advocating for the use of <code>apply</code>, just thinking since the <code>NumPy</code> cannot deal with the above situation, it could have been a good candidate for <code>pandas apply</code>. But I was forgetting the plain ol list comprehension thanks to the reminder by @jpp.</p>\n",
        "OwnerUserId": "10799544",
        "OwnerDisplayName": "",
        "LastEditorUserId": "10323798",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-09-03 04:04:33",
        "LastActivityDate": "2019-09-03 04:04:33",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56555883",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56555709",
        "CreationDate": "2019-06-12 06:28:26",
        "DeletionDate": "",
        "Score": "38",
        "ViewCount": "",
        "Body": "<p>You can use type erasure, <code>AnyView</code> in the case of SwiftUI <code>View</code>.</p>\n\n<p>I would refactor <code>WKHostingController</code> to return <code>AnyView</code>.</p>\n\n<p>This seems to compile fine on my end.</p>\n\n<pre class=\"lang-swift prettyprint-override\"><code>class HostingController : WKHostingController&lt;AnyView&gt; {\n    override var body: AnyView {\n        return AnyView(ContentView().environmentObject(DataModel()))\n    }\n}\n</code></pre>\n",
        "OwnerUserId": "2890168",
        "OwnerDisplayName": "",
        "LastEditorUserId": "2890168",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-06-12 06:53:12",
        "LastActivityDate": "2019-06-12 06:53:12",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "3",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57939770",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56555709",
        "CreationDate": "2019-09-14 22:36:00",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<p>For anyone like Brett (in the comments) who was getting </p>\n\n<pre><code>\"Property 'body' with type 'AnyView' cannot override a property with type 'ContentView'\"\n</code></pre>\n\n<p>I got the same error because I hadn't replaced the return value and wrapped the ContentView being returned.</p>\n\n<p>ie. this is what my first attempt looked like.. notice the \n<code>WKHostingController&lt;ContentView&gt;</code>\nthat should be\n<code>WKHostingController&lt;AnyView&gt;</code></p>\n\n<pre><code>class HostingController : WKHostingController&lt;ContentView&gt; {\n    override var body: AnyView {\n        return AnyView(ContentView().environmentObject(DataModel()))\n    }\n}\n</code></pre>\n",
        "OwnerUserId": "538217",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-09-14 22:36:00",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "1",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57724995",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57724907",
        "CreationDate": "2019-08-30 10:25:46",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<p>The static type of the pointer <code>p</code> is <code>Foo</code>.</p>\n\n<p>So in this statement</p>\n\n<pre><code>f = *p;\n</code></pre>\n\n<p>there left operand <code>*p</code> has the type <code>Foo</code> that is there is slicing.</p>\n",
        "OwnerUserId": "2877241",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-08-30 10:25:46",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57725006",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57724907",
        "CreationDate": "2019-08-30 10:26:40",
        "DeletionDate": "",
        "Score": "12",
        "ViewCount": "",
        "Body": "<p>This is regular slicing, hidden under a layer of <code>std::function</code> and <code>std::shared_ptr</code>.</p>\n\n<pre><code>f = *p;\n</code></pre>\n\n<p>is valid because <code>*p</code> is a callable object with an appropriate <code>operator()</code>, and that is one of the things you can wrap in a <code>std::function</code>.</p>\n\n<p>The reason that it doesn't work is that it copies <code>*p</code> \u2013 and that is a <code>Foo&amp;</code>, not a <code>Bar&amp;</code>.  </p>\n\n<p>This adaptation of your last example would behave the same:</p>\n\n<pre><code>Bar b;\nFoo&amp; c = b;\nstd::function&lt;int(void)&gt; f1 = c;\nstd::cout &lt;&lt; f1() &lt;&lt; std::endl;\n</code></pre>\n",
        "OwnerUserId": "404970",
        "OwnerDisplayName": "",
        "LastEditorUserId": "404970",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-08-30 10:52:24",
        "LastActivityDate": "2019-08-30 10:52:24",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57725063",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57724907",
        "CreationDate": "2019-08-30 10:30:17",
        "DeletionDate": "",
        "Score": "24",
        "ViewCount": "",
        "Body": "<p>Object slicing happens here.</p>\n\n<p>The point is given <code>f = *p;</code>, <code>p</code> is of type <code>std::shared_ptr&lt;Foo&gt;</code>, then the type of <code>*p</code> is <code>Foo&amp;</code> (instead of <code>Bar&amp;</code>). Even the <a href=\"https://en.cppreference.com/w/cpp/utility/functional/function/operator%3D\" rel=\"noreferrer\">assignment operator of <code>std::function</code></a> takes argument by reference, but</p>\n\n<blockquote>\n  <p>4) Sets the target of <code>*this</code> to the callable <code>f</code>, as if by executing <code>function(std::forward&lt;F&gt;(f)).swap(*this);</code>.</p>\n</blockquote>\n\n<p>Note that the <code>F</code> above is deduced as <code>Foo&amp;</code> too. And the <a href=\"https://en.cppreference.com/w/cpp/utility/functional/function/function\" rel=\"noreferrer\">constructor of <code>std::function</code></a> takes argument by value, object slicing happens, the effect becomes that <code>f</code> is assigned from an object of type <code>Foo</code> which is slice-copied from <code>*p</code>.</p>\n\n<blockquote>\n<pre><code>template&lt; class F &gt; \nfunction( F f );\n</code></pre>\n</blockquote>\n",
        "OwnerUserId": "3309790",
        "OwnerDisplayName": "",
        "LastEditorUserId": "3309790",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-08-30 10:49:44",
        "LastActivityDate": "2019-08-30 10:49:44",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57725082",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57724907",
        "CreationDate": "2019-08-30 10:32:00",
        "DeletionDate": "",
        "Score": "11",
        "ViewCount": "",
        "Body": "<h2>Slicing</h2>\n\n<p>This is a case of slicing. \nThe reason is assignment operator of <code>std::function</code> (as demonstrated in another <a href=\"https://stackoverflow.com/a/57725063/2261538\">answer</a> as well) which states:</p>\n\n<blockquote>\n  <p>Sets the target of *this to the callable f, as if by executing\n  function(std::forward(f)).swap(*this);. This operator does not\n  participate in overload resolution unless f is Callable for argument\n  types Args... and return type R. (since C++14)</p>\n</blockquote>\n\n<p><a href=\"https://en.cppreference.com/w/cpp/utility/functional/function/operator%3D\" rel=\"nofollow noreferrer\">https://en.cppreference.com/w/cpp/utility/functional/function/operator%3D</a></p>\n\n<p>If you simplify and strip down the example - you can easily see what's going on:</p>\n\n<pre><code>Foo* p =  new Bar;\n\nFoo f;\nf = *p;//&lt;-- slicing here since you deref and then copy the object\n</code></pre>\n\n<p>It looks like you were aiming at obtaining a pointer to the overridden virtual function - unfortunately, theres no easy way to <em>unroll</em> the virtual function lookup as that is implemented via a <em>runtime</em> lookup table. However an easy workaround might be to use a lambda to wrap (As the OP also mentions):</p>\n\n<pre><code>f = [p]{return (*p)();};\n</code></pre>\n\n<p>A more suitable solution could also be to just a use <code>reference_wrapper</code>:</p>\n\n<pre><code>f = std::ref(p);\n</code></pre>\n",
        "OwnerUserId": "2261538",
        "OwnerDisplayName": "",
        "LastEditorUserId": "2261538",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-09-01 19:49:20",
        "LastActivityDate": "2019-09-01 19:49:20",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "5",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54220378",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54200988",
        "CreationDate": "2019-01-16 15:30:23",
        "DeletionDate": "",
        "Score": "10",
        "ViewCount": "",
        "Body": "<p>I found <a href=\"https://www.reddit.com/r/cpp/comments/7jxq8r/does_anybody_know_why_requires_requires_was_not/drd39zt/\" rel=\"noreferrer\">a comment</a> from Andrew Sutton (one of the Concepts authors, who implemented it in gcc) to be quite helpful in this regard, so I thought I'd just quote it here in its near-entirety:</p>\n\n<blockquote>\n  <p>Not so long ago requires-expressions (the phrase introduced by the second requires) was not allowed in constraint-expressions (the phrase introduced by the first requires). It could only appear in concept definitions. In fact, this is exactly what is proposed in the section of that paper where that claim appears.</p>\n  \n  <p>However, in 2016, there was a proposal to relax that restriction [Editor's note: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0266r2.pdf\" rel=\"noreferrer\">P0266</a>]. Note the strikethrough of paragraph 4 in section 4 of the paper. And thus was born requires requires.</p>\n  \n  <p>To tell the truth, I had never actually implemented that restriction in GCC, so it had always been possible. I think that Walter may have discovered that and found it useful, leading to that paper.</p>\n  \n  <p>Lest anybody think that I wasn't sensitive to writing requires twice, I did spend some time trying to determine if that could be simplified. Short answer: no.</p>\n  \n  <p>The problem is that there are two grammatical constructs that need to introduced after a template parameter list: very commonly a constraint expression (like <code>P &amp;&amp; Q</code>) and occasionally syntactic requirements (like <code>requires (T a) { ... }</code>). That's called a requires-expression.</p>\n  \n  <p>The first requires introduces the constraint. The second requires introduces the requires-expression. That's just the way the grammar composes. I don't find it confusing at all.</p>\n  \n  <p>I tried, at one point, to collapse these to a single requires. Unfortunately, that leads to some seriously difficult parsing problems. You can't easily tell, for example if a <code>(</code> after the requires denotes a nested subexpression or a parameter-list. I don't believe that there is a perfect disambiguation of those syntaxes (see the rationale for uniform initialization syntax; this problem is there too).</p>\n  \n  <p>So you make a choice: make requires introduce an expression (as it does now) or make it introduce a parameterized list of requirements.</p>\n  \n  <p>I chose the current approach because most of the time (as in nearly 100% of the time), I want something other than a requires-expression. And in the exceedingly rare case I did want a requires-expression for ad hoc constraints, I really don't mind writing the word twice. It's a an obvious indicator that I haven't developed a sufficiently sound abstraction for the template. (Because if I had, it would have a name.)</p>\n  \n  <p>I could have chosen to make the requires introduce a requires-expression. That's actually worse, because practically all of your constraints would start to look like this:</p>\n\n<pre><code>template&lt;typename T&gt;\n  requires { requires Eq&lt;T&gt;; }\nvoid f(T a, T b);\n</code></pre>\n  \n  <p>Here, the 2nd requires is called a nested-requirement; it evaluates its expression (other code in the block of the requires-expression is not evaluated). I think this is way worse than the status quo. Now, you get to write requires twice everywhere.</p>\n  \n  <p>I could also have used more keywords. This is a problem in its own right---and it's not just bike shedding. There might be a way to \"redistribute\" keywords to avoid the duplication, but I haven't given that serious thought. But that doesn't really change the essence of the problem.</p>\n</blockquote>\n",
        "OwnerUserId": "2069064",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-01-16 15:30:23",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": "2019-01-16 15:30:23"
    },
    {
        "Id": "59976781",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58759591",
        "CreationDate": "2020-01-29 22:53:26",
        "DeletionDate": "",
        "Score": "-1",
        "ViewCount": "",
        "Body": "<p>There are errors in the code.</p>\n\n<pre><code> memcpy(&amp;s, \"1234567812345678\", 17);\n</code></pre>\n\n<p>for example, is risky, even though s starts with b\nshould be:</p>\n\n<pre><code> memcpy(&amp;s.b, \"1234567812345678\", 17);\n</code></pre>\n\n<p>The second strlen() has also errors</p>\n\n<pre><code>n = strlen((char *)&amp;s) / sizeof(BUF);\n</code></pre>\n\n<p>for example, should be:</p>\n\n<pre><code>n = strlen((char *)&amp;s.b) / sizeof(BUF);\n</code></pre>\n\n<p>The string s.b, if copied correctly, should be 17 letters long.\nNot sure how structs are stored in memory, if they are aligned.\nHave you checked that s.b actually contains the 17 characters copied?</p>\n\n<p>So a strlen(s.b) should show 17</p>\n\n<p>The printf only shows integer numbers, as %d is integer, and the variable n is declared to be an integer.\nsizeof(BUF), should be 8</p>\n\n<p>So a 17 divided by 8 (17/8) should print 2 as n is declared as integer.\nAs memcpy was used to copy data to s and not to s.b, I would guess that as this has to do with memory alignments; assuming it is a 64 bit computer, than there can be 8 characters on one memory address.</p>\n\n<p>For instance, lets assume that someone has called a malloc(1), than the next \"free space\" are not aligned...</p>\n\n<p>The second strlen call, shows the correct number, as the string copy was done to the s struct instead of to s.b </p>\n",
        "OwnerUserId": "5438650",
        "OwnerDisplayName": "",
        "LastEditorUserId": "7362988",
        "LastEditorDisplayName": "",
        "LastEditDate": "2020-02-28 22:59:24",
        "LastActivityDate": "2020-02-28 22:59:24",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56508769",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56508764",
        "CreationDate": "2019-06-08 17:42:45",
        "DeletionDate": "",
        "Score": "99",
        "ViewCount": "",
        "Body": "<p><strong>iOS 13 has a new way of sending app lifecycle events</strong>. Instead of coming through the <code>UIApplicationDelegate</code> they come through the <a href=\"https://developer.apple.com/documentation/uikit/uiwindowscenedelegate\" rel=\"noreferrer\"><code>UIWindowSceneDelegate</code></a> which is a <a href=\"https://developer.apple.com/documentation/uikit/uiscenedelegate?language=objc\" rel=\"noreferrer\"><code>UISceneDelegate</code></a> sub-protocol. <code>UISceneDelegate</code> has the important delegate methods.</p>\n\n<p>This change is to support multiple windows in iOS 13. There's more information in WWDC 2019 session 212 \"<a href=\"https://developer.apple.com/videos/play/wwdc2019/212/\" rel=\"noreferrer\">Introducing Multiple Windows on iPad</a>\". The technical information starts at <a href=\"https://developer.apple.com/videos/play/wwdc2019-212/?time=818\" rel=\"noreferrer\">around 14:30</a> and is presented by a man with very sparkly high-tops. The shorter session 258 <a href=\"https://developer.apple.com/videos/play/wwdc2019/258/\" rel=\"noreferrer\">Architecting Your App for Multiple Windows</a> also has a great introduction to what's changed.</p>\n\n<p><strong>Here's how it works:</strong> If you have an \"<strong>Application Scene Manifest</strong>\" in your Info.plist and your app delegate has a <code>configurationForConnectingSceneSession</code> method, the <code>UIApplication</code> won't send background and foreground lifecycle messages to your app delegate. That means the code in these methods won't run:</p>\n\n<ul>\n<li><code>applicationDidBecomeActive</code> </li>\n<li><code>applicationWillResignActive</code> </li>\n<li><code>applicationDidEnterBackground</code> </li>\n<li><code>applicationWillEnterForeground</code></li>\n</ul>\n\n<p>The app delegate will still receive the <code>willFinishLaunchingWithOptions:</code> and <code>didFinishLaunchingWithOptions:</code> method calls so any code in those methods will work as before.</p>\n\n<p><strong>If you want the old behaviour back</strong> you need to</p>\n\n<ol>\n<li>Delete the \"Application Scene Manifest\" entry from the app's Info.plist</li>\n<li>Comment or delete the <code>application:configurationForConnectingSceneSession:options:</code> method (or the Swift <code>application(_:configurationForConnecting:options:)</code>function)</li>\n<li>Add the window property back to your app delegate (<code>@property (strong, nonatomic) UIWindow *window;</code>)</li>\n</ol>\n\n<p>Alternatively, open the SceneDelegate file that Xcode made and use the new lifecycle methods in there:</p>\n\n<pre><code>- (void)sceneDidBecomeActive:(UIScene *)scene {\n}\n- (void)sceneWillResignActive:(UIScene *)scene {\n}\n... etc\n</code></pre>\n\n<p>It's possible to use the new <code>UIScene</code> lifecycle stuff without adopting multiple window support by setting \"Enable Multiple Windows\" (\"UIApplicationSupportsMultipleScenes\") to \"NO\" in the Info.plist (this is the default for new projects). This way you can start adopting the new API in smaller steps.</p>\n\n<p>You can see that the scene delegate method names are a close match for the app delegate ones. One confusing thing is that the app delegate methods aren't deprecated so you won't get a warning if you have both app delegate and scene delegate methods in place but only one will be called.</p>\n\n<p>Other things that <code>UISceneDelegate</code> takes over are user activities (<code>continueUserActivity:</code> etc), state restoration (<code>stateRestorationActivityForScene:</code> etc), status bar questions and opening URLs. (I'm not sure if these replace the app delegate methods). It also has analogous notifications for the lifecycle events (like <code>UISceneWillDeactivateNotification</code>).</p>\n\n<p><strong>From the WWDC Session, some images for you:</strong></p>\n\n<p>The function equivalents for Swift:</p>\n\n<p><a href=\"https://i.stack.imgur.com/b9Xj0.jpg\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/b9Xj0.jpg\" alt=\"enter image description here\"></a></p>\n\n<p>The class responsibilities:</p>\n\n<p><a href=\"https://i.stack.imgur.com/nz4t6.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/nz4t6.png\" alt=\"enter image description here\"></a></p>\n",
        "OwnerUserId": "74118",
        "OwnerDisplayName": "",
        "LastEditorUserId": "74118",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-11-29 13:25:51",
        "LastActivityDate": "2019-11-29 13:25:51",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "11",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58726292",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56508764",
        "CreationDate": "2019-11-06 08:55:00",
        "DeletionDate": "",
        "Score": "3",
        "ViewCount": "",
        "Body": "<p>This thread helped me:</p>\n\n<p><a href=\"https://stackoverflow.com/questions/57488057/view-controller-responds-to-app-delegate-notifications-in-ios-12-but-not-in-ios?noredirect=1&amp;lq=1\">View controller responds to app delegate notifications in iOS 12 but not in iOS 13</a></p>\n\n<p>Objective C:</p>\n\n<pre><code>if (@available(iOS 13.0, *)) {\n    [[NSNotificationCenter defaultCenter] addObserver:self \n          selector:@selector(appWillResignActive:) \n          name:UISceneWillDeactivateNotification object:nil];\n\n    [[NSNotificationCenter defaultCenter] addObserver:self \n          selector:@selector(appDidBecomeActive:) \n          name:UISceneDidActivateNotification object:nil];\n\n}\nelse {\n    [[NSNotificationCenter defaultCenter] addObserver:self \n          selector:@selector(appWillResignActive:) \n          name:UIApplicationWillResignActiveNotification object:nil];\n\n\n    [[NSNotificationCenter defaultCenter]addObserver:self\n          selector:@selector(appDidBecomeActive:)\n          name:UIApplicationDidBecomeActiveNotification\n                                              object:nil];\n}\n</code></pre>\n",
        "OwnerUserId": "1815840",
        "OwnerDisplayName": "",
        "LastEditorUserId": "1815840",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-11-06 10:31:48",
        "LastActivityDate": "2019-11-06 10:31:48",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56577324",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56577201",
        "CreationDate": "2019-06-13 09:23:03",
        "DeletionDate": "",
        "Score": "95",
        "ViewCount": "",
        "Body": "<p>Typescript treats files without import/exports as legacy script files. As such files are not modules and any definitions they have get merged in the global namespace. <code>isolatedModules</code> forbids such files.</p>\n\n<p>Adding any import or export to a file makes it a module and the error disappears.</p>\n\n<p>Also <code>export {}</code> is a handy way to make a file a module without importing anything.</p>\n",
        "OwnerUserId": "125734",
        "OwnerDisplayName": "",
        "LastEditorUserId": "454137",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-08-28 23:23:39",
        "LastActivityDate": "2019-08-28 23:23:39",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57927169",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57926891",
        "CreationDate": "2019-09-13 16:18:30",
        "DeletionDate": "",
        "Score": "8",
        "ViewCount": "",
        "Body": "<p><a href=\"http://eel.is/c++draft/over.match.funcs#8.sentence-2\" rel=\"noreferrer\">[over.match.funcs]/8</a>:</p>\n\n<blockquote>\n  <p>A constructor inherited from class type <code>C</code> ([class.inhctor.init]) that has a first parameter of type \u201creference to <em>cv1</em> <code>P</code>\u201d (including such a constructor instantiated from a template) is excluded from the set of candidate functions when constructing an object of type <em>cv2</em> <code>D</code> if the argument list has exactly one argument and <code>C</code> is reference-related to <code>P</code> and <code>P</code> is reference-related to <code>D</code>. </p>\n</blockquote>\n\n<p>See <a href=\"http://wg21.link/CWG2356\" rel=\"noreferrer\">CWG2356</a>.</p>\n",
        "OwnerUserId": "2756719",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-09-13 16:18:30",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "4",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "59458311",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "59458257",
        "CreationDate": "2019-12-23 16:14:40",
        "DeletionDate": "",
        "Score": "10",
        "ViewCount": "",
        "Body": "<p>Yes, <em>iterables</em> and <em>iterators</em> are different things, but most iterators (including all of the ones you get from JavaScript itself, such as from the <code>keys</code> or <code>values</code> methods on <code>Array.prototype</code> or generators from generator functions) inherit from the <a href=\"https://tc39.es/ecma262/#sec-%25iteratorprototype%25-object\" rel=\"nofollow noreferrer\">%IteratorPrototype% object</a>, which has a <code>Symbol.iterator</code> method like this:</p>\n\n<pre><code>[Symbol.iterator]() {\n    return this;\n}\n</code></pre>\n\n<p>The result is that all standard iterators are also iterables. That's so you can use them directly, or use them in <code>for-of</code> loops and such (which expect iterables, not iterators).</p>\n\n<p>Consider the <code>keys</code> method of arrays: It returns an array iterator that visits the array's keys (its indexes, as numbers). Note that it returns an <em>iterator</em>. But a common use of it is:</p>\n\n<pre><code>for (const index of someArray.keys()) {\n    // ...\n}\n</code></pre>\n\n<p><code>for-of</code> takes an <em>iterable</em>, not an <em>iterator</em>, so why does that work?</p>\n\n<p>It works because the iterator is also iterable; <code>Symbol.iterator</code> just returns <code>this</code>.</p>\n\n<p>Here's an example I use in Chapter 6 of my book: If you wanted to loop over all entries but skip the first one and you didn't want to use <code>slice</code> to slice off the subset, you can get the iterator, read the first value, then hand off to a <code>for-of</code> loop:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const a = [\"one\", \"two\", \"three\", \"four\"];\nconst it = a[Symbol.iterator]();\n// Skip the first one\nit.next();\n// Loop through the rest\nfor (const value of it) {\n    console.log(value);\n}</code></pre>\n</div>\n</div>\n</p>\n\n<p>Note that this is all <em>standard</em> iterators. Sometime people show examples of manually-coded iterators like this:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code snippet-currently-hidden\">\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function range(start, end) {\n    let value = start;\n    let inc = start &lt; end ? 1 : -1;\n    return {\n        next() {\n            const done = value == end;\n            const result = {done, value};\n            if (!done) {\n                value += inc;\n            }\n            return result;\n        }\n    };\n}\n\n// Works when used directly\nconst it = range(1, 5);\nlet result;\nwhile (!(result = it.next()).done) {\n    console.log(result.value);\n}\n\n// Fails when an iterable is expected\ntry {\n    for (const value of range(1, 5)) {\n        console.log(value);\n    }\n} catch (e) {\n    console.error(e.message);\n}</code></pre>\n</div>\n</div>\n</p>\n\n<p>The iterator returned by <code>range</code> there is <em>not</em> an iterable, so it fails when we try to use it with <code>for-of</code>.</p>\n\n<p>To make it iterable, we'd need to either:</p>\n\n<ol>\n<li>Add the <code>Symbol.iterator</code> method at the beginning of the answer above to it, or</li>\n<li>Make it inherit from %IteratorPrototype%, which already has that method</li>\n</ol>\n\n<p>Sadly, TC39 decided not to provide a direct way to get the %IteratorPrototype% object. There's an indirect way (getting an iterator from an array, then taking its prototype, which is defined to be %IteratorPrototype%), but it's a pain.</p>\n\n<p>But there's no need to write iterators manually like that anyway; just use a generator function, since the generator it returns is iterable:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code snippet-currently-hidden\">\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function* range(start, end) {\n    let value = start;\n    let inc = start &lt; end ? 1 : -1;\n    while (value !== end) {\n        yield value;\n        value += inc;\n    }\n}\n\n// Works when used directly\nconst it = range(1, 5);\nlet result;\nwhile (!(result = it.next()).done) {\n    console.log(result.value);\n}\n\n// Also works when an iterable is expected\nfor (const value of range(1, 5)) {\n    console.log(value);\n}</code></pre>\n</div>\n</div>\n</p>\n\n<hr>\n\n<p>In contrast, not all iterables are iterators. Arrays are iterable, but not iterators. So are strings, Maps, and Sets.</p>\n",
        "OwnerUserId": "157247",
        "OwnerDisplayName": "",
        "LastEditorUserId": "157247",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-12-24 08:32:35",
        "LastActivityDate": "2019-12-24 08:32:35",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "59499592",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "59458257",
        "CreationDate": "2019-12-27 10:45:49",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<p>I found that there are some more precise definitions of the terms, and these are the more definitive answers:</p>\n\n<p>According to <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-generatorfunction-objects\" rel=\"nofollow noreferrer\">the ES6 Specs</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\" rel=\"nofollow noreferrer\">MDN</a>:</p>\n\n<p>When we have</p>\n\n<pre><code>function* foo() {   // note the \"*\"\n    yield 1;\n    yield 3;\n    yield 5;\n}\n</code></pre>\n\n<p><code>foo</code> is called generator <em>function</em>. And then when we have</p>\n\n<pre><code>let bar = foo();\n</code></pre>\n\n<p><code>bar</code> is a generator <em>object</em>. And <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator\" rel=\"nofollow noreferrer\">a generator object conforms to both the iterable protocol and the iterator protocol</a>.</p>\n\n<p>The simpler version is the iterator interface, which is just a <code>.next()</code> method.</p>\n\n<p>The iterable protocol is: for the object <code>obj</code>, <code>obj[Symbol.iterator]</code> gives a \"zero arguments function that returns an object, conforming to the iterator protocol\".</p>\n\n<p>By the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator\" rel=\"nofollow noreferrer\">title of the MDN link</a>, it also seems we can also just call a generator object a \"generator\".</p>\n\n<p>Note that in <a href=\"https://leanpub.com/understandinges6/read\" rel=\"nofollow noreferrer\">Nicolas Zakas's book Understanding ECMAScript 6</a>, he probably loosely called a \"generator function\" as a \"generator\", and a \"generator object\" as an \"iterator\".  The take away point is, they are really both \"generator\" related -- one is a generator function, and one is a generator object, or generator.  The generator object conforms to both the iteratable protocol and the iterator protocol.</p>\n\n<p>If it is just an object conforming to the <strong>iterator</strong> protocol, you <strong>cannot</strong> use <code>[...iter]</code> or <code>for (a of iter)</code>. It has to be an object that conforms to the <strong>iterable</strong> protocol.</p>\n\n<p>And then, there is also <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator\" rel=\"nofollow noreferrer\">a new Iterator class, in a future JavaScript specs that is still in a draft</a>. It has a larger interface, including methods such as <code>forEach</code>, <code>map</code>, <code>reduce</code> of the current Array interface, and new ones, such as and <code>take</code>, and <code>drop</code>. The current iterator refers to the object with just the <code>next</code> interface.</p>\n\n<p>To answer the original question: what is the difference between an iterator and an iterable, the answer is: an iterator is an object with the interface <code>.next()</code>, and an iterable is an object <code>obj</code> such that <code>obj[Symbol.iterator]</code> can give a zero-argument function that, when invoked, returns an iterator.</p>\n\n<p>And a generator is both an iterable and iterator, to add to that.</p>\n",
        "OwnerUserId": "325418",
        "OwnerDisplayName": "",
        "LastEditorUserId": "325418",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-12-29 20:23:31",
        "LastActivityDate": "2019-12-29 20:23:31",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56227651",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56227419",
        "CreationDate": "2019-05-20 20:19:58",
        "DeletionDate": "",
        "Score": "47",
        "ViewCount": "",
        "Body": "<p><code>_PyHASH_INF</code> is <a href=\"https://github.com/python/cpython/blob/master/Include/pyhash.h#L29\" rel=\"noreferrer\">defined as a constant</a> equal to <code>314159</code>.</p>\n\n<p>I can't find any discussion about this, or comments giving a reason.  I think it was chosen more or less arbitrarily.  I imagine that as long as they don't use the same meaningful value for other hashes, it shouldn't matter.  </p>\n",
        "OwnerUserId": "6779307",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-05-20 20:19:58",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56227918",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56227419",
        "CreationDate": "2019-05-20 20:42:07",
        "DeletionDate": "",
        "Score": "219",
        "ViewCount": "",
        "Body": "<p>Summary: It's not a coincidence; <a href=\"https://github.com/python/cpython/blob/a5119e7d75c9729fc36c059d05f3d7132e7f6bb4/Include/pyhash.h#L29\" rel=\"noreferrer\"><code>_PyHASH_INF</code> is hardcoded as 314159</a> in the default CPython implementation of Python, and was picked as an arbitrary value (obviously from the digits of \u03c0) <a href=\"https://github.com/python/cpython/commit/39dce29365d287dc6b353b2a527dc11fe58dcfa6#diff-b1b488004963172ac81a4a8127ecfd23R560\" rel=\"noreferrer\">by Tim Peters in 2000</a>.</p>\n\n<hr>\n\n<p>The value of <code>hash(float('inf'))</code> is one of the system-dependent parameters of the built-in hash function for numeric types, and <a href=\"https://docs.python.org/3/library/sys.html#sys.hash_info\" rel=\"noreferrer\">is also available</a> as <code>sys.hash_info.inf</code> in Python 3:</p>\n\n<pre><code>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.hash_info\nsys.hash_info(width=64, modulus=2305843009213693951, inf=314159, nan=0, imag=1000003, algorithm='siphash24', hash_bits=64, seed_bits=128, cutoff=0)\n&gt;&gt;&gt; sys.hash_info.inf\n314159\n</code></pre>\n\n<p>(Same results <a href=\"https://tio.run/##NYwxCsAgDEV3T9FRh7r0QOKgGNAkaJacPpVit/fh/ccqjfC5WVnNYDBNuZYud5B7lkpzOJ6A4v8Z@fulbfUyCkoWIPQhHG8XYsurJcBKwewF\" rel=\"noreferrer\">with PyPy</a> too.)</p>\n\n<hr>\n\n<p>In terms of code, <a href=\"https://docs.python.org/3/library/functions.html#hash\" rel=\"noreferrer\"><code>hash</code></a> is a built-in function. Calling it on a Python float object invokes the function whose pointer is given by the <a href=\"https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_hash\" rel=\"noreferrer\"><code>tp_hash</code> attribute</a> of the built-in float type (<code>PyTypeObject PyFloat_Type</code>), which <a href=\"https://github.com/python/cpython/blob/a5119e7d75c9729fc36c059d05f3d7132e7f6bb4/Objects/floatobject.c#L1910,L1924\" rel=\"noreferrer\">is</a> the <code>float_hash</code> function, <a href=\"https://github.com/python/cpython/blob/a5119e7d75c9729fc36c059d05f3d7132e7f6bb4/Objects/floatobject.c#L528,L532\" rel=\"noreferrer\">defined</a> as <code>return _Py_HashDouble(v-&gt;ob_fval)</code>, which in turn <a href=\"https://github.com/python/cpython/blob/a5119e7d75c9729fc36c059d05f3d7132e7f6bb4/Python/pyhash.c#L93-L94\" rel=\"noreferrer\">has</a></p>\n\n<pre class=\"lang-c prettyprint-override\"><code>    if (Py_IS_INFINITY(v))\n        return v &gt; 0 ? _PyHASH_INF : -_PyHASH_INF;\n</code></pre>\n\n<p>where <code>_PyHASH_INF</code> is <a href=\"https://github.com/python/cpython/blob/a5119e7d75c9729fc36c059d05f3d7132e7f6bb4/Include/pyhash.h#L29\" rel=\"noreferrer\">defined as</a> 314159:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>#define _PyHASH_INF 314159\n</code></pre>\n\n<hr>\n\n<p>In terms of history, the first mention of <code>314159</code> in this context in the Python code (you can find this with <code>git bisect</code> or <code>git log -S 314159 -p</code>) was added by <a href=\"https://en.wikipedia.org/w/index.php?title=Tim_Peters_(software_engineer)&amp;oldid=886078303\" rel=\"noreferrer\">Tim Peters</a> in August 2000, in what is now  commit <a href=\"https://github.com/python/cpython/commit/39dce29365d287dc6b353b2a527dc11fe58dcfa6\" rel=\"noreferrer\">39dce293</a> in the <code>cpython</code> git repository.</p>\n\n<p>The commit message says:</p>\n\n<blockquote>\n  <p>Fix for <a href=\"http://sourceforge.net/bugs/?func=detailbug&amp;bug_id=111866&amp;group_id=5470\" rel=\"noreferrer\">http://sourceforge.net/bugs/?func=detailbug&amp;bug_id=111866&amp;group_id=5470</a>.\n  This was a misleading bug -- the true \"bug\" was that <code>hash(x)</code> gave an error\n  return when <code>x</code> is an infinity.  Fixed that.  Added new <code>Py_IS_INFINITY</code> macro to\n  <code>pyport.h</code>.  Rearranged code to reduce growing duplication in hashing of float and\n  complex numbers, pushing Trent's earlier stab at that to a logical conclusion.\n  Fixed exceedingly rare bug where hashing of floats could return -1 even if there\n  wasn't an error (didn't waste time trying to construct a test case, it was simply\n  obvious from the code that it <em>could</em> happen).  Improved complex hash so that\n  <code>hash(complex(x, y))</code> doesn't systematically equal <code>hash(complex(y, x))</code> anymore.</p>\n</blockquote>\n\n<p>In particular, in this commit he ripped out the code of <code>static long float_hash(PyFloatObject *v)</code> in <code>Objects/floatobject.c</code> and made it just <code>return _Py_HashDouble(v-&gt;ob_fval);</code>, and in the definition of <code>long _Py_HashDouble(double v)</code> in <code>Objects/object.c</code> he added the lines:</p>\n\n<pre class=\"lang-c prettyprint-override\"><code>        if (Py_IS_INFINITY(intpart))\n            /* can't convert to long int -- arbitrary */\n            v = v &lt; 0 ? -271828.0 : 314159.0;\n</code></pre>\n\n<p>So as mentioned, it was an arbitrary choice. Note that 271828 is formed from the first few decimal digits of <a href=\"https://en.wikipedia.org/wiki/e_(mathematical_constant)\" rel=\"noreferrer\">e</a>.</p>\n\n<p>Related later commits:</p>\n\n<ul>\n<li><p><a href=\"https://github.com/python/cpython/commit/f3eeca16cbadd7da5836ed781572343863b1a074\" rel=\"noreferrer\">By Mark Dickinson in Apr 2010</a> (<a href=\"https://github.com/python/cpython/commit/ac256ab2843dfb6c28af0227202df67664ed462e\" rel=\"noreferrer\">also</a>), making the <code>Decimal</code> type behave similarly</p></li>\n<li><p><a href=\"https://github.com/python/cpython/commit/5e0c2748fb2e16b3b0f33f0bb55f1aaa1272f887\" rel=\"noreferrer\">By Mark Dickinson in Apr 2010</a> (<a href=\"https://github.com/python/cpython/commit/5daab45158094e577b9791cda7d8a0f4e34f45cb\" rel=\"noreferrer\">also</a>), moving this check to the top and adding test cases</p></li>\n<li><p><a href=\"https://github.com/python/cpython/commit/dc787d2055a7b562b64ca91b8f1af6d49fa39f1c\" rel=\"noreferrer\">By Mark Dickinson in May 2010</a> as <a href=\"https://bugs.python.org/issue8188\" rel=\"noreferrer\">issue 8188</a>, completely rewriting the hash function to <a href=\"https://docs.python.org/3/library/stdtypes.html#hashing-of-numeric-types\" rel=\"noreferrer\">its current implementation</a>, but retaining this special case, giving the constant a name <code>_PyHASH_INF</code> (also removing the 271828 which is why in Python 3 <code>hash(float('-inf'))</code> returns <code>-314159</code> rather than <code>-271828</code> as it does in Python 2)</p></li>\n<li><p><a href=\"https://github.com/python/cpython/commit/e7dfe74ce39cad736da8e3a24fdc4cfb50c7c515\" rel=\"noreferrer\">By Raymond Hettinger in Jan 2011</a>, adding an explicit example in the \"What's new\" for Python 3.2 of <code>sys.hash_info</code> showing the above value. (See <a href=\"https://docs.python.org/3/whatsnew/3.2.html#decimal-and-fractions\" rel=\"noreferrer\">here</a>.)</p></li>\n<li><p><a href=\"https://github.com/python/cpython/commit/1919b7e72bc43315b32f38a6f5f01e8c717907f4\" rel=\"noreferrer\">By Stefan Krah in Mar 2012</a> modifying the Decimal module but keeping this hash.</p></li>\n<li><p><a href=\"https://github.com/python/cpython/commit/985ecdcfc29adfc36ce2339acf03f819ad414869\" rel=\"noreferrer\">By Christian Heimes in Nov 2013</a>, moved the definition of <code>_PyHASH_INF</code> from <code>Include/pyport.h</code> to <code>Include/pyhash.h</code> where it now lives.</p></li>\n</ul>\n",
        "OwnerUserId": "4958",
        "OwnerDisplayName": "",
        "LastEditorUserId": "4958",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-05-23 18:24:46",
        "LastActivityDate": "2019-05-23 18:24:46",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "6",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56242834",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56227419",
        "CreationDate": "2019-05-21 16:39:13",
        "DeletionDate": "",
        "Score": "12",
        "ViewCount": "",
        "Body": "<p>Indeed,</p>\n\n<pre><code>sys.hash_info.inf\n</code></pre>\n\n<p>returns <code>314159</code>. The value is not generated, it's built into the source code.\nIn fact,</p>\n\n<pre><code>hash(float('-inf'))\n</code></pre>\n\n<p>returns <code>-271828</code>, or approximately -e, in python 2 (<a href=\"https://docs.python.org/3/library/stdtypes.html#hashing-of-numeric-types\" rel=\"nofollow noreferrer\">it's -314159 now</a>).</p>\n\n<p>The fact that the two most famous irrational numbers of all time are used as the hash values makes it very unlikely to be a coincidence.</p>\n",
        "OwnerUserId": "7583953",
        "OwnerDisplayName": "",
        "LastEditorUserId": "7583953",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-05-24 02:04:09",
        "LastActivityDate": "2019-05-24 02:04:09",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56021555",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56020455",
        "CreationDate": "2019-05-07 11:25:37",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<p>I mean, this is rendering component <code>only once</code> versus rendering <code>only if</code>. \nWith <code>only if</code> being the superset containing <code>only once condition</code>.</p>\n\n<p>Sure, rendering <code>only once</code> can be done via both. But as a library they'll just document what works for all cases. Using the latter approach of variable use is just making a decision about how we see things.</p>\n\n<p>Good point you made here though.</p>\n",
        "OwnerUserId": "1096194",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-05-07 11:25:37",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56109813",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56020455",
        "CreationDate": "2019-05-13 09:49:26",
        "DeletionDate": "",
        "Score": "3",
        "ViewCount": "",
        "Body": "<blockquote>\n  <p>Is this behaviour documented and expected in all React versions?</p>\n</blockquote>\n\n<p>No, I did not find documentation stating this behavior.</p>\n\n<p>What I found by digging into react source code and setting some breakpoints is that by saving and reusing the createElement result (<code>const fooOnce = &lt;Foo/&gt;;</code>) you effectively will use the exact same props object everytime, while calling createElement in each render creates a new props object everytime.</p>\n\n<p>Currently, this does make a difference because of the following condition in <code>function beginWork</code> from the fibers engine: <code>if (oldProps !== newProps || hasLegacyContextChanged())</code></p>\n\n<p>when the props object has the same identity, react immediately considers that there is no work to be done for this element (and does not even call render).</p>\n\n<p>This seems fairly probable to me to keep working, but of course there is no guarantee that this optimisation will always be in place with this exact behaviour. </p>\n\n<p>the code I'm refering to is here:\n<a href=\"https://github.com/facebook/react/blob/c7398f33966c4fedcba2c48e915b379e8f334607/packages/react-reconciler/src/ReactFiberBeginWork.js#L2119\" rel=\"nofollow noreferrer\">https://github.com/facebook/react/blob/c7398f33966c4fedcba2c48e915b379e8f334607/packages/react-reconciler/src/ReactFiberBeginWork.js#L2119</a></p>\n\n<p>when you use just the normal  you will end up calling render, and since the output is different it will update the DOM.</p>\n\n<p>when you use React.memo, the props will <em>not</em> have the same identity, but then react will enter the memo component case (<a href=\"https://github.com/facebook/react/blob/c7398f33966c4fedcba2c48e915b379e8f334607/packages/react-reconciler/src/ReactFiberBeginWork.js#L2377\" rel=\"nofollow noreferrer\">https://github.com/facebook/react/blob/c7398f33966c4fedcba2c48e915b379e8f334607/packages/react-reconciler/src/ReactFiberBeginWork.js#L2377</a>)\nand do a shallowEquals comparison (<a href=\"https://github.com/facebook/react/blob/c7398f33966c4fedcba2c48e915b379e8f334607/packages/react-reconciler/src/ReactFiberBeginWork.js#L487\" rel=\"nofollow noreferrer\">https://github.com/facebook/react/blob/c7398f33966c4fedcba2c48e915b379e8f334607/packages/react-reconciler/src/ReactFiberBeginWork.js#L487</a>)</p>\n\n<blockquote>\n  <p>Are there reasons to not reuse elements this way to prevent component updates?</p>\n</blockquote>\n\n<p>This can change, so I would not use this in production code.</p>\n\n<p>Besides that reason, I would avoid this because the decision if the component updates gets out of the component itself, since now to use it you need to change the consumer code, instead of just changing code on the component or adding a wrapper to it.</p>\n",
        "OwnerUserId": "4023734",
        "OwnerDisplayName": "",
        "LastEditorUserId": "4023734",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-05-13 10:12:08",
        "LastActivityDate": "2019-05-13 10:12:08",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54580199",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54573454",
        "CreationDate": "2019-02-07 18:43:46",
        "DeletionDate": "",
        "Score": "2",
        "ViewCount": "",
        "Body": "<ol>\n<li>Why does it occur?</li>\n</ol>\n\n<p><code>audio/ac3</code> is an unsupported mime type.</p>\n\n<p><a href=\"https://android.googlesource.com/platform/frameworks/av/+/master/media/libstagefright/MediaMuxer.cpp#76\" rel=\"nofollow noreferrer\"><code>MediaMuxer.addTrack()</code></a> (native) calls <a href=\"https://android.googlesource.com/platform/frameworks/av/+/master/media/libstagefright/MPEG4Writer.cpp#605\" rel=\"nofollow noreferrer\"><code>MPEG4Writer.addSource()</code></a>, which prints this log message before returning an error.</p>\n\n<p><strong>EDIT</strong></p>\n\n<p>My aim was not to provide an answer to each of your sub-questions, but to give you some insight into the fundamental problem. The library you have chosen relies on the Android's <code>MediaMuxer</code> component. For whatever reason, the <code>MediaMuxer</code> developers did not add support for this particular audio format. We know this because the software prints out an explicit message to that effect, then immediately throws the <code>IllegalStateException</code> mentioned in your question.</p>\n\n<p>Because the issue only involves a particular audio format, when you provide a video-only input, everything works fine.</p>\n\n<p>To fix the problem, you can either alter the library to provide for the missing functionality, or find a new library that better suits your needs. <a href=\"https://github.com/sannies/mp4parser\" rel=\"nofollow noreferrer\"><code>sannies/mp4parser</code></a> may be one such alternative, although it has different limitations (if I recall correctly, it requires all media to be in RAM during the mastering process). I do not know if it supports ac3 explicitly, but it should provide a framework to which you can add support for arbitrary mime types.</p>\n\n<p>I would encourage you to wait for a more complete answer. There may be far better ways to do what you are trying to do. But it is apparent that the library you are using simply does not support all possible mime types.</p>\n",
        "OwnerUserId": "6759241",
        "OwnerDisplayName": "",
        "LastEditorUserId": "6759241",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-02-08 14:57:00",
        "LastActivityDate": "2019-02-08 14:57:00",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "11",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "55348571",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54057958",
        "CreationDate": "2019-03-26 01:21:44",
        "DeletionDate": "",
        "Score": "3",
        "ViewCount": "",
        "Body": "<p>As <a href=\"https://stackoverflow.com/questions/54057958/comparing-ways-to-create-singletons-in-dart#comment94953126_54057958\">G\u00fcnter Z\u00f6chbauer stated in the comments</a>, each of the three ways you listed of creating singletons are the same. Use your personal preference to choose one.</p>\n\n<p>I'm going to add some additional notes:</p>\n\n<ul>\n<li><code>SingletonOne</code> when instantiated looks like any other class. So you could use this one if you want to hide the fact that it is a singleton (and leave the option to make it not be a singleton in the future). You could also pass in arguments in the constructor.</li>\n<li><code>SingletonTwo</code> would allow you to do other work before returning the instance.</li>\n<li><code>SingletonThree</code> is the shortest, and short clean code is desirable in my book, all other things being equal.</li>\n</ul>\n",
        "OwnerUserId": "3681880",
        "OwnerDisplayName": "",
        "LastEditorUserId": "3681880",
        "LastEditorDisplayName": "",
        "LastEditDate": "2020-01-05 22:21:35",
        "LastActivityDate": "2020-01-05 22:21:35",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56008679",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55975924",
        "CreationDate": "2019-05-06 15:57:28",
        "DeletionDate": "",
        "Score": "9",
        "ViewCount": "",
        "Body": "<p>I do not know of any existing names for this pattern, but if you take a good look at how the STL is naming things, you can use name close enough to make your code explicit.</p>\n\n<p>I also liked the <code>dispatcher_t</code> idea from @Jarod42 , I think it is more generic than <code>dichotomy_t</code> or <code>n_chotomy_t</code>. </p>\n\n<p><code>dichotomy()</code> could be called <code>make_variant(b)</code>. Since it will return the <code>std::variant</code> value of a boolean given in argument. Much like <code>std::make_tuple</code> makes a tuple from multiple arguments.</p>\n\n<p>I would suggest to replace <code>bools_at_compile_time</code> by <code>static_eval</code>. Much like <code>static_assert</code> makes an assertion at compile time.</p>\n\n<p>Not that if <code>eval</code> is not the correct adjective for your use case you can easily adapt it <code>static_*</code>.</p>\n\n<pre><code>#include &lt;type_traits&gt;\n#include &lt;variant&gt;\n#include &lt;utility&gt;\n\nusing dichotomy_t = std::variant&lt;std::false_type, std::true_type&gt;;\n// (or a struct that inherits from that, and overloads operator bool())\n\nconstexpr dichotomy_t make_variant( bool b ) {\n  if (b) return std::true_type{};\n  return std::false_type{};\n}\ntemplate&lt;class F, class...Bools&gt;\nconstexpr auto static_eval( F&amp;&amp; f, Bools...bools ) {\n  static_assert( (std::is_same&lt;Bools, bool&gt;{} &amp;&amp; ...) );\n  return std::visit( std::forward&lt;F&gt;(f), make_variant(bools)... );\n}\n\ntemplate&lt;bool x, bool y&gt;\nauto some_template() {\n    return x || y;\n}\n\nauto foo( bool x, bool y ) { // &lt;-- x and y are run-time bools here\n  auto func = [&amp;](auto x, auto y) {\n    return some_template&lt;x,y&gt;(); // &lt;-- x and y are compile-time bools here\n  };\n  return static_eval( func, x, y ); // &lt;-- converts runtime to compile time bools\n}\n\n#include &lt;iostream&gt;\n\nint main() {\n    std::cout &lt;&lt; foo( true, true ) &lt;&lt; \"\\n\";\n}\n</code></pre>\n",
        "OwnerUserId": "7556604",
        "OwnerDisplayName": "",
        "LastEditorUserId": "7556604",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-05-06 16:03:09",
        "LastActivityDate": "2019-05-06 16:03:09",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "1",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57053861",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55616929",
        "CreationDate": "2019-07-16 09:12:29",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<p>It sure looks bugged. Just wanted to note that according to the <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.ffill.html\" rel=\"nofollow noreferrer\">pandas documentation</a> the <code>.ffill()</code> method is a synonym for <code>.fillna(method='ffill')</code>. Using the latter generates your expected output for both your examples in pandas version <code>0.23.4</code> without any errors or additional columns. Hope that helps.</p>\n\n<pre class=\"lang-py prettyprint-override\"><code>import pandas as pd\nimport numpy as np\ndf=pd.DataFrame({'A':[np.nan,1,1,np.nan],'B':[2,np.nan,2,2]},index=[1,1,2,2])\n\ndf.columns=['A','A'] #dup column names\ndf.groupby(level=0).fillna(method='ffill')\n\nOutput:\n    A   A\n1   NaN 2.0\n1   1.0 2.0\n2   1.0 2.0\n2   1.0 2.0\n</code></pre>\n",
        "OwnerUserId": "2550702",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-07-16 09:12:29",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54014914",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54014913",
        "CreationDate": "2019-01-03 00:28:27",
        "DeletionDate": "",
        "Score": "26",
        "ViewCount": "",
        "Body": "<h2>Single and double quotes both work in Dart</h2>\n\n<pre><code>final myString = 'hello';\n</code></pre>\n\n<p>is the same as </p>\n\n<pre><code>final myString = \"hello\";\n</code></pre>\n\n<h2>Delimiters need to be escaped</h2>\n\n<p>Use a <code>\\</code> backslash to escape single quotes in a single quote string.</p>\n\n<pre><code>final myString = 'Bob\\'s dog';            // Bob's dog\n</code></pre>\n\n<p>Same thing to escape double quotes in a double quote string.</p>\n\n<pre><code>final myString = \"a \\\"quoted\\\" word\";     // a \"quoted\" word\n</code></pre>\n\n<p>But no need to escape anything if the delimiter is different.</p>\n\n<pre><code>final myString = \"Bob's dog\";             // Bob's dog\nfinal myString = 'a \"quoted\" word';       // a \"quoted\" word\n</code></pre>\n\n<p>Also no need to worry about the value passed into an interpolated string.</p>\n\n<pre><code>final value = '\"quoted\"';                 // \"quoted\"\nfinal myString = \"a $value word\";         // a \"quoted\" word\n</code></pre>\n\n<h2>Prefer single quotes in Flutter</h2>\n\n<p>The <a href=\"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#prefer-single-quotes-for-strings\" rel=\"noreferrer\">Flutter style guide</a> recommends using single quotes for everything</p>\n\n<pre><code>final myString = 'hello';\n</code></pre>\n\n<p>except for nested strings</p>\n\n<pre><code>print('Hello ${name.split(\" \")[0]}');\n</code></pre>\n\n<p>or strings containing single quotes (optional)</p>\n\n<pre><code>final myString = \"Bob's dog\";\nfinal myString = 'Bob\\'s dog';  // ok\n</code></pre>\n\n<p>The <a href=\"https://www.dartlang.org/guides/language/effective-dart/usage#strings\" rel=\"noreferrer\">Dart style guide</a> appears to be silent on the issue.</p>\n",
        "OwnerUserId": "3681880",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-01-03 00:28:27",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54028200",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54028199",
        "CreationDate": "2019-01-03 18:54:20",
        "DeletionDate": "",
        "Score": "122",
        "ViewCount": "",
        "Body": "<p>TLDR; No, <code>for</code> loops are not blanket \"bad\", at least, not always. It is probably <strong>more accurate to say that some vectorized operations are slower than iterating</strong>, versus saying that iteration is faster than some vectorized operations. Knowing when and why is key to getting the most performance out of your code. In a nutshell, these are the situations where it is worth considering an alternative to vectorized pandas functions:</p>\n\n<ol>\n<li>When your data is small (...depending on what you're doing),</li>\n<li>When dealing with <code>object</code>/mixed dtypes</li>\n<li>When using the <code>str</code>/regex accessor functions</li>\n</ol>\n\n<p>Let's examine these situations individually. </p>\n\n<hr>\n\n<h3>Iteration v/s Vectorization on Small Data</h3>\n\n<p>Pandas follows a <a href=\"https://en.wikipedia.org/wiki/Convention_over_configuration\" rel=\"noreferrer\">\"Convention Over Configuration\"</a> approach in its API design. This means that the same API has been fitted to cater to a broad range of data and use cases. </p>\n\n<p>When a pandas function is called, the following things (among others) must internally be handled by the function, to ensure working </p>\n\n<ol>\n<li>Index/axis alignment</li>\n<li>Handling mixed datatypes</li>\n<li>Handling missing data</li>\n</ol>\n\n<p>Almost every function will have to deal with these to varying extents, and this presents an <strong>overhead</strong>. The overhead is less for numeric functions (for example, <a href=\"https://github.com/pandas-dev/pandas/blob/v0.23.4/pandas/core/ops.py#L1371-L1388\" rel=\"noreferrer\"><code>Series.add</code></a>), while it is more pronounced for string functions (for example, <a href=\"https://github.com/pandas-dev/pandas/blob/v0.23.4/pandas/core/strings.py#L635-L669\" rel=\"noreferrer\"><code>Series.str.replace</code></a>).</p>\n\n<p><a href=\"https://docs.python.org/3/tutorial/controlflow.html#for-statements\" rel=\"noreferrer\"><code>for</code></a> loops, on the other hand, are faster then you think. What's even better is <a href=\"https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions\" rel=\"noreferrer\">list comprehensions</a> (which create lists through <code>for</code> loops) are even faster as they are optimized iterative mechanisms for list creation.</p>\n\n<p>List comprehensions follow the pattern </p>\n\n<pre><code>[f(x) for x in seq]\n</code></pre>\n\n<p>Where <code>seq</code> is a pandas series or DataFrame column. Or, when operating over multiple columns,</p>\n\n<pre><code>[f(x, y) for x, y in zip(seq1, seq2)]\n</code></pre>\n\n<p>Where <code>seq1</code> and <code>seq2</code> are columns. </p>\n\n<p><strong>Numeric Comparison</strong><br>\nConsider a simple boolean indexing operation. The list comprehension method has been timed against <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.ne.html\" rel=\"noreferrer\"><code>Series.ne</code></a> (<code>!=</code>) and <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.query.html\" rel=\"noreferrer\"><code>query</code></a>. Here are the functions:</p>\n\n<pre><code># Boolean indexing with Numeric value comparison.\ndf[df.A != df.B]                            # vectorized !=\ndf.query('A != B')                          # query (numexpr)\ndf[[x != y for x, y in zip(df.A, df.B)]]    # list comp\n</code></pre>\n\n<p>For simplicity, I have used the <a href=\"https://github.com/nschloe/perfplot\" rel=\"noreferrer\"><code>perfplot</code></a> package to run all the timeit tests in this post. The timings for the operations above are below:</p>\n\n<p><a href=\"https://i.stack.imgur.com/sbtDB.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/sbtDB.png\" alt=\"enter image description here\"></a></p>\n\n<p>The list comprehension outperforms <code>query</code> for moderately sized N, and even outperforms the vectorized not equals comparison for tiny N. Unfortunately, the list comprehension scales linearly, so it does not offer much performance gain for larger N. </p>\n\n<blockquote>\n  <p><strong>Note</strong><br>\n  It is worth mentioning that much of the benefit of list comprehension come from not having to worry about the index alignment,\n  but this means that if your code is dependent on indexing alignment,\n  this will break. In some cases, vectorised operations over the\n  underlying NumPy arrays can be considered as bringing in the \"best of\n  both worlds\", allowing for vectorisation <em>without</em> all the unneeded overhead of the pandas functions. This means that you can rewrite the operation above as </p>\n\n<pre><code>df[df.A.values != df.B.values]\n</code></pre>\n  \n  <p>Which outperforms both the pandas and list comprehension equivalents:<br>\n  <img src=\"https://i.stack.imgur.com/m9hyc.png\" width=\"300\"/><br>\n  NumPy vectorization is out of the scope of this post, but it is definitely worth considering, if performance matters.</p>\n</blockquote>\n\n<p><strong>Value Counts</strong><br>\nTaking another example - this time, with another vanilla python construct that is <em>faster</em> than a for loop - <a href=\"https://docs.python.org/3/library/collections.html#collections.Counter\" rel=\"noreferrer\"><code>collections.Counter</code></a>. A common requirement is to compute the value counts and return the result as a dictionary. This is done with <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.value_counts.html#pandas-series-value-counts\" rel=\"noreferrer\"><code>value_counts</code></a>, <a href=\"https://docs.scipy.org/doc/numpy-1.14.1/reference/generated/numpy.unique.html\" rel=\"noreferrer\"><code>np.unique</code></a>, and <code>Counter</code>:</p>\n\n<pre><code># Value Counts comparison.\nser.value_counts(sort=False).to_dict()           # value_counts\ndict(zip(*np.unique(ser, return_counts=True)))   # np.unique\nCounter(ser)                                     # Counter\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/2i5qT.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/2i5qT.png\" alt=\"enter image description here\"></a></p>\n\n<p>The results are more pronounced, <code>Counter</code> wins out over both vectorized methods for a larger range of small N (~3500). </p>\n\n<blockquote>\n  <p><strong>Note</strong><br>\n   More trivia (courtesy @user2357112). The <code>Counter</code> is implemented with a <a href=\"https://github.com/python/cpython/blob/v3.7.0/Modules/_collectionsmodule.c#L2249-L2354\" rel=\"noreferrer\">C\n  accelerator</a>,\n  so while it still has to work with python objects instead of the\n  underlying C datatypes, it is still faster than a <code>for</code> loop. Python\n  power!</p>\n</blockquote>\n\n<p>Of course, the take away from here is that the performance depends on your data and use case. The point of these examples is to convince you not to rule out these solutions as legitimate options. If these still don't give you the performance you need, there is always <a href=\"https://pandas.pydata.org/pandas-docs/stable/enhancingperf.html#cython-writing-c-extensions-for-pandas\" rel=\"noreferrer\">cython</a> and <a href=\"http://numba.pydata.org/\" rel=\"noreferrer\">numba</a>. Let's add this test into the mix.</p>\n\n<pre><code>from numba import njit, prange\n\n@njit(parallel=True)\ndef get_mask(x, y):\n    result = [False] * len(x)\n    for i in prange(len(x)):\n        result[i] = x[i] != y[i]\n\n    return np.array(result)\n\ndf[get_mask(df.A.values, df.B.values)] # numba\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/nSpCH.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/nSpCH.png\" alt=\"enter image description here\"></a></p>\n\n<p>Numba offers JIT compilation of loopy python code to very powerful vectorized code. Understanding how to make numba work involves a learning curve.</p>\n\n<hr>\n\n<h3><strong>Operations with Mixed/<code>object</code> dtypes</strong></h3>\n\n<p><strong>String-based Comparison</strong><br>\nRevisiting the filtering example from the first section, what if the columns being compared are strings? Consider the same 3 functions above, but with the input DataFrame cast to string.</p>\n\n<pre><code># Boolean indexing with string value comparison.\ndf[df.A != df.B]                            # vectorized !=\ndf.query('A != B')                          # query (numexpr)\ndf[[x != y for x, y in zip(df.A, df.B)]]    # list comp\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/Lg2CE.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/Lg2CE.png\" alt=\"enter image description here\"></a></p>\n\n<p>So, what changed? The thing to note here is that <strong>string operations are inherently difficult to vectorize.</strong> Pandas treats strings as objects, and all operations on objects fall back to a slow, loopy implementation.</p>\n\n<p>Now, because this loopy implementation is surrounded by all the overhead mentioned above, there is a constant magnitude difference between these solutions, even though they scale the same. </p>\n\n<p>When it comes to operations on mutable/complex objects, there is no comparison. List comprehension outperforms all operations involving dicts and lists. </p>\n\n<p><strong>Accessing Dictionary Value(s) by Key</strong><br>\nHere are timings for two operations that extract a value from a column of dictionaries: <code>map</code> and the list comprehension. The setup is in the Appendix, under the heading \"Code Snippets\".</p>\n\n<pre><code># Dictionary value extraction.\nser.map(operator.itemgetter('value'))     # map\npd.Series([x.get('value') for x in ser])  # list comprehension\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/QrbZO.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/QrbZO.png\" alt=\"enter image description here\"></a></p>\n\n<p><strong>Positional List Indexing</strong><br>\nTimings for 3 operations that extract the 0th element from a list of columns (handling exceptions), <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.map.html#pandas-series-map\" rel=\"noreferrer\"><code>map</code></a>, <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.get.html\" rel=\"noreferrer\"><code>str.get</code> accessor method</a>, and the list comprehension:</p>\n\n<pre><code># List positional indexing. \ndef get_0th(lst):\n    try:\n        return lst[0]\n    # Handle empty lists and NaNs gracefully.\n    except (IndexError, TypeError):\n        return np.nan\n</code></pre>\n\n<p></p>\n\n<pre><code>ser.map(get_0th)                                          # map\nser.str[0]                                                # str accessor\npd.Series([x[0] if len(x) &gt; 0 else np.nan for x in ser])  # list comp\npd.Series([get_0th(x) for x in ser])                      # list comp safe\n</code></pre>\n\n<blockquote>\n  <p><strong>Note</strong><br>\n  If the index matters, you would want to do:</p>\n\n<pre><code>pd.Series([...], index=ser.index)\n</code></pre>\n  \n  <p>When reconstructing the series.</p>\n</blockquote>\n\n<p><a href=\"https://i.stack.imgur.com/Zzzez.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/Zzzez.png\" alt=\"enter image description here\"></a></p>\n\n<p><strong>List Flattening</strong><br>\nA final example is flattening lists. This is another common problem, and demonstrates just how powerful pure python is here.</p>\n\n<pre><code># Nested list flattening.\npd.DataFrame(ser.tolist()).stack().reset_index(drop=True)  # stack\npd.Series(list(chain.from_iterable(ser.tolist())))         # itertools.chain\npd.Series([y for x in ser for y in x])                     # nested list comp\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/eJ2iB.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/eJ2iB.png\" alt=\"enter image description here\"></a></p>\n\n<p>Both <a href=\"https://docs.python.org/3/library/itertools.html#itertools.chain.from_iterable\" rel=\"noreferrer\"><code>itertools.chain.from_iterable</code></a> and the nested list comprehension are pure python constructs, and scale much better than the <code>stack</code> solution.</p>\n\n<p>These timings are a strong indication of the fact that pandas is not equipped to work with mixed dtypes, and that you should probably refrain from using it to do so. Wherever possible, data should be present as scalar values (ints/floats/strings) in separate columns.</p>\n\n<p>Lastly, the applicability of these solutions depend widely on your data. So, the best thing to do would be to test these operations on your data before deciding what to go with. Notice how I have not timed <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.apply.html#pandas-series-apply\" rel=\"noreferrer\"><code>apply</code></a> on these solutions, because it would skew the graph (yes, it's that slow).</p>\n\n<hr>\n\n<h3>Regex Operations, and <code>.str</code> Accessor Methods</h3>\n\n<p>Pandas can apply regex operations such as <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.contains.html\" rel=\"noreferrer\"><code>str.contains</code></a>, <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.extract.html\" rel=\"noreferrer\"><code>str.extract</code></a>, and <a href=\"https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.str.extractall.html#pandas.Series.str.extractall\" rel=\"noreferrer\"><code>str.extractall</code></a>, as well as other \"vectorized\" string operations (such as <code>str.split</code>, str.find<code>,</code>str.translate`, and so on) on string columns. These functions are slower than list comprehensions, and are meant to be more convenience functions than anything else.</p>\n\n<p>It is usually much faster to pre-compile a regex pattern and iterate over your data with <a href=\"https://docs.python.org/3/library/re.html#re.compile\" rel=\"noreferrer\"><code>re.compile</code></a> (also see <a href=\"https://stackoverflow.com/questions/452104/is-it-worth-using-pythons-re-compile\">Is it worth using Python&#39;s re.compile?</a>). The list comp equivalent to <code>str.contains</code> looks something like this:</p>\n\n<pre><code>p = re.compile(...)\nser2 = pd.Series([x for x in ser if p.search(x)])\n</code></pre>\n\n<p>Or,</p>\n\n<pre><code>ser2 = ser[[bool(p.search(x)) for x in ser]]\n</code></pre>\n\n<p>If you need to handle NaNs, you can do something like</p>\n\n<pre><code>ser[[bool(p.search(x)) if pd.notnull(x) else False for x in ser]]\n</code></pre>\n\n<p>The list comp equivalent to <code>str.extract</code> (without groups) will look something like:</p>\n\n<pre><code>df['col2'] = [p.search(x).group(0) for x in df['col']]\n</code></pre>\n\n<p>If you need to handle no-matches and NaNs, you can use a custom function (still faster!):</p>\n\n<pre><code>def matcher(x):\n    m = p.search(str(x))\n    if m:\n        return m.group(0)\n    return np.nan\n\ndf['col2'] = [matcher(x) for x in df['col']]\n</code></pre>\n\n<p>The <code>matcher</code> function is very extensible. It can be fitted to return a list for each capture group, as needed. Just extract query the <code>group</code> or <code>groups</code> attribute of the matcher object.</p>\n\n<p>For <code>str.extractall</code>, change <code>p.search</code> to <code>p.findall</code>.</p>\n\n<p><strong>String Extraction</strong><br>\nConsider a simple filtering operation. The idea is to extract 4 digits if it is preceded by an upper case letter.</p>\n\n<pre><code># Extracting strings.\np = re.compile(r'(?&lt;=[A-Z])(\\d{4})')\ndef matcher(x):\n    m = p.search(x)\n    if m:\n        return m.group(0)\n    return np.nan\n\nser.str.extract(r'(?&lt;=[A-Z])(\\d{4})', expand=False)   #  str.extract\npd.Series([matcher(x) for x in ser])                  #  list comprehension\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/XmXyX.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/XmXyX.png\" alt=\"enter image description here\"></a></p>\n\n<p><strong>More Examples</strong><br>\nFull disclosure - I am the author (in part or whole) of these posts listed below.</p>\n\n<ul>\n<li><p><a href=\"https://stackoverflow.com/questions/50444346/fast-punctuation-removal-with-pandas\">Fast punctuation removal with pandas</a></p></li>\n<li><p><a href=\"https://stackoverflow.com/questions/11858472/string-concatenation-of-two-pandas-columns/54298586#54298586\">String concatenation of two pandas columns</a> </p></li>\n<li><p><a href=\"https://stackoverflow.com/questions/13682044/remove-unwanted-parts-from-strings-in-a-column/54302517#54302517\">Remove unwanted parts from strings in a column</a></p></li>\n<li><p><a href=\"https://stackoverflow.com/a/47813144/4909087\">Replace all but the last occurrence of a character in a dataframe</a></p></li>\n</ul>\n\n<hr>\n\n<h3>Conclusion</h3>\n\n<p>As shown from the examples above, iteration shines when working with small rows of DataFrames, mixed datatypes, and regular expressions.</p>\n\n<p>The speedup you get depends on your data and your problem, so your mileage may vary. The best thing to do is to carefully run tests and see if the payout is worth the effort. </p>\n\n<p>The \"vectorized\" functions shine in their simplicity and readability, so if performance is not critical, you should definitely prefer those. </p>\n\n<p>Another side note, certain string operations deal with constraints that favour the use of NumPy. Here are two examples where careful NumPy vectorization outperforms python: </p>\n\n<ul>\n<li><p><a href=\"https://stackoverflow.com/a/49471005/4909087\">Create new column with incremental values in a faster and efficient way - Answer by Divakar</a></p></li>\n<li><p><a href=\"https://stackoverflow.com/a/50518852/4909087\">Fast punctuation removal with pandas - Answer by Paul Panzer</a></p></li>\n</ul>\n\n<p>Additionally, sometimes just operating on the underlying arrays via <code>.values</code> as opposed to on the Series or DataFrames can offer a healthy enough speedup for most usual scenarios (see the <strong>Note</strong> in the <strong>Numeric Comparison</strong> section above). So, for example <code>df[df.A.values != df.B.values]</code> would show instant performance boosts over <code>df[df.A != df.B]</code>. Using <code>.values</code> may not be appropriate in every situation, but it is a useful hack to know. </p>\n\n<p>As mentioned above, it's up to you to decide whether these solutions are worth the trouble of implementing.</p>\n\n<hr>\n\n<h3>Appendix: Code Snippets</h3>\n\n<pre><code>import perfplot  \nimport operator \nimport pandas as pd\nimport numpy as np\nimport re\n\nfrom collections import Counter\nfrom itertools import chain\n</code></pre>\n\n<p></p>\n\n<pre><code># Boolean indexing with Numeric value comparison.\nperfplot.show(\n    setup=lambda n: pd.DataFrame(np.random.choice(1000, (n, 2)), columns=['A','B']),\n    kernels=[\n        lambda df: df[df.A != df.B],\n        lambda df: df.query('A != B'),\n        lambda df: df[[x != y for x, y in zip(df.A, df.B)]],\n        lambda df: df[get_mask(df.A.values, df.B.values)]\n    ],\n    labels=['vectorized !=', 'query (numexpr)', 'list comp', 'numba'],\n    n_range=[2**k for k in range(0, 15)],\n    xlabel='N'\n)\n</code></pre>\n\n<p></p>\n\n<pre><code># Value Counts comparison.\nperfplot.show(\n    setup=lambda n: pd.Series(np.random.choice(1000, n)),\n    kernels=[\n        lambda ser: ser.value_counts(sort=False).to_dict(),\n        lambda ser: dict(zip(*np.unique(ser, return_counts=True))),\n        lambda ser: Counter(ser),\n    ],\n    labels=['value_counts', 'np.unique', 'Counter'],\n    n_range=[2**k for k in range(0, 15)],\n    xlabel='N',\n    equality_check=lambda x, y: dict(x) == dict(y)\n)\n</code></pre>\n\n<p></p>\n\n<pre><code># Boolean indexing with string value comparison.\nperfplot.show(\n    setup=lambda n: pd.DataFrame(np.random.choice(1000, (n, 2)), columns=['A','B'], dtype=str),\n    kernels=[\n        lambda df: df[df.A != df.B],\n        lambda df: df.query('A != B'),\n        lambda df: df[[x != y for x, y in zip(df.A, df.B)]],\n    ],\n    labels=['vectorized !=', 'query (numexpr)', 'list comp'],\n    n_range=[2**k for k in range(0, 15)],\n    xlabel='N',\n    equality_check=None\n)\n</code></pre>\n\n<p></p>\n\n<pre><code># Dictionary value extraction.\nser1 = pd.Series([{'key': 'abc', 'value': 123}, {'key': 'xyz', 'value': 456}])\nperfplot.show(\n    setup=lambda n: pd.concat([ser1] * n, ignore_index=True),\n    kernels=[\n        lambda ser: ser.map(operator.itemgetter('value')),\n        lambda ser: pd.Series([x.get('value') for x in ser]),\n    ],\n    labels=['map', 'list comprehension'],\n    n_range=[2**k for k in range(0, 15)],\n    xlabel='N',\n    equality_check=None\n)\n</code></pre>\n\n<p></p>\n\n<pre><code># List positional indexing. \nser2 = pd.Series([['a', 'b', 'c'], [1, 2], []])        \nperfplot.show(\n    setup=lambda n: pd.concat([ser2] * n, ignore_index=True),\n    kernels=[\n        lambda ser: ser.map(get_0th),\n        lambda ser: ser.str[0],\n        lambda ser: pd.Series([x[0] if len(x) &gt; 0 else np.nan for x in ser]),\n        lambda ser: pd.Series([get_0th(x) for x in ser]),\n    ],\n    labels=['map', 'str accessor', 'list comprehension', 'list comp safe'],\n    n_range=[2**k for k in range(0, 15)],\n    xlabel='N',\n    equality_check=None\n)\n</code></pre>\n\n<p></p>\n\n<pre><code># Nested list flattening.\nser3 = pd.Series([['a', 'b', 'c'], ['d', 'e'], ['f', 'g']])\nperfplot.show(\n    setup=lambda n: pd.concat([ser2] * n, ignore_index=True),\n    kernels=[\n        lambda ser: pd.DataFrame(ser.tolist()).stack().reset_index(drop=True),\n        lambda ser: pd.Series(list(chain.from_iterable(ser.tolist()))),\n        lambda ser: pd.Series([y for x in ser for y in x]),\n    ],\n    labels=['stack', 'itertools.chain', 'nested list comp'],\n    n_range=[2**k for k in range(0, 15)],\n    xlabel='N',    \n    equality_check=None\n\n)\n</code></pre>\n\n<p></p>\n\n<pre><code># Extracting strings.\nser4 = pd.Series(['foo xyz', 'test A1234', 'D3345 xtz'])\nperfplot.show(\n    setup=lambda n: pd.concat([ser4] * n, ignore_index=True),\n    kernels=[\n        lambda ser: ser.str.extract(r'(?&lt;=[A-Z])(\\d{4})', expand=False),\n        lambda ser: pd.Series([matcher(x) for x in ser])\n    ],\n    labels=['str.extract', 'list comprehension'],\n    n_range=[2**k for k in range(0, 15)],\n    xlabel='N',\n    equality_check=None\n)\n</code></pre>\n",
        "OwnerUserId": "4909087",
        "OwnerDisplayName": "",
        "LastEditorUserId": "4909087",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-05-25 05:22:40",
        "LastActivityDate": "2019-05-25 05:22:40",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "9",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54618056",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54617101",
        "CreationDate": "2019-02-10 15:40:24",
        "DeletionDate": "",
        "Score": "14",
        "ViewCount": "",
        "Body": "<p>TL;DR This is UB.</p>\n\n<p><a href=\"https://timsong-cpp.github.io/cppwp/basic.life#7\" rel=\"noreferrer\">[basic.life]</a></p>\n\n<blockquote>\n  <p>Similarly, before the lifetime of an object has started but after the storage which the object will occupy has been allocated or, after the lifetime of an object has ended and before the storage which the object occupied is reused or released, any glvalue that refers to the original object may be used but only in limited ways. For an object under construction or destruction, see [class.cdtor]. Otherwise, such a glvalue refers to allocated storage, and using the properties of the glvalue that do not depend on its value is well-defined. The program has undefined behavior if: [...]</p>\n  \n  <ul>\n  <li>the glvalue is used to call a non-static member function of the object, or</li>\n  </ul>\n</blockquote>\n\n<p>By <a href=\"https://timsong-cpp.github.io/cppwp/class.union#1\" rel=\"noreferrer\">definition</a>, an inactive member of an union isn't within its lifetime.</p>\n\n<hr>\n\n<p>A possible workaround is to use C++20 <a href=\"https://en.cppreference.com/w/cpp/language/attributes/no_unique_address\" rel=\"noreferrer\"><code>[[no_unique_address]]</code></a></p>\n\n<pre><code>struct Point\n{\n    int&amp; get_x() { return xy[0]; }\n    int&amp; get_y() { return xy[1]; }\n    [[no_unique_address]] property&lt;Point, int, &amp;Point::get_x&gt; x;\n    [[no_unique_address]] property&lt;Point, int, &amp;Point::get_y&gt; y;\n    std::array&lt;int, 2&gt; xy;\n};\n\nstatic_assert(offsetof(Point, x) == 0 &amp;&amp; offsetof(Point, y) == 0);\n</code></pre>\n",
        "OwnerUserId": "4832499",
        "OwnerDisplayName": "",
        "LastEditorUserId": "734069",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-02-10 16:07:18",
        "LastActivityDate": "2019-02-10 16:07:18",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "14",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56698732",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56309165",
        "CreationDate": "2019-06-21 07:24:33",
        "DeletionDate": "",
        "Score": "-1",
        "ViewCount": "",
        "Body": "<p>Use below code</p>\n\n<pre><code>/**\n* Get the apk path of this application.\n*\n* @param context any context (e.g. an Activity or a Service)\n* @return full apk file path, or null if an exception happened (it should not happen)\n*/\npublic static String getApkName(Context context) {\n    String packageName = context.getPackageName();\n    PackageManager pm = context.getPackageManager();\n    try {\n        ApplicationInfo ai = pm.getApplicationInfo(packageName, 0);\n        String apk = ai.publicSourceDir;\n        return apk;\n    } catch (Throwable x) {\n        return null;\n    }\n}\n</code></pre>\n",
        "OwnerUserId": "8758414",
        "OwnerDisplayName": "",
        "LastEditorUserId": "1664430",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-06-21 07:49:40",
        "LastActivityDate": "2019-06-21 07:49:40",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57424828",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56309165",
        "CreationDate": "2019-08-09 06:54:28",
        "DeletionDate": "",
        "Score": "6",
        "ViewCount": "",
        "Body": "<p>OK I think I found a way using the Android framework (someone on reddit gave me this solution), to use file-path and use it, but it's not perfect at all. Some notes:</p>\n\n<ol>\n<li>Not as direct as before. </li>\n<li>Good thing is that it might also be possible to handle even files that are outside of the device storage. </li>\n<li>It looks like a workaround, and I'm not sure for how long it will work.</li>\n<li>For some reason, I can't load the app label (it always returns just the package name instead), and same goes for the app-icon (always null or default icon).</li>\n</ol>\n\n<p>The solution, in short, is using this:</p>\n\n<pre><code>val fileDescriptor = contentResolver.openFileDescriptor(uri, \"r\") ?: return\nval packageArchiveInfo = packageManager.getPackageArchiveInfo(\"/proc/self/fd/\" + fileDescriptor.fd, 0)\n</code></pre>\n\n<p>I think this same approach can be used for all cases that you need a file-path.</p>\n\n<p>Here's a sample app (also available <a href=\"https://issuetracker.google.com/issues/128591846#comment246\" rel=\"nofollow noreferrer\"><strong>here</strong></a>) :</p>\n\n<pre><code>class MainActivity : AppCompatActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        startActivityForResult(\n                Intent(Intent.ACTION_OPEN_DOCUMENT).addCategory(Intent.CATEGORY_OPENABLE)\n                        .setType(\"application/vnd.android.package-archive\"), 1\n        )\n    }\n\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n        try {\n            val uri = data?.data ?: return\n            val takeFlags = Intent.FLAG_GRANT_READ_URI_PERMISSION or Intent.FLAG_GRANT_WRITE_URI_PERMISSION\n            contentResolver.takePersistableUriPermission(uri, takeFlags)\n            val isDocumentUri = DocumentFile.isDocumentUri(this, uri)\n            if (!isDocumentUri)\n                return\n            val documentFile = DocumentFile.fromSingleUri(this, uri) ?: return\n            val fileDescriptor = contentResolver.openFileDescriptor(uri, \"r\") ?: return\n            val packageArchiveInfo = packageManager.getPackageArchiveInfo(\"/proc/self/fd/\" + fileDescriptor.fd, 0)\n            Log.d(\"AppLog\", \"got APK info?${packageArchiveInfo != null}\")\n            if (packageArchiveInfo != null) {\n                val appLabel = loadAppLabel(packageArchiveInfo.applicationInfo, packageManager)\n                Log.d(\"AppLog\", \"appLabel:$appLabel\")\n            }\n        } catch (e: Exception) {\n            e.printStackTrace()\n            Log.e(\"AppLog\", \"failed to get app info: $e\")\n        }\n    }\n\n    fun loadAppLabel(applicationInfo: ApplicationInfo, packageManager: PackageManager): String =\n            try {\n                applicationInfo.loadLabel(packageManager).toString()\n            } catch (e: java.lang.Exception) {\n                \"\"\n            }\n    }\n}\n</code></pre>\n",
        "OwnerUserId": "878126",
        "OwnerDisplayName": "",
        "LastEditorUserId": "878126",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-11-09 14:14:59",
        "LastActivityDate": "2019-11-09 14:14:59",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54597846",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54596743",
        "CreationDate": "2019-02-08 17:53:27",
        "DeletionDate": "",
        "Score": "16",
        "ViewCount": "",
        "Body": "<p>This is because <code>function</code> is a special primitive:</p>\n\n<pre><code>typeof(`function`)\n#&gt; [1] \"special\"\n</code></pre>\n\n<p>The arguments are not evaluated, so you have actually passed <code>quote(formals(mean))</code> instead of the value of <code>formals(mean)</code>. I don't think there's a way of calling <code>function</code> directly without evaluation tricks, except with an empty formals list which is just <code>NULL</code>.</p>\n",
        "OwnerUserId": "1725177",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-02-08 17:53:27",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "3",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54031547",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54031546",
        "CreationDate": "2019-01-04 00:11:03",
        "DeletionDate": "",
        "Score": "33",
        "ViewCount": "",
        "Body": "<p>There are a few ways to create an empty list in Dart:</p>\n\n<pre><code>[]\nList()\n&lt;String&gt;[]\nList&lt;String&gt;()\n</code></pre>\n\n<p>However, the <a href=\"https://www.dartlang.org/guides/language/effective-dart/usage#do-use-collection-literals-when-possible\" rel=\"noreferrer\">Effective Dart Usage Guide</a> recommends this:</p>\n\n<pre><code>[]\n</code></pre>\n\n<p>Or if you need to specify the type, then this:</p>\n\n<pre><code>&lt;String&gt;[]\n</code></pre>\n",
        "OwnerUserId": "3681880",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-01-04 00:11:03",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "55213336",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55212788",
        "CreationDate": "2019-03-18 00:33:05",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<p>From an Android App Bundle, you can generate a \"universal APK\" using <a href=\"https://developer.android.com/studio/command-line/bundletool\" rel=\"nofollow noreferrer\">bundletool</a> build-apks command with the <code>--mode=universal</code> flag. This will generate a single \"fat\" APK that is compatible with all devices (that your app supports).</p>\n\n<p>I know this isn't strictly answering your question, but trying to merge the APKs is not only a complex task, but will result in a lot of cases in something incorrect.</p>\n",
        "OwnerUserId": "4265103",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-03-18 00:33:05",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "4",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "55456481",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55212788",
        "CreationDate": "2019-04-01 13:36:29",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<p>Please check this.\nwhen we send</p>\n\n<pre><code>adb install-multiple apk1 apk2 ...\n</code></pre>\n\n<p>it calls this code \n<a href=\"http://androidxref.com/7.1.2_r36/xref/system/core/adb/commandline.cpp#1815\" rel=\"nofollow noreferrer\">install-multiple</a></p>\n\n<pre><code> std::string install_cmd;\n    if (_use_legacy_install()) {\n        install_cmd = \"exec:pm\";\n    } else {\n        install_cmd = \"exec:cmd package\";\n    }\n\n    std::string cmd = android::base::StringPrintf(\"%s install-create -S %\" PRIu64, install_cmd.c_str(), total_size);\n    for (i = 1; i &lt; first_apk; i++) {\n        cmd += \" \" + escape_arg(argv[i]);\n    }\n</code></pre>\n\n<p>which in turn calls Pm.java or a new way of executing PackageManagerService code, both are similar</p>\n\n<p>I tried to integrate that code in my app, The problem which I faced, apk installation was not able to complete, it is due to the reason that the app needs. </p>\n\n<pre><code>&lt;uses-permission android:name=\"android.permission.INSTALL_PACKAGES\"/&gt;\n</code></pre>\n\n<p>But it is only given to system-priv apps. When I executed these steps from adb shell apk installation was successful and when I created my app a system priv-app apk install was successfull. </p>\n\n<p>code to call new apis of PackageManager, mostly copied from Pm.java\nSteps in installing split apks</p>\n\n<ol>\n<li><p>Create a session with argument -S  , return session id.</p>\n\n<p>(install-create, -S, 52488426)\n52488426 -- total size of apks.</p></li>\n<li><p>Write split apks in that session with size , name and path</p>\n\n<p>(install-write, -S, 44334187, 824704264, 1_base.apk, -)</p>\n\n<p>(install-write, -S, 1262034, 824704264, 2_split_config.en.apk, -)</p>\n\n<p>(install-write, -S, 266117, 824704264, 3_split_config.hdpi.apk, -)</p>\n\n<p>(install-write, -S, 6626088, 824704264, 4_split_config.x86.apk, -)</p></li>\n<li><p>commit the session with session id</p>\n\n<p>(install-commit, 824704264)</p></li>\n</ol>\n\n<p>I have placed airbnb apk in my sdcard.</p>\n\n<pre><code>OnePlus5:/sdcard/com.airbnb.android-1 $ ll\ntotal 51264\n-rw-rw---- 1 root sdcard_rw 44334187 2019-04-01 14:20 base.apk\n-rw-rw---- 1 root sdcard_rw  1262034 2019-04-01 14:20 split_config.en.apk\n-rw-rw---- 1 root sdcard_rw   266117 2019-04-01 14:20 split_config.hdpi.apk\n-rw-rw---- 1 root sdcard_rw  6626088 2019-04-01 14:20 split_config.x86.apk\n</code></pre>\n\n<p>and calling functions to install apk. </p>\n\n<pre><code>final InstallParams installParams = makeInstallParams(52488426l);\n\n            try {\n                int sessionId = runInstallCreate(installParams);\n\n                runInstallWrite(44334187,sessionId, \"1_base.apk\", \"/sdcard/com.airbnb.android-1/base.apk\");\n\n                runInstallWrite(1262034,sessionId, \"2_split_config.en.apk\", \"/sdcard/com.airbnb.android-1/split_config.en.apk\");\n\n                runInstallWrite(266117,sessionId, \"3_split_config.hdpi.apk\", \"/sdcard/com.airbnb.android-1/split_config.hdpi.apk\");\n\n                runInstallWrite(6626088,sessionId, \"4_split_config.x86.apk\", \"/sdcard/com.airbnb.android-1/split_config.x86.apk\");\n\n\n                if (doCommitSession(sessionId, false )\n                        != PackageInstaller.STATUS_SUCCESS) {\n                }\n                System.out.println(\"Success\");\n\n            } catch (RemoteException e) {\n                e.printStackTrace();\n            }\n\nprivate int runInstallCreate(InstallParams installParams) throws RemoteException {\n    final int sessionId = doCreateSession(installParams.sessionParams);\n    System.out.println(\"Success: created install session [\" + sessionId + \"]\");\n    return sessionId;\n}\n\nprivate int doCreateSession(PackageInstaller.SessionParams params)\n        throws RemoteException {\n\n    int sessionId = 0 ;\n    try {\n        sessionId = packageInstaller.createSession(params);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    return sessionId;\n}\n\nprivate int runInstallWrite(long size, int sessionId , String splitName ,String path ) throws RemoteException {\n    long sizeBytes = -1;\n\n    String opt;\n    sizeBytes = size;\n    return doWriteSession(sessionId, path, sizeBytes, splitName, true /*logSuccess*/);\n}\n\n\nprivate int doWriteSession(int sessionId, String inPath, long sizeBytes, String splitName,\n                           boolean logSuccess) throws RemoteException {\n    if (\"-\".equals(inPath)) {\n        inPath = null;\n    } else if (inPath != null) {\n        final File file = new File(inPath);\n        if (file.isFile()) {\n            sizeBytes = file.length();\n        }\n    }\n\n    final PackageInstaller.SessionInfo info = packageInstaller.getSessionInfo(sessionId);\n\n    PackageInstaller.Session session = null;\n    InputStream in = null;\n    OutputStream out = null;\n    try {\n        session = packageInstaller.openSession(sessionId);\n\n        if (inPath != null) {\n            in = new FileInputStream(inPath);\n        }\n\n        out = session.openWrite(splitName, 0, sizeBytes);\n\n        int total = 0;\n        byte[] buffer = new byte[65536];\n        int c;\n        while ((c = in.read(buffer)) != -1) {\n            total += c;\n            out.write(buffer, 0, c);\n        }\n        session.fsync(out);\n\n        if (logSuccess) {\n            System.out.println(\"Success: streamed \" + total + \" bytes\");\n        }\n        return PackageInstaller.STATUS_SUCCESS;\n    } catch (IOException e) {\n        System.err.println(\"Error: failed to write; \" + e.getMessage());\n        return PackageInstaller.STATUS_FAILURE;\n    } finally {\n        try {\n            out.close();\n            in.close();\n            session.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n    }\n}\n\n\nprivate int doCommitSession(int sessionId, boolean logSuccess) throws RemoteException {\n    PackageInstaller.Session session = null;\n    try {\n        try {\n            session = packageInstaller.openSession(sessionId);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        session.commit(PendingIntent.getBroadcast(getApplicationContext(), sessionId,\n                new Intent(\"android.intent.action.MAIN\"), 0).getIntentSender());\n        System.out.println(\"install request sent\");\n\n        Log.d(TAG, \"doCommitSession: \" + packageInstaller.getMySessions());\n\n        Log.d(TAG, \"doCommitSession: after session commit \");\n\n        return 1;\n    } finally {\n        session.close();\n    }\n}\n\n\n\nprivate static class InstallParams {\n    PackageInstaller.SessionParams sessionParams;\n}\n\nprivate InstallParams makeInstallParams(long totalSize ) {\n    final PackageInstaller.SessionParams sessionParams = new PackageInstaller.SessionParams(PackageInstaller.SessionParams.MODE_FULL_INSTALL);\n    final InstallParams params = new InstallParams();\n    params.sessionParams = sessionParams;\n    String opt;\n    sessionParams.setSize(totalSize);\n    return params;\n}\n</code></pre>\n\n<p>This is the list of commands that are actually received in Pm.java when we do adb install-multiple</p>\n\n<pre><code>04-01 16:04:40.626  4886  4886 D Pm      : run() called with: args = [[install-create, -S, 52488426]]\n04-01 16:04:41.862  4897  4897 D Pm      : run() called with: args = [[install-write, -S, 44334187, 824704264, 1_base.apk, -]]\n04-01 16:04:56.036  4912  4912 D Pm      : run() called with: args = [[install-write, -S, 1262034, 824704264, 2_split_config.en.apk, -]]\n04-01 16:04:57.584  4924  4924 D Pm      : run() called with: args = [[install-write, -S, 266117, 824704264, 3_split_config.hdpi.apk, -]]\n04-01 16:04:58.842  4936  4936 D Pm      : run() called with: args = [[install-write, -S, 6626088, 824704264, 4_split_config.x86.apk, -]]\n04-01 16:05:01.304  4948  4948 D Pm      : run() called with: args = [[install-commit, 824704264]]\n</code></pre>\n\n<p>So for apps which are not system priv-app, I don't know how can they can install split apks.\nPlay store being a system priv-app can use these apis and install split apks without any issues.</p>\n",
        "OwnerUserId": "2773112",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-04-01 13:36:29",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "3",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "55475988",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55212788",
        "CreationDate": "2019-04-02 13:27:18",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<p>If you have root, you can use this code.</p>\n\n<p>Please get the read/write sdcard permission.(via runtime permissions or permission granted from settings app) before executing this code.\nairbnb apk was successfully installed after running this code.</p>\n\n<p>Calling this function with args \"/split-apks/\" ,  I have placed the airbnb split apks in a directory in /sdcard/split-apks/.</p>\n\n<pre><code>installApk(\"/split-apks/\");\n\n\n public void installApk(String apkFolderPath)\n{\n    PackageInstaller packageInstaller =  getPackageManager().getPackageInstaller();\n    HashMap&lt;String, Long&gt; nameSizeMap = new HashMap&lt;&gt;();\n    long totalSize = 0;\n\n    File folder = new File(Environment.getExternalStorageDirectory().getPath()+ apkFolderPath);\n    File[] listOfFiles = folder.listFiles();\n    for (int i = 0; i &lt; listOfFiles.length; i++) {\n        if (listOfFiles[i].isFile()) {\n            System.out.println(\"File \" + listOfFiles[i].getName());\n            nameSizeMap.put(listOfFiles[i].getName(),listOfFiles[i].length());\n            totalSize += listOfFiles[i].length();\n        }\n    }\n\n    String su = \"/system/xbin/su\";\n\n\n    final String[] pm_install_create = new String[]{su, \"-c\", \"pm\" ,\"install-create\", \"-S\", Long.toString(totalSize) };\n    execute(null, pm_install_create);\n\n    List&lt;PackageInstaller.SessionInfo&gt; sessions = packageInstaller.getAllSessions();\n\n    int sessId = sessions.get(0).getSessionId();\n\n    String sessionId = Integer.toString(sessId);\n\n\n    for(Map.Entry&lt;String,Long&gt; entry : nameSizeMap.entrySet())\n    {\n        String[] pm_install_write = new String[]{su, \"-c\", \"pm\" ,\"install-write\", \"-S\", Long.toString(entry.getValue()),sessionId, entry.getKey(), Environment.getExternalStorageDirectory().getPath()+apkFolderPath+ entry.getKey()};\n\n        execute(null,pm_install_write);\n\n    }\n\n    String[] pm_install_commit  = new String[]{su, \"-c\", \"pm\" ,\"install-commit\", sessionId};\n\n\n    execute(null, pm_install_commit);\n\n}\npublic String execute(Map&lt;String, String&gt; environvenmentVars, String[] cmd) {\n\n    boolean DEBUG = true;\n    if (DEBUG)\n        Log.d(\"log\",\"command is \" + Arrays.toString(cmd));\n\n    try {\n        Process process = Runtime.getRuntime().exec(cmd);\n        if (DEBUG)\n            Log.d(\"log\", \"process is \" + process);\n\n        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n        if (DEBUG)\n            Log.d(\"log\", \"bufferreader is \" + reader);\n\n        if (DEBUG)\n            Log.d(\"log\", \"readline \" + reader.readLine());\n        StringBuffer output = new StringBuffer();\n\n        char[] buffer = new char[4096];\n        int read;\n\n        while ((read = reader.read(buffer)) &gt; 0) {\n            output.append(buffer, 0, read);\n        }\n\n        reader.close();\n\n        process.waitFor();\n        if (DEBUG)\n            Log.d(\"log\", output.toString());\n\n        return output.toString();\n\n    }\n\n    catch (Exception e)\n    {\n        e.printStackTrace();\n    }\n\n    return null;\n\n}\n</code></pre>\n\n<hr>\n\n<p>EDIT: same code, but in Kotlin, as it's shorter:</p>\n\n<p>sample usage: </p>\n\n<pre><code>Foo.installApk(context,fullPathToSplitApksFolder)\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>        AsyncTask.execute {\n            Foo.installApk(this@MainActivity,\"/storage/emulated/0/Download/split\")\n        }\n</code></pre>\n\n<p>Code:</p>\n\n<pre><code>object Foo {\n    @WorkerThread\n    @JvmStatic\n    fun installApk(context: Context, apkFolderPath: String) {\n        val packageInstaller = context.packageManager.packageInstaller\n        val nameSizeMap = HashMap&lt;File, Long&gt;()\n        var totalSize: Long = 0\n        val folder = File(apkFolderPath)\n        val listOfFiles = folder.listFiles().filter { it.isFile &amp;&amp; it.name.endsWith(\".apk\") }\n        for (file in listOfFiles) {\n            Log.d(\"AppLog\", \"File \" + file.name)\n            nameSizeMap[file] = file.length()\n            totalSize += file.length()\n        }\n        val su = \"su\"\n        val pmInstallCreate = arrayOf(su, \"-c\", \"pm\", \"install-create\", \"-S\", totalSize.toString())\n        execute(pmInstallCreate)\n        val sessions = packageInstaller.allSessions\n        val sessionId = Integer.toString(sessions[0].sessionId)\n        for ((file, value) in nameSizeMap) {\n            val pmInstallWrite = arrayOf(su, \"-c\", \"pm\", \"install-write\", \"-S\", value.toString(), sessionId, file.name, file.absolutePath)\n            execute(pmInstallWrite)\n        }\n        val pmInstallCommit = arrayOf(su, \"-c\", \"pm\", \"install-commit\", sessionId)\n        execute(pmInstallCommit)\n    }\n\n    @WorkerThread\n    @JvmStatic\n    private fun execute(cmd: Array&lt;String&gt;): String? {\n        Log.d(\"AppLog\", \"command is \" + Arrays.toString(cmd))\n        try {\n            val process = Runtime.getRuntime().exec(cmd)\n            Log.d(\"AppLog\", \"process is $process\")\n            val reader = BufferedReader(InputStreamReader(process.inputStream))\n            Log.d(\"AppLog\", \"bufferreader is $reader\")\n            Log.d(\"AppLog\", \"readline \" + reader.readLine())\n            val output = StringBuilder()\n            val buffer = CharArray(4096)\n            var read: Int\n            while (true) {\n                read = reader.read(buffer)\n                if (read &lt;= 0)\n                    break\n                output.append(buffer, 0, read)\n            }\n            reader.close()\n            process.waitFor()\n            Log.d(\"AppLog\", output.toString())\n            return output.toString()\n        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n        return null\n    }\n}\n</code></pre>\n",
        "OwnerUserId": "2773112",
        "OwnerDisplayName": "",
        "LastEditorUserId": "878126",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-04-13 20:37:05",
        "LastActivityDate": "2019-04-13 20:37:05",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "16",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "55672367",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55212788",
        "CreationDate": "2019-04-14 05:56:44",
        "DeletionDate": "",
        "Score": "2",
        "ViewCount": "",
        "Body": "<p>No root required implementation \nCheck this git hub link: <a href=\"https://github.com/nkalra0123/splitapkinstall\" rel=\"nofollow noreferrer\">https://github.com/nkalra0123/splitapkinstall</a></p>\n\n<p>We have to create a service and pass that handle in session.commit()</p>\n\n<pre><code> Intent callbackIntent = new Intent(getApplicationContext(), APKInstallService.class);\n PendingIntent pendingIntent = PendingIntent.getService(getApplicationContext(), 0, callbackIntent, 0);\n session.commit(pendingIntent.getIntentSender());\n</code></pre>\n\n<hr>\n\n<p>EDIT: Since the solution works, but not really published here, I've decided to write it before marking it as correct solution. Here's the code:</p>\n\n<p><strong>manifest</strong></p>\n\n<pre><code>&lt;manifest package=\"com.nitin.apkinstaller\" xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:tools=\"http://schemas.android.com/tools\"&gt;\n  &lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/&gt;\n  &lt;uses-permission android:name=\"android.permission.REQUEST_INSTALL_PACKAGES\"/&gt;\n  &lt;uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/&gt;\n  &lt;application\n    android:allowBackup=\"true\" android:icon=\"@mipmap/ic_launcher\" android:label=\"@string/app_name\" android:roundIcon=\"@mipmap/ic_launcher_round\" android:supportsRtl=\"true\"\n    android:theme=\"@style/AppTheme\" tools:ignore=\"AllowBackup,GoogleAppIndexingWarning\"&gt;\n    &lt;activity\n      android:name=\".MainActivity\" android:label=\"@string/app_name\" android:theme=\"@style/AppTheme.NoActionBar\"&gt;\n      &lt;intent-filter&gt;\n        &lt;action android:name=\"android.intent.action.MAIN\"/&gt;\n\n        &lt;category android:name=\"android.intent.category.LAUNCHER\"/&gt;\n      &lt;/intent-filter&gt;\n    &lt;/activity&gt;\n\n    &lt;service android:name=\".APKInstallService\"/&gt;\n  &lt;/application&gt;\n&lt;/manifest&gt;\n</code></pre>\n\n<p><strong>APKInstallService</strong></p>\n\n<pre><code>class APKInstallService : Service() {\n    override fun onStartCommand(intent: Intent, flags: Int, startId: Int): Int {\n        when (if (intent.hasExtra(PackageInstaller.EXTRA_STATUS)) null else intent.getIntExtra(PackageInstaller.EXTRA_STATUS, 0)) {\n            PackageInstaller.STATUS_PENDING_USER_ACTION -&gt; {\n                Log.d(\"AppLog\", \"Requesting user confirmation for installation\")\n                val confirmationIntent = intent.getParcelableExtra&lt;Intent&gt;(Intent.EXTRA_INTENT)\n                confirmationIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\n                try {\n                    startActivity(confirmationIntent)\n                } catch (e: Exception) {\n                }\n            }\n            PackageInstaller.STATUS_SUCCESS -&gt; Log.d(\"AppLog\", \"Installation succeed\")\n            else -&gt; Log.d(\"AppLog\", \"Installation failed\")\n        }\n        stopSelf()\n        return START_NOT_STICKY\n    }\n\n    override fun onBind(intent: Intent): IBinder? {\n        return null\n    }\n}\n</code></pre>\n\n<p><strong>MainActivity</strong></p>\n\n<pre><code>class MainActivity : AppCompatActivity() {\n    private lateinit var packageInstaller: PackageInstaller\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        val toolbar = findViewById&lt;Toolbar&gt;(R.id.toolbar)\n        setSupportActionBar(toolbar)\n        val fab = findViewById&lt;FloatingActionButton&gt;(R.id.fab)\n        fab.setOnClickListener {\n            packageInstaller = packageManager.packageInstaller\n            val ret = installApk(\"/storage/emulated/0/Download/split/\")\n            Log.d(\"AppLog\", \"onClick: return value is $ret\")\n        }\n\n    }\n\n    private fun installApk(apkFolderPath: String): Int {\n        val nameSizeMap = HashMap&lt;String, Long&gt;()\n        var totalSize: Long = 0\n        var sessionId = 0\n        val folder = File(apkFolderPath)\n        val listOfFiles = folder.listFiles()\n        try {\n            for (listOfFile in listOfFiles) {\n                if (listOfFile.isFile) {\n                    Log.d(\"AppLog\", \"installApk: \" + listOfFile.name)\n                    nameSizeMap[listOfFile.name] = listOfFile.length()\n                    totalSize += listOfFile.length()\n                }\n            }\n        } catch (e: Exception) {\n            e.printStackTrace()\n            return -1\n        }\n        val installParams = PackageInstaller.SessionParams(PackageInstaller.SessionParams.MODE_FULL_INSTALL)\n        installParams.setSize(totalSize)\n        try {\n            sessionId = packageInstaller.createSession(installParams)\n            Log.d(\"AppLog\",\"Success: created install session [$sessionId]\")\n            for ((key, value) in nameSizeMap) {\n                doWriteSession(sessionId, apkFolderPath + key, value, key)\n            }\n            doCommitSession(sessionId)\n            Log.d(\"AppLog\",\"Success\")\n        } catch (e: IOException) {\n            e.printStackTrace()\n        }\n        return sessionId\n    }\n\n    private fun doWriteSession(sessionId: Int, inPath: String?, sizeBytes: Long, splitName: String): Int {\n        var inPathToUse = inPath\n        var sizeBytesToUse = sizeBytes\n        if (\"-\" == inPathToUse) {\n            inPathToUse = null\n        } else if (inPathToUse != null) {\n            val file = File(inPathToUse)\n            if (file.isFile)\n                sizeBytesToUse = file.length()\n        }\n        var session: PackageInstaller.Session? = null\n        var inputStream: InputStream? = null\n        var out: OutputStream? = null\n        try {\n            session = packageInstaller.openSession(sessionId)\n            if (inPathToUse != null) {\n                inputStream = FileInputStream(inPathToUse)\n            }\n            out = session!!.openWrite(splitName, 0, sizeBytesToUse)\n            var total = 0\n            val buffer = ByteArray(65536)\n            var c: Int\n            while (true) {\n                c = inputStream!!.read(buffer)\n                if (c == -1)\n                    break\n                total += c\n                out!!.write(buffer, 0, c)\n            }\n            session.fsync(out!!)\n            Log.d(\"AppLog\", \"Success: streamed $total bytes\")\n            return PackageInstaller.STATUS_SUCCESS\n        } catch (e: IOException) {\n            Log.e(\"AppLog\", \"Error: failed to write; \" + e.message)\n            return PackageInstaller.STATUS_FAILURE\n        } finally {\n            try {\n                out?.close()\n                inputStream?.close()\n                session?.close()\n            } catch (e: IOException) {\n                e.printStackTrace()\n            }\n        }\n    }\n\n    private fun doCommitSession(sessionId: Int) {\n        var session: PackageInstaller.Session? = null\n        try {\n            try {\n                session = packageInstaller.openSession(sessionId)\n                val callbackIntent = Intent(applicationContext, APKInstallService::class.java)\n                val pendingIntent = PendingIntent.getService(applicationContext, 0, callbackIntent, 0)\n                session!!.commit(pendingIntent.intentSender)\n                session.close()\n                Log.d(\"AppLog\", \"install request sent\")\n                Log.d(\"AppLog\", \"doCommitSession: \" + packageInstaller.mySessions)\n                Log.d(\"AppLog\", \"doCommitSession: after session commit \")\n            } catch (e: IOException) {\n                e.printStackTrace()\n            }\n\n        } finally {\n            session!!.close()\n        }\n    }\n}\n</code></pre>\n",
        "OwnerUserId": "2773112",
        "OwnerDisplayName": "",
        "LastEditorUserId": "878126",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-04-20 09:49:38",
        "LastActivityDate": "2019-04-20 09:49:38",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "8",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57798602",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55212788",
        "CreationDate": "2019-09-05 04:50:43",
        "DeletionDate": "",
        "Score": "-1",
        "ViewCount": "",
        "Body": "<blockquote>\n  <p>What is the way to merge those all into one APK file?</p>\n</blockquote>\n\n<p>After installing (see question 2), use eg TotalCommander to copy the apk from\n 'installed apps'</p>\n\n<blockquote>\n  <p>Is it possible to install split APK files without root and without PC ? </p>\n</blockquote>\n\n<p>Use any terminal app, then:</p>\n\n<pre><code> pm install &lt;split1&gt; &lt;split2&gt; ...\n</code></pre>\n",
        "OwnerUserId": "12023163",
        "OwnerDisplayName": "",
        "LastEditorUserId": "4099593",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-09-05 05:13:39",
        "LastActivityDate": "2019-09-05 05:13:39",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "1",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56582792",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56582681",
        "CreationDate": "2019-06-13 14:29:48",
        "DeletionDate": "",
        "Score": "13",
        "ViewCount": "",
        "Body": "<p>More concise solution, but still with unwanted <strong>side effect</strong> in the <code>filter</code> call:</p>\n\n<pre><code>Set&lt;K&gt; removedKeys =\n    keysToRemove.stream()\n                .filter(fromKeys::remove)\n                .collect(Collectors.toSet());\n</code></pre>\n\n<p><a href=\"https://docs.oracle.com/javase/10/docs/api/java/util/Set.html#remove(java.lang.Object)\" rel=\"noreferrer\"><code>Set.remove</code></a> already returns <code>true</code> if the <code>set</code> contained the specified element.</p>\n\n<p>&nbsp;P.S. In the end, I would probably stick with the \"old-school code\".</p>\n",
        "OwnerUserId": "2668232",
        "OwnerDisplayName": "",
        "LastEditorUserId": "2668232",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-06-13 20:06:44",
        "LastActivityDate": "2019-06-13 20:06:44",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "1",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56582843",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56582681",
        "CreationDate": "2019-06-13 14:32:42",
        "DeletionDate": "",
        "Score": "4",
        "ViewCount": "",
        "Body": "<p>You can use the stream and the removeAll</p>\n\n<pre><code>Set&lt;K&gt; fromKeys = from.keySet();\nSet&lt;K&gt; removedKeys = keysToRemove.stream()\n    .filter(fromKeys::contains)\n    .collect(Collectors.toSet());\nfromKeys.removeAll(removedKeys);\nreturn removedKeys;\n</code></pre>\n",
        "OwnerUserId": "7362988",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-06-13 14:32:42",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56582923",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56582681",
        "CreationDate": "2019-06-13 14:36:56",
        "DeletionDate": "",
        "Score": "4",
        "ViewCount": "",
        "Body": "<p>You can use this:</p>\n\n<pre><code>Set&lt;K&gt; removedKeys = keysToRemove.stream()\n        .filter(from::containsKey)\n        .collect(Collectors.toSet());\nremovedKeys.forEach(from::remove);\n</code></pre>\n\n<p>It's similar to <em>Oleksandr</em>'s answer, but avoiding the side effect. But I would stick with that answer, if you are looking for performance.</p>\n\n<p>Alternatively you could use <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#peek-java.util.function.Consumer-\" rel=\"nofollow noreferrer\"><code>Stream.peek()</code></a> for the remove, but be careful with other side effects (see the comments). So I would not recommend that.</p>\n\n<pre><code>Set&lt;K&gt; removedKeys = keysToRemove.stream()\n        .filter(from::containsKey)\n        .peek(from::remove)\n        .collect(Collectors.toSet());\n</code></pre>\n",
        "OwnerUserId": "9662601",
        "OwnerDisplayName": "",
        "LastEditorUserId": "9662601",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-06-13 18:44:32",
        "LastActivityDate": "2019-06-13 18:44:32",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "3",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56583721",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56582681",
        "CreationDate": "2019-06-13 15:19:00",
        "DeletionDate": "",
        "Score": "5",
        "ViewCount": "",
        "Body": "<p>I wouldn\u2019t use Streams for this.  I would take advantage of <a href=\"https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/Collection.html#retainAll%28java.util.Collection%29\" rel=\"nofollow noreferrer\">retainAll</a>:</p>\n\n<pre><code>public Set&lt;K&gt; removeEntries(Map&lt;K, V&gt; from) {\n    Set&lt;K&gt; matchingKeys = new HashSet&lt;&gt;(from.keySet());\n    matchingKeys.retainAll(keysToRemove);\n\n    from.keySet().removeAll(matchingKeys);\n\n    return matchingKeys;\n}\n</code></pre>\n",
        "OwnerUserId": "1831987",
        "OwnerDisplayName": "",
        "LastEditorUserId": "1831987",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-06-13 15:47:24",
        "LastActivityDate": "2019-06-13 15:47:24",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "3",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54176770",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54044022",
        "CreationDate": "2019-01-14 06:41:25",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<p>In my environment (Ubuntu 16.04, 4GB RAM, Python 3.5.2) the fastest method was (the prototypical<sup>1</sup>) <code>csv_reader_5</code> (taken from <a href=\"https://stackoverflow.com/a/54166567/6394138\">U9-Forward's answer</a>) which ran only less than 25% slower than reading the entire CSV file with no conversions. I improved that approach by implementing a filter/wrapper that replaces the char in the <code>read()</code> method:</p>\n\n<pre><code>class SingleCharReplacingFilter:\n\n    def __init__(self, reader, oldchar, newchar):\n        def proxy(obj, attr):\n            a = getattr(obj, attr)\n            if attr in ('read'):\n                def f(*args):\n                    return a(*args).replace(oldchar, newchar)\n                return f\n            else:\n                return a\n\n        for a in dir(reader):\n            if not a.startswith(\"_\") or a == '__iter__':\n                setattr(self, a, proxy(reader, a))\n\ndef csv_reader_6(x):\n    with x as fin:\n        return pd.read_csv(SingleCharReplacingFilter(fin, \";\", \",\"),\n                            sep=',', header=None, usecols=[3, 4, 5])\n</code></pre>\n\n<p>The result is a little better performance compared to reading the entire CSV file with no conversions:</p>\n\n<pre><code>In [3]: %timeit pd.read_csv(StringIO(x))\n605 ms \u00b1 3.24 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\n\nIn [4]: %timeit csv_reader_5(StringIO(x))\n733 ms \u00b1 3.49 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\n\nIn [5]: %timeit csv_reader_6(StringIO(x))\n568 ms \u00b1 2.98 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\n</code></pre>\n\n<hr>\n\n<p><sup>1</sup> I call it prototypical because it assumes that the input stream is of <code>StringIO</code> type (since it calls <code>.getvalue()</code> on it).</p>\n",
        "OwnerUserId": "6394138",
        "OwnerDisplayName": "",
        "LastEditorUserId": "6394138",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-01-16 08:50:56",
        "LastActivityDate": "2019-01-16 08:50:56",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "3",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54177234",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54044022",
        "CreationDate": "2019-01-14 07:28:07",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<p>Python has powerfull features to manipulate data, but don't expect performance using python.When performance is needed , C and C++ are your friend .\nAny fast library in python is written in C/C++. It is quite easy to use C/C++ code in python, have a look at swig utility (<a href=\"http://www.swig.org/tutorial.html\" rel=\"nofollow noreferrer\">http://www.swig.org/tutorial.html</a>) . You can write a c++ class that may contain some fast utilities that you will use in your python code when needed. </p>\n",
        "OwnerUserId": "1033326",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-01-14 07:28:07",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57662095",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57661132",
        "CreationDate": "2019-08-26 17:04:22",
        "DeletionDate": "",
        "Score": "3",
        "ViewCount": "",
        "Body": "<p><strong>There is no way to do what you describe without GNU extensions.</strong></p>\n\n<p>This portable approach gives a hard error (because <code>_Static_assert</code> requires a constant expression):</p>\n\n<pre><code>#define thefun(a, b) \\\n({ \\\n   _Static_assert(b == 0, \\\n       \"'thefun' called with second argument not NULL\"); \\\n   real_thefun(a, b); \\\n})\n</code></pre>\n\n<p>However, there is <em>one</em> fortified-style approach that works on both GCC and Clang:</p>\n\n<pre><code>extern void thefun_called_with_nonnull_arg (void)\n    __attribute__((__deprecated__(\n        \"'thefun' called with second argument not NULL\")));\n\nextern int real_thefun (void *, void *);\n\nstatic inline int\nthefun (void *a, void *b)\n{\n   if (!__builtin_constant_p((unsigned short)(unsigned long)b) || b != 0)\n       thefun_called_with_nonnull_arg();\n   return real_thefun(a, b);\n}\n\nint warning_expected (void *a, void *b)\n{\n    return thefun(a, b);\n}\nint warning_not_expected (void *a)\n{\n    return thefun(a, 0);\n}\n</code></pre>\n\n<p>Tested with GCC 8.3.0 and Clang 8.0.0.</p>\n\n<p>See <a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=91554\" rel=\"nofollow noreferrer\">GCC bug report #91554</a> for more information about the need for the casts.</p>\n",
        "OwnerUserId": "10795151",
        "OwnerDisplayName": "",
        "LastEditorUserId": "10795151",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-08-29 17:59:07",
        "LastActivityDate": "2019-08-29 17:59:07",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57665148",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57661132",
        "CreationDate": "2019-08-26 21:27:19",
        "DeletionDate": "",
        "Score": "4",
        "ViewCount": "",
        "Body": "<p>I finally managed to get it to work:</p>\n\n<pre><code>if (!__builtin_constant_p((int)(uintptr_t)b) || b != 0) {\n</code></pre>\n\n<p>With this you get only one warning.</p>\n\n<p>It seems that <code>gcc</code> can't do <code>__builtin_constant_p</code> on a pointer type. The <code>__builtin_constant_p(b)</code> always returns 0, so the warn function is always linked. Casting <code>b</code> to <code>int</code> strangely works. Although it looses precision in the pointer value, we don't care about it, cause we only check if it's a constant.</p>\n",
        "OwnerUserId": "9072753",
        "OwnerDisplayName": "",
        "LastEditorUserId": "9072753",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-08-27 10:56:43",
        "LastActivityDate": "2019-08-27 10:56:43",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "7",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57727590",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57465459",
        "CreationDate": "2019-08-30 13:22:09",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<p>Just going by the example, the relevant text is (Bold is mine):</p>\n\n<blockquote>\n  <p>A byte of storage is reachable through <strong>a pointer value that points to\n  an object Y</strong> if it is within the storage occupied by Y</p>\n</blockquote>\n\n<p>Due to the <em>placement new</em>, the pointer value now points to the \"newly placed\" object, and hence the reachability is of that. </p>\n\n<p>I would say that is clear enough as it stands.</p>\n",
        "OwnerUserId": "2261538",
        "OwnerDisplayName": "",
        "LastEditorUserId": "2261538",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-08-30 13:29:50",
        "LastActivityDate": "2019-08-30 13:29:50",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54401852",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54401851",
        "CreationDate": "2019-01-28 12:16:53",
        "DeletionDate": "",
        "Score": "34",
        "ViewCount": "",
        "Body": "<p>Architecturally, React Native (RN) and Flutter are very similar.</p>\n\n<p>What Flutter calls a \"Widget\" is the strict equivalent to React's \"Component\". That's what Flutter means when it says its inspired from React.</p>\n\n<p>The difference between them lies in the other aspects of the frameworks:</p>\n\n<h3>Interpreted Javascript VS Compiled Dart</h3>\n\n<p>Flutter uses Dart, a typed language that offers both  \"Just in time\" (JIT) and \"Ahead of time\" (AOT) compilation (with tree-shaking included)</p>\n\n<p>In development, Flutter uses JIT compilation to empower hot-reload. And for production builds, it uses AOT compilation for better performances.</p>\n\n<hr>\n\n<p>React-Native uses Javascript enhanced by some syntax sugar called JSX.</p>\n\n<p>JSX being a different language, it compiles to JS, then evaluated at runtime. </p>\n\n<h3>Bridge to native VS Complete rewrite</h3>\n\n<p>React native is built <em>on the top of native</em>. </p>\n\n<p>When using a button or a text in React Native, you are manipulating the official object used for native Android/iOS apps. </p>\n\n<p>We can consider React as a common language between Android/iOS to declare layouts \u2013 but fundamentally the applications are different with potential inconsistencies.</p>\n\n<p>It's is not <em>true</em> cross-platform. But at the same time, it allows better interoperability with native elements.</p>\n\n<hr>\n\n<p>Flutter is the opposite. The goal of Flutter is to use as few native elements as possible. </p>\n\n<p>Flutter requests to the OS a window, and then entirely manage its content using Dart and Skia (it's c++ graphics engine).</p>\n\n<p>It has a few implications:</p>\n\n<ul>\n<li>All the UI logic had to be reimplemented by Flutter. Be it scroll, touch events, animations, ...</li>\n<li>The application is written entirely in Dart, even deep into the lower layers. It means that whatever the platform is, it's always the same code that is executed.</li>\n<li>Potentially anything that can run Dart code and create a window can run Flutter and apps should work with little to no change. As such, web is in progress ( <a href=\"https://medium.com/flutter-io/hummingbird-building-flutter-for-the-web-e687c2a023a8\" rel=\"noreferrer\">Hummingbird</a>) and basic support of desktops is available.  </li>\n</ul>\n\n<p>To some extent, we can compare Flutter to a webview/game engine, but optimized for casual applications.</p>\n",
        "OwnerUserId": "8394265",
        "OwnerDisplayName": "",
        "LastEditorUserId": "8394265",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-01-29 13:31:28",
        "LastActivityDate": "2019-01-29 13:31:28",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "8",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54405251",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54401851",
        "CreationDate": "2019-01-28 15:30:20",
        "DeletionDate": "",
        "Score": "26",
        "ViewCount": "",
        "Body": "<p>Remi already has a couple good points. I have one more.</p>\n\n<h1>Interpreted with bridges - vs. native and no bridges</h1>\n\n<p>Despite what the name might imply, React Native apps are <strong>not</strong> compiled to native code. React Native apps interpret Javascript code <strong>during runtime</strong>, and component updates in a React Native app go <strong>through a bridge</strong> to the native view counterpart. This might slow things down a little bit and be a bottleneck. </p>\n\n<p>On the contrary, Flutter apps (on release mode) are <strong>compiled to native code</strong> and <strong>don't require a bridge</strong> for manipulating the UI. This in turn, at least in theory, will be more performant - there's no need to do roundtrips to the <em>native land</em> to make simple UI changes. Not to mention that release Flutter code is natively compiled and there are no interpreters involved.</p>\n\n<h2>Dance monkey, dance</h2>\n\n<p>Now that we know that release mode Flutter apps don't have an interpreter or the need for bridges for UI manipulations, let's see what those two things actually are in the first place.</p>\n\n<p>We'll do this with a highly hypothetical example app. Our React Native app has a button that makes a monkey dance on the screen. In React Native, our button and the dancing monkey components are written in Javascript and React. </p>\n\n<h3>Interpreters</h3>\n\n<p>Since Javascript is not a first class language on Android or iOS, your React Native app includes a <em>Javascript interpreter</em> that <strong>interprets</strong> your Javascript code <strong>in runtime</strong>. Without the interpreter, you wouldn't be able to write apps with Javascript at all - even a simple <code>console.log('Hello World!')</code> wouldn't work.</p>\n\n<p>According to the <a href=\"https://facebook.github.io/react-native/docs/javascript-environment#javascript-runtime\" rel=\"noreferrer\">React Native docs</a>, in <em>\"most cases\"</em>, the Javascript code will be interpreted with JavascriptCore.</p>\n\n<h3>Bridges</h3>\n\n<p>Under the hood, React Native uses the native Android Views and iOS UIViews for displaying UI components (such as dancing monkeys) on the screen. But since the UI parts of the Android and iOS SDKs don't use Javascript, you can't make the monkey dance by using Javascript alone. </p>\n\n<p>This is where <strong>a bridge</strong> comes into play. On the other side of the bridge are your React Native components and logic, written in Javascript. On the opposite side, we have the host Android/iOS app that renders native views into the screen. \nFrom now on, let's call the two sides of the bridge as the <strong>Javascript land</strong> and the <strong>native land</strong>.</p>\n\n<p>So, what happens when the user clicks on our \"dance, monkey, dance!\" button?</p>\n\n<ol>\n<li>The native Android/iOS view <strong>dispatches an onclick event</strong>, which <strong>goes over the bridge</strong> to the <strong>Javascript land</strong>.</li>\n<li>Our onclick listener written in Javascript gets invoked. It is a simple call that toggles a boolean inside the component. Something along the lines of <code>setState(() {isMonkeyDancing = true})</code> or similar.</li>\n<li>React sees that something has changed. It comes up with an updated <strong>representation of UI elements</strong> that has a dancing monkey. The representation is just a tree of plain Javascript objects that describes the updated state of the UI.</li>\n<li>The Javascript object tree gets <strong>serialized and sent over the bridge</strong> to the <strong>native land</strong>.</li>\n<li>The host app receives the serialized object tree and deserializes it. Now it can update the native Android/iOS view to <strong>match the deserialized UI representation</strong>. Our monkey is now dancing and our user is eternally happy.</li>\n</ol>\n\n<p>So in this example, one button click required going over the bridge two times. </p>\n\n<p>Actually, it's three - just simply rendering a button initially is a call across the bridge itself.\nIn an app that is more than just one button and a dancing monkey, you're likely to go over the bridge <strong>a lot more</strong>. And every time you do, it requires serializing data and sending it over from one side to the another. </p>\n\n<p>This is slower than just coming up with the UI representation and <strong>updating the UI</strong> with that <strong>directly</strong>. Additionally, there's a cost of interpreting Javascript in runtime compared to having the code compiled ahead of time.</p>\n\n<h2>The bottom line</h2>\n\n<p>Since Flutter is essentially a portable rendering engine, Flutter <strong>doesn't need a bridge</strong> to do an UI update. And because of that, UI updates, at least in theory, are faster. That's one reason why building apps with complex animations or things like <a href=\"https://www.2dimensions.com/about-flare\" rel=\"noreferrer\">Flare</a>, <a href=\"https://www.spritewidget.com/\" rel=\"noreferrer\">SpriteWidget</a>, or even games would be more lucrative with Flutter compared to React Native. </p>\n\n<p>And because Flutter on release mode is AOT compiled, Flutter doesn't need an interpreter either. That's the difference between Flutter and React Native.</p>\n",
        "OwnerUserId": "940036",
        "OwnerDisplayName": "",
        "LastEditorUserId": "940036",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-01-28 17:20:48",
        "LastActivityDate": "2019-01-28 17:20:48",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "3",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58900342",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54401851",
        "CreationDate": "2019-11-17 12:17:32",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<p>If you learn both technology in deep. So, you will find big differences:</p>\n\n<ol>\n<li>Programming language- Java Script and Dart</li>\n<li>Technical architecture- Flex and Skia.</li>\n<li>UI components and development API: Widget in flutter but views in React native.</li>\n<li>Developer productivity: Debugging is very easy in Flutter.</li>\n<li>Community: Big Community support in React Native. </li>\n<li>Documentation &amp; Toolkit: Flutter team have created simple duc for all widgets.</li>\n<li>Testing support: Flutter providing testing libs.</li>\n<li>DevOps and CI/CD: Flutter Providing CI/CD supports.</li>\n</ol>\n\n<p>There are more difference between <a href=\"https://www.developerlibs.com/2019/11/flutter-vs-react-native.html\" rel=\"nofollow noreferrer\">React Native and Flutter that you can read her</a>.</p>\n",
        "OwnerUserId": "3816476",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-11-17 12:17:32",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "60448145",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54401851",
        "CreationDate": "2020-02-28 08:50:19",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<blockquote>\n  <p>Flutter vs React Native: A Developer\u2019s Perspective</p>\n</blockquote>\n\n<p><code>React Native</code> by Facebook and <code>Flutter</code> by Google \u2013 two hot cross-platform app development technologies creating a buzz. In this post, we will compare both of them in detail from a developer\u2019s perspective.</p>\n\n<p><strong>What\u2019s Flutter and React Native?</strong></p>\n\n<p><code>React Native</code> is a project started by Facebook internally that they open-sourced in 2015. On the other side is <code>Flutter</code>, a project started by Google which they have been heavily promoting since I/O 2017. Both of these technologies help app developers build cross-platform apps faster by using a single programming language. React Native is already a mature tool and has a huge community, but Flutter also started seeing huge adoption rates since 2017. In this post, we will compare each of them using ten criteria:</p>\n\n<ul>\n<li>Programming language</li>\n<li>Technical architecture</li>\n<li>Installation</li>\n<li>Setup and project configuration</li>\n<li>UI components and development API</li>\n<li>Developer productivity</li>\n<li>Community support</li>\n<li>Testing support</li>\n<li>Build &amp; release automation support</li>\n<li>DevOps and CI/CD support</li>\n</ul>\n\n<p><strong>Programming Language</strong></p>\n\n<p>The key benefit of using a cross-platform mobile app development technology is the ability to use a single programming language to develop apps for both iOS and Android.</p>\n\n<ul>\n<li>React Native \u2014 JavaScript</li>\n<li>Flutter \u2014 Dart</li>\n</ul>\n\n<p><strong>Installation</strong></p>\n\n<p>The installation method should be straightforward without having too many complicated steps so that it could be easily learned by developers that are just starting with it.</p>\n\n<ul>\n<li>React Native - NPM</li>\n<li>Flutter - Binary Download from Source</li>\n</ul>\n\n<p><strong>UI Components and Development API</strong></p>\n\n<ul>\n<li>React Native - Less Components</li>\n<li>Flutter - Rich in Components</li>\n</ul>\n\n<p><strong>Conclusion</strong></p>\n\n<p>React Native and Flutter both have their pros and cons. Some of the industry experts have predicted that Flutter is the future of mobile app development. Considering the comparison above, it\u2019s clear that Flutter has entered the cross-platform mobile development race very strongly. Let\u2019s not predict the future but wait and watch!</p>\n",
        "OwnerUserId": "12092200",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2020-02-28 08:50:19",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56584064",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56582681",
        "CreationDate": "2019-06-13 15:38:14",
        "DeletionDate": "",
        "Score": "25",
        "ViewCount": "",
        "Body": "<p>The \u201cold-school code\u201d should rather be</p>\n\n<pre><code>public Set&lt;K&gt; removeEntries(Map&lt;K, ?&gt; from) {\n    Set&lt;K&gt; fromKeys = from.keySet(), removedKeys = new HashSet&lt;&gt;(keysToRemove);\n    removedKeys.retainAll(fromKeys);\n    fromKeys.removeAll(removedKeys);\n    return removedKeys;\n}\n</code></pre>\n\n<p>Since you said that <code>keysToRemove</code> is rather small, the copying overhead likely doesn\u2019t matter. Otherwise, use the loop, but don\u2019t do the hash lookup twice:</p>\n\n<pre><code>public Set&lt;K&gt; removeEntries(Map&lt;K, ?&gt; from) {\n    Set&lt;K&gt; fromKeys = from.keySet();\n    Set&lt;K&gt; removedKeys = new HashSet&lt;&gt;();\n    for(K keyToRemove : keysToRemove)\n        if(fromKeys.remove(keyToRemove)) removedKeys.add(keyToRemove);\n    return removedKeys;\n}\n</code></pre>\n\n<p>You can express the same logic as a stream as</p>\n\n<pre><code>public Set&lt;K&gt; removeEntries(Map&lt;K, ?&gt; from) {\n    return keysToRemove.stream()\n        .filter(from.keySet()::remove)\n        .collect(Collectors.toSet());\n}\n</code></pre>\n\n<p>but since this is a stateful filter, it is highly discouraged. A cleaner variant would be</p>\n\n<pre><code>public Set&lt;K&gt; removeEntries(Map&lt;K, ?&gt; from) {\n    Set&lt;K&gt; result = keysToRemove.stream()\n        .filter(from.keySet()::contains)\n        .collect(Collectors.toSet());\n    from.keySet().removeAll(result);\n    return result;\n}\n</code></pre>\n\n<p>and if you want to maximize the \u201cstreamy\u201d usage, you can replace <code>from.keySet().removeAll(result);</code> with <code>from.keySet().removeIf(result::contains)</code>, which is quiet expensive, as it is iterating over the larger map, or with <code>result.forEach(from.keySet()::remove)</code>, which doesn\u2019t have that disadvantage, but still, isn\u2019t more readable than <code>removeAll</code>.</p>\n\n<p>All in all, the \u201cold-school code\u201d is much better than that.</p>\n",
        "OwnerUserId": "2711488",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-06-13 15:38:14",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "10",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56585387",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56582681",
        "CreationDate": "2019-06-13 17:01:19",
        "DeletionDate": "",
        "Score": "3",
        "ViewCount": "",
        "Body": "<p>To add another variant to the approaches, one could also partition the keys and return the required <code>Set</code> as:</p>\n\n<pre><code>public Set&lt;K&gt; removeEntries(Map&lt;K, ?&gt; from) {\n    Map&lt;Boolean, Set&lt;K&gt;&gt; partitioned = keysToRemove.stream()\n            .collect(Collectors.partitioningBy(k -&gt; from.keySet().remove(k),\n                    Collectors.toSet()));\n    return partitioned.get(Boolean.TRUE);\n}\n</code></pre>\n",
        "OwnerUserId": "1746118",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-06-13 17:01:19",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "1",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54031805",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54031804",
        "CreationDate": "2019-01-04 00:48:57",
        "DeletionDate": "",
        "Score": "91",
        "ViewCount": "",
        "Body": "<p>The <code>??</code> double question mark operator means \"if null\". Take the following expression, for example.</p>\n\n<pre><code>String a = b ?? 'hello';\n</code></pre>\n\n<p>This means <code>a</code> equals <code>b</code>, but if <code>b</code> is null then <code>a</code> equals <code>'hello'</code>.</p>\n\n<p>Another related operator is <code>??=</code>. For example:</p>\n\n<pre><code>b ??= 'hello';\n</code></pre>\n\n<p>This means if <code>b</code> is null then set it equal to <code>hello</code>. Otherwise, don't change it.</p>\n\n<p><strong>Reference</strong></p>\n\n<ul>\n<li><a href=\"https://www.dartlang.org/guides/language/language-tour#operators\" rel=\"noreferrer\">A Tour of the Dart Language: Operators</a></li>\n<li><a href=\"http://blog.sethladd.com/2015/07/null-aware-operators-in-dart.html\" rel=\"noreferrer\">Null-aware operators in Dart</a></li>\n</ul>\n\n<p><strong>Terms</strong></p>\n\n<p>The <a href=\"https://news.dartlang.org/2015/08/dart-112-released-with-null-aware.html\" rel=\"noreferrer\">Dart 1.12 release news</a> collectively referred to the following as <em>null-aware operators</em>:</p>\n\n<ul>\n<li><code>??</code> -- if null operator</li>\n<li><code>??=</code> -- null-aware assignment</li>\n<li><code>x?.p</code> -- null-aware access</li>\n<li><code>x?.m()</code> -- null-aware method invocation</li>\n</ul>\n",
        "OwnerUserId": "3681880",
        "OwnerDisplayName": "",
        "LastEditorUserId": "3681880",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-04-25 18:00:29",
        "LastActivityDate": "2019-04-25 18:00:29",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "3",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56848729",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56782788",
        "CreationDate": "2019-07-02 08:53:44",
        "DeletionDate": "",
        "Score": "10",
        "ViewCount": "",
        "Body": "<p>Sideway text is possible using <code>RotatedBox</code>, which is enough for the text to correctly wrap as you'd expect.</p>\n\n<pre class=\"lang-dart prettyprint-override\"><code>Row(\n  children: &lt;Widget&gt;[\n    RotatedBox(\n      quarterTurns: 1,\n      child: Text(sample),\n    ),\n    Expanded(child: Text(sample)),\n    RotatedBox(\n      quarterTurns: -1,\n      child: Text(sample),\n    ),\n  ],\n),\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/UlKJL.gif\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/UlKJL.gif\" alt=\"enter image description here\"></a></p>\n\n<p>Similarly, Flutter now supports inline widgets inside text. This can be used to rotate smileys inside a text.</p>\n\n<pre class=\"lang-dart prettyprint-override\"><code>RotatedBox(\n  quarterTurns: 1,\n  child: RichText(\n    text: TextSpan(\n      text: 'Hello World',\n      style: DefaultTextStyle.of(context).style,\n      children: [\n        WidgetSpan(\n          child: RotatedBox(quarterTurns: -1, child: Text('\ud83d\ude03')),\n        )\n      ],\n    ),\n  ),\n),\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/xyIdj.gif\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/xyIdj.gif\" alt=\"enter image description here\"></a></p>\n",
        "OwnerUserId": "8394265",
        "OwnerDisplayName": "",
        "LastEditorUserId": "8394265",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-07-02 09:02:49",
        "LastActivityDate": "2019-07-02 09:02:49",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "4",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "55403422",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55402733",
        "CreationDate": "2019-03-28 17:14:45",
        "DeletionDate": "",
        "Score": "19",
        "ViewCount": "",
        "Body": "<p>Polymorphic recursion (where a function calls itself at a different type than the one at which it was called) <em>always</em> requires a type signature. The full explanation is in <a href=\"https://www.haskell.org/onlinereport/haskell2010/haskellch4.html#x10-810004.4.1\" rel=\"noreferrer\">Section 4.4.1</a> of the Haskell 2010 Report:</p>\n\n<blockquote>\n  <p>If a variable <code>f</code> is defined without providing a corresponding type signature declaration, then each use of <code>f</code> outside its own declaration group (see <a href=\"https://www.haskell.org/onlinereport/haskell2010/haskellch4.html#x10-880004.5\" rel=\"noreferrer\">Section 4.5</a>) is treated as having the corresponding inferred, or <em>principal</em> type. However, to ensure that type inference is still possible, the defining occurrence, and all uses of <code>f</code> within its declaration group must have the same monomorphic type (from which the principal type is obtained by generalization, as described in <a href=\"https://www.haskell.org/onlinereport/haskell2010/haskellch4.html#x10-900004.5.2\" rel=\"noreferrer\">Section 4.5.2</a>).</p>\n</blockquote>\n\n<p>The same section later presents an example of polymorphic recursion supported by a type signature.</p>\n\n<p>My understanding is that unaided type inference is generally undecidable in the presence of polymorphic recursion, so Haskell doesn't even try.</p>\n\n<p>In this case, the type checker starts with</p>\n\n<pre><code>w :: a\n</code></pre>\n\n<p>where <code>a</code> is a meta-variable. Since <code>fromInteger</code> is called with <code>w</code> as an argument within its own declaration (and therefore within its declaration group), the type checker unifies <code>a</code> with <code>Integer</code>. There are no variables left to generalize.</p>\n\n<p>A slight modification of your program gives a different result for the same reason:</p>\n\n<pre><code>v = fromIntegral v\n</code></pre>\n\n<p>By your original reasoning, Haskell would infer <code>v :: forall a. Num a =&gt; a</code>, defaulting the <code>v</code> on the RHS to type <code>Integer</code>:</p>\n\n<pre><code>v :: forall a. Num a =&gt; a\nv = fromIntegral (v :: Integer)\n</code></pre>\n\n<p>But instead, it starts with <code>v :: a</code>. Since <code>v</code> is passed to <code>fromIntegral</code>, it imposes <code>Integral a</code>. Finally, it generalizes <code>a</code>. In the end, the program turns out to be</p>\n\n<pre><code>v :: forall a. Integral a =&gt; a\nv = fromIntegral (v :: a)\n</code></pre>\n",
        "OwnerUserId": "1477667",
        "OwnerDisplayName": "",
        "LastEditorUserId": "1477667",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-03-28 22:02:17",
        "LastActivityDate": "2019-03-28 22:02:17",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "7",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57842757",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57842756",
        "CreationDate": "2019-09-08 14:20:35",
        "DeletionDate": "",
        "Score": "340",
        "ViewCount": "",
        "Body": "<h1>Why enable warnings?</h1>\n\n<p>C and C++ compilers are notoriously bad at reporting some common programmer mistakes <em>by default</em>, such as:</p>\n\n<ul>\n<li>forgetting to initialise a variable</li>\n<li>forgetting to <code>return</code> a value from a function</li>\n<li>arguments in <code>printf</code> and <code>scanf</code> families not matching the format string</li>\n<li>a function is used without being declared beforehand (C only)</li>\n</ul>\n\n<p>These can be detected and reported, just usually not by default; this feature must be explicitly requested via compiler options.</p>\n\n<h1>How to enable warnings?</h1>\n\n<p>This depends on your compiler. </p>\n\n<p>Microsoft C and C++ compilers understand switches like <code>/W1</code>, <code>/W2</code>, <code>/W3</code>, <code>/W4</code> and <code>/Wall</code>. Use at least <code>/W3</code>. <code>/W4</code> and <code>/Wall</code> may emit spurious warnings for system header files, but if your project compiles cleanly with one of these options, go for it. These options are mutually exclusive.</p>\n\n<p>Most other compilers understand options like <code>-Wall</code>, <code>-Wpedantic</code> and <code>-Wextra</code>. <code>-Wall</code> is essential and all the rest are recommended (note that, despite its name, <code>-Wall</code> only enables the most important warnings, not <em>all</em> of them). These options can be used separately or all together.</p>\n\n<p>Your IDE may have a way to enable these from the user interface. </p>\n\n<h1>Why treat warnings as errors? They are just warnings!</h1>\n\n<p>A compiler warning signals a potentially serious problem in your code. The problems listed above are almost always fatal; others may or may not be, but you want compilation to fail <em>even if</em> it turns out to be a false alarm. Investigate each warning, find the root cause, and fix it. In the case of a false alarm, work around it \u2014 that is, use a different language feature or construct so that the warning is no longer triggered. If this proves to be very hard, disable that particular warning on a case by case basis.</p>\n\n<p>You don't want to just leave warnings as warnings even if all of them are false alarms. It could be OK for very small projects where the total number of warnings emitted is less than 7. Anything more, and it's easy for a new warning to get lost in a flood of old familiar ones. Don't allow that. Just cause all your project to compile cleanly.</p>\n\n<p>Note this applies to program development. If you are releasing your project to the world in the source form, then it might be a good idea not to supply <code>-Werror</code> or equivalent in your <em>released</em> build script. People might try to build your project with a different version of the compiler, or with a different compiler altogether, which may have a different set of warnings enabled. You may want their build to succeed. It is still a good idea to keep the warnings enabled, so that people who see warning messages could send you bug reports or patches.</p>\n\n<h1>How to treat warnings as errors?</h1>\n\n<p>This is again done with compiler switches. <code>/WX</code> is for Microsoft, most others use <code>-Werror</code>. In either case, the compilation will fail if there are any warnings produced.</p>\n",
        "OwnerUserId": "775806",
        "OwnerDisplayName": "",
        "LastEditorUserId": "775806",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-09-10 18:59:30",
        "LastActivityDate": "2019-09-10 18:59:30",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "24",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56913798",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56782788",
        "CreationDate": "2019-07-06 11:46:30",
        "DeletionDate": "",
        "Score": "2",
        "ViewCount": "",
        "Body": "<p>If you make custom font with all symbols rotated by 180\u00b0 (hard part), then you can simple change <em>textDirection</em> to <em>TextDirection.rtl</em> (right-to-left) and rotate text by one quarter (not easy too).</p>\n",
        "OwnerUserId": "1891712",
        "OwnerDisplayName": "",
        "LastEditorUserId": "1891712",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-07-06 18:36:11",
        "LastActivityDate": "2019-07-06 18:36:11",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "3",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56933803",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56782788",
        "CreationDate": "2019-07-08 11:19:37",
        "DeletionDate": "",
        "Score": "-1",
        "ViewCount": "",
        "Body": "<p>Its Simple draw what you want </p>\n\n<p>Examples <a href=\"https://fireship.io/lessons/flutter-widget-positioning-guide/\" rel=\"nofollow noreferrer\">flutter-widget-positioning-guide</a></p>\n\n<p>then </p>\n\n<pre><code>Column(\n    children: [\n        MyWidget(),\n        MyWidget(),\n        MyWidget()\n    ]\n);\n\n// or swap a Column for a Row to flip the axis\n\nRow(children: [ ]);\n\n// and this is all just sugar for the Flex widget\nFlex(\n    direction: Axis.vertical&lt;--------------\n)\n</code></pre>\n",
        "OwnerUserId": "6183113",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-07-08 11:19:37",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56938333",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56782788",
        "CreationDate": "2019-07-08 15:38:49",
        "DeletionDate": "",
        "Score": "10",
        "ViewCount": "",
        "Body": "<p>This solution is based on a flex-box layout. It converts the string to a list of words and puts them in vertically rotated Text widgets. These are laid out with a <code>Wrap</code> widget set to <code>Axis.vertical</code>. The Wrap widget automatically handles words that need to wrap by putting them in the next column.</p>\n\n<pre><code>class HomePage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Padding(\n        padding: const EdgeInsets.all(8.0),\n        child: Wrap(\n          direction: Axis.vertical,\n          children: _getWords(),\n        ),\n      ),\n    );\n  }\n\n  List&lt;Widget&gt; _getWords() {\n    const text =\n        \"That's all \ud83d\ude09\ud83d\udc10 12345 One Two Three Four Five \u1838\u1822\u183a\u1822\u182b\u1827\u1833\u1822\u1836\u1820\u1802 \u1834\u1822\u182f\u1826\u182d\u1821\u1832\u1826 \u1828\u1821\u182a\u1832\u1821\u1837\u182c\u1821\u1822 \u1832\u1823\u182f\u1822 \u182a\u1822\u1834\u1822\u182d \u182a\u1823\u182f\u1820\u1822\u1803\";\n    var emoji = RegExp(r\"([\\u2200-\\u3300]|[\\uD83C-\\uD83E].)\");\n    List&lt;Widget&gt; res = [];\n    var words = text.split(\" \");\n    for (var word in words) {\n      var matches = emoji.allMatches(word);\n      if (matches.isEmpty) {\n        res.add(RotatedBox(quarterTurns: 1, child: Text(word + ' ')));\n      } else {\n        var parts = word.split(emoji);\n        int i = 0;\n        for (Match m in matches) {\n          res.add(RotatedBox(quarterTurns: 1, child: Text(parts[i++])));\n          res.add(Text(m.group(0)));\n        }\n        res.add(RotatedBox(quarterTurns: 1, child: Text(parts[i] + ' ')));\n      }\n    }\n    return res;\n  }\n}\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/FN0t0.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/FN0t0.png\" alt=\"enter image description here\"></a></p>\n",
        "OwnerUserId": "1891712",
        "OwnerDisplayName": "",
        "LastEditorUserId": "3681880",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-07-08 17:53:58",
        "LastActivityDate": "2019-07-08 17:53:58",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "60160539",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56782788",
        "CreationDate": "2020-02-11 00:52:23",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<p>I ended up creating a custom widget to handle text rendering. At the time of this writing it doesn't correctly rotate emoji and CJK characters, but it does handle orientation and line wrapping.</p>\n\n<ul>\n<li>The package is here: <a href=\"https://pub.dev/packages/mongol\" rel=\"nofollow noreferrer\">https://pub.dev/packages/mongol</a></li>\n<li>I described how I made the package here: <a href=\"https://www.raywenderlich.com/4562681-flutter-text-rendering\" rel=\"nofollow noreferrer\">https://www.raywenderlich.com/4562681-flutter-text-rendering</a></li>\n</ul>\n\n<p>It wasn't a trivial task, but it is flexible. Other visitors to this question can follow a similar pattern if the other answers don't meet your needs. </p>\n\n<p>If you would like more control over text rendering in Flutter, read <a href=\"https://medium.com/@suragch/my-first-disappointment-with-flutter-5f6967ba78bf\" rel=\"nofollow noreferrer\">My First Disappointment with Flutter</a> and add a comment to <a href=\"https://github.com/flutter/flutter/issues/35994\" rel=\"nofollow noreferrer\">this GitHub issue</a>.</p>\n",
        "OwnerUserId": "3681880",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2020-02-11 00:52:23",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58648094",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58647874",
        "CreationDate": "2019-10-31 16:59:35",
        "DeletionDate": "",
        "Score": "2",
        "ViewCount": "",
        "Body": "<p>It is only a requirement for sequence containers to support the construction from iterators that satisfy the criteria of implicit convertibility.</p>\n\n<p>This does not by itself disallow sequence containers to from supporting that construction from iterators that don't satisfy that criteria as far as I can tell<sup>1</sup>. There is explicit rule about that:</p>\n\n<blockquote>\n  <p>If the constructor ... is called with a type InputIterator that does not <em>qualify as an input iterator</em>, then the constructor shall not participate in overload resolution.</p>\n</blockquote>\n\n<p>It is unclear what \"qualify as an input iterator\" means exactly in the context. Is it informal way to express Cpp17InputIterator, or does it attempt to refer to requirements of i and j? I don't know. Whether it is allowed or not, standard doesn't have a strict requirement for detecting it:</p>\n\n<blockquote>\n  <p>[container.requirements.general]</p>\n  \n  <p>The behavior of certain container member functions and deduction guides depends on whether types qualify as input iterators or allocators.\n  The extent to which an implementation determines that a type cannot be an input iterator is unspecified, except that as a minimum integral types shall not qualify as input iterators. ...</p>\n</blockquote>\n\n<p>With the interpretation that any Cpp17InputIterator \"qualifies as an input iterator\", the example program would not be required to be ill-formed. But it is not guaranteed to be well-formed either.</p>\n\n<p><sup>1</sup>In such case, it might be considered a quality of implementation issue to warn when relying on it. On the other hand, this limitation to implicit conversions may be considered a <a href=\"https://cplusplus.github.io/LWG/issue3297\" rel=\"nofollow noreferrer\">defect</a>.</p>\n\n<hr>\n\n<p>P.S. This compiles without warnings in Clang (with libc++) and Msvc as well.</p>\n\n<p>P.P.S. This wording seems to have been added in C++11 (which is natural, as then were explicit constructors also introduced).</p>\n",
        "OwnerUserId": "2079303",
        "OwnerDisplayName": "",
        "LastEditorUserId": "2079303",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-10-31 17:35:30",
        "LastActivityDate": "2019-10-31 17:35:30",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "5",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54607078",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54602662",
        "CreationDate": "2019-02-09 14:17:42",
        "DeletionDate": "",
        "Score": "8",
        "ViewCount": "",
        "Body": "<p>What the cases have in common is not the appearance of the original view controller but the disappearance of the presented/pushed view controller. Therefore, one simple and clear solution seems to be a protocol-and-delegate architecture. Declare a pair of protocols, as follows:</p>\n\n<pre><code>protocol Home : class {\n    func comingHome()\n}\nprotocol Away : class {\n    var home : Home? {get set}\n}\nextension Away where Self : UIViewController {\n    func notifyComingHome() {\n        if self.isBeingDismissed || self.isMovingFromParent {\n            self.home?.comingHome()\n        }\n    }\n}\n</code></pre>\n\n<ul>\n<li><p>The home view controller must adopt Home, and must set each view controller's <code>home</code> to <code>self</code> when it presents or pushes it. </p></li>\n<li><p>The presented or pushed view controllers must adopt Away, and must implement <code>viewWillDisappear</code> as follows:</p>\n\n<pre><code>override func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    self.notifyComingHome()\n}\n</code></pre></li>\n</ul>\n\n<p>This works for the four cases listed in the question. It's a pity, though, that Cocoa Touch doesn't do this for you automatically.</p>\n\n<hr>\n\n<p><strong>EDIT</strong> This approach has become even more important in my apps now that iOS 13 has forced nonfullscreen presented view controllers upon us. Also, I have subclassed UIAlertController so that it conforms to Away.</p>\n",
        "OwnerUserId": "341994",
        "OwnerDisplayName": "",
        "LastEditorUserId": "341994",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-10-09 12:31:15",
        "LastActivityDate": "2019-10-09 12:31:15",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "4",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56088431",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56058494",
        "CreationDate": "2019-05-11 08:06:34",
        "DeletionDate": "",
        "Score": "4",
        "ViewCount": "",
        "Body": "<p><strong>edit</strong>: This answer is incorrect. It remains here for posterity.</p>\n\n<p>Let's begin by recalling why <code>Pin</code> was introduced in the first place: we want to statically ensure that self-referential futures cannot be moved, thus invalidating their internal references.</p>\n\n<p>With that in mind, let's take a look at the definition of <code>Map</code>.</p>\n\n<pre><code>pub struct Map&lt;Fut, F&gt; {\n    future: Fut,\n    f: Option&lt;F&gt;,\n}\n</code></pre>\n\n<p><code>Map</code> has two fields, the first one stores a future, the second stores a closure which maps the result of that future to another value. We wish to support storing self-referential types directly in <code>future</code> without placing them behind a pointer. This means that if <code>Fut</code> is a self-referential type, <code>Map</code> cannot be moved once it is constructed. That is why we must use <code>Pin&lt;&amp;mut Map&gt;</code> as the receiver for <code>Future::poll</code>. If a normal mutable reference to a <code>Map</code> containing a self-referential future was ever exposed to an implementor of <code>Future</code>, users could cause UB using only safe code by causing the <code>Map</code> to be moved using <code>mem::replace</code>. </p>\n\n<p>However, we don't need to support storing self-referential types in <code>f</code>. If we assume that the self-referential part of a <code>Map</code> is wholly contained in <code>future</code>, we can freely modify <code>f</code> as long as we don't allow <code>future</code> to be moved.</p>\n\n<p>While a self-referential closure would be very unusual, the assumption that <code>f</code> be safe to move (which is equivalent to <code>F: Unpin</code>) is not explicitly stated anywhere. However, we still move the value in <code>f</code> in <code>Future::poll</code> by calling <code>take</code>! I think this is indeed a bug, but I'm not 100% sure. I think the <code>f()</code> getter should require <code>F: Unpin</code> which would mean <code>Map</code> can only implement <code>Future</code> when the closure argument is safe to be moved from behind a <code>Pin</code>.</p>\n\n<p>It's very possible that I'm overlooking some subtleties in the pin API here, and the implementation is indeed safe. I'm still wrapping my head around it as well.</p>\n",
        "OwnerUserId": "11389321",
        "OwnerDisplayName": "",
        "LastEditorUserId": "11389321",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-06-22 17:41:50",
        "LastActivityDate": "2019-06-22 17:41:50",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "4",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56117052",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56058494",
        "CreationDate": "2019-05-13 17:18:17",
        "DeletionDate": "",
        "Score": "8",
        "ViewCount": "",
        "Body": "<p>It is all about structural pinning.</p>\n\n<p>First, I will use the syntax <code>P&lt;T&gt;</code> to mean something like <code>impl Deref&lt;Target = T&gt;</code> \u2014 some (smart) pointer type <code>P</code> that <code>Deref::deref</code>s to a <code>T</code>. <code>Pin</code> only \"applies\" to / makes sense on such (smart) pointers.</p>\n\n<p>Let's say we have:</p>\n\n<pre class=\"lang-rust prettyprint-override\"><code>struct Wrapper&lt;Field&gt; {\n    field: Field,\n}\n</code></pre>\n\n<p>The initial question is</p>\n\n<blockquote>\n  <p>Can we get a <code>Pin&lt;P&lt;Field&gt;&gt;</code> from a <code>Pin&lt;P&lt;Wrapper&lt;Field&gt;&gt;&gt;</code>, by \"projecting\" our <code>Pin&lt;P&lt;_&gt;&gt;</code> from the <code>Wrapper</code> to its <code>field</code>?</p>\n</blockquote>\n\n<p>This requires the basic projection <code>P&lt;Wrapper&lt;Field&gt;&gt; -&gt; P&lt;Field&gt;</code>, which is only possible for:</p>\n\n<ul>\n<li><p>shared references (<code>P&lt;T&gt; = &amp;T</code>). This is not a very interesting case given that <code>Pin&lt;P&lt;T&gt;&gt;</code> always <a href=\"https://doc.rust-lang.org/core/ops/trait.Deref.html#impl-Deref\" rel=\"noreferrer\"><code>deref</code></a>s to <code>T</code>.</p></li>\n<li><p>unique references (<code>P&lt;T&gt; = &amp;mut T</code>).</p></li>\n</ul>\n\n<p>I will use the syntax <code>&amp;[mut] T</code> for this type of projection.</p>\n\n<p>The question now becomes:</p>\n\n<blockquote>\n  <p>Can we go from <code>Pin&lt;&amp;[mut] Wrapper&lt;Field&gt;&gt;</code> to <code>Pin&lt;&amp;[mut] Field&gt;</code>?</p>\n</blockquote>\n\n<p>The point that may be unclear from the documentation is that it is up to the creator of <code>Wrapper</code> to decide!</p>\n\n<p>There are two possible choices for the library author for each struct field.</p>\n\n<h2>There is a structural <code>Pin</code> projection to that field</h2>\n\n<p>For instance, the <a href=\"https://docs.rs/pin-utils/0.1.0-alpha.4/pin_utils/macro.unsafe_pinned.html\" rel=\"noreferrer\"><code>pin_utils::unsafe_pinned!</code></a> macro is used to define such a projection (<code>Pin&lt;&amp;mut Wrapper&lt;Field&gt;&gt; -&gt; Pin&lt;&amp;mut Field&gt;</code>).</p>\n\n<p>For the <code>Pin</code> projection to be sound:</p>\n\n<ul>\n<li><p>the whole struct must only implement <code>Unpin</code> when all the fields for which there is a structural <code>Pin</code> projection implement <code>Unpin</code>.</p>\n\n<ul>\n<li>no implementation is allowed to use <code>unsafe</code> to move such fields out of a <code>Pin&lt;&amp;mut Wrapper&lt;Field&gt;&gt;</code> (or <code>Pin&lt;&amp;mut Self&gt;</code> when <code>Self = Wrapper&lt;Field&gt;</code>). For instance, <strong><code>Option::take()</code> is forbidden</strong>.</li>\n</ul></li>\n<li><p>the whole struct may only implement <code>Drop</code> if <code>Drop::drop</code> does not move any of the fields for which there is a structural projection.</p></li>\n<li><p>the struct cannot be <code>#[repr(packed)]</code> (a corollary of the previous item).</p></li>\n</ul>\n\n<p>In your given <a href=\"https://github.com/rust-lang-nursery/futures-rs/blob/0.3.0-alpha.15/futures-util/src/future/map.rs#L36-L45\" rel=\"noreferrer\"><code>future::Map</code></a> example, this is the case of the <code>future</code> field of the <code>Map</code> struct.</p>\n\n<h2>There is no structural <code>Pin</code> projection to that field</h2>\n\n<p>For instance, the <a href=\"https://docs.rs/pin-utils/0.1.0-alpha.4/pin_utils/macro.unsafe_unpinned.html\" rel=\"noreferrer\"><code>pin_utils::unsafe_unpinned!</code></a> macro is used to define such a projection (<code>Pin&lt;&amp;mut Wrapper&lt;Field&gt;&gt; -&gt; &amp;mut Field</code>).</p>\n\n<p>In this case, <em>that field</em> is not considered pinned by a <code>Pin&lt;&amp;mut Wrapper&lt;Field&gt;&gt;</code>.</p>\n\n<ul>\n<li><p>whether <code>Field</code> is <code>Unpin</code> or not does not matter.</p>\n\n<ul>\n<li>implementations are allowed to use <code>unsafe</code> to move such fields out of a <code>Pin&lt;&amp;mut Wrapper&lt;Field&gt;&gt;</code>. For instance, <strong><code>Option::take()</code> is allowed</strong>.</li>\n</ul></li>\n<li><p><code>Drop::drop</code> is also allowed to move such fields,</p></li>\n</ul>\n\n<p>In your given <a href=\"https://github.com/rust-lang-nursery/futures-rs/blob/0.3.0-alpha.15/futures-util/src/future/map.rs#L36-L45\" rel=\"noreferrer\"><code>future::Map</code></a> example, this is the case of the <code>f</code> field of the <code>Map</code> struct.</p>\n\n<h3>Example of both types of projection</h3>\n\n<pre class=\"lang-rust prettyprint-override\"><code>impl&lt;Fut, F&gt; Map&lt;Fut, F&gt; {\n    unsafe_pinned!(future: Fut); // pin projection -----+\n    unsafe_unpinned!(f: Option&lt;F&gt;); // not pinned --+   |\n//                                                  |   |\n//                 ...                              |   |\n//                                                  |   |\n    fn poll (mut self: Pin&lt;&amp;mut Self&gt;, cx: &amp;mut Context&lt;'_&gt;) -&gt; Poll&lt;T&gt; {\n        //                                          |   |\n        match self.as_mut().future().poll(cx) { // &lt;----+ required here\n            Poll::Pending =&gt; Poll::Pending, //      |\n            Poll::Ready(output) =&gt; { //             |\n                let f = self.f().take() // &lt;--------+ allows this\n</code></pre>\n",
        "OwnerUserId": "10776437",
        "OwnerDisplayName": "",
        "LastEditorUserId": "155423",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-05-18 01:01:37",
        "LastActivityDate": "2019-05-18 01:01:37",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "6",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56916949",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56916948",
        "CreationDate": "2019-07-06 19:12:17",
        "DeletionDate": "",
        "Score": "65",
        "ViewCount": "",
        "Body": "<p>The template in Xcode 11 uses a scene delegate. Scene delegates and the related classes are new in iOS 13; they don't exist in iOS 12 and before, and the launch process is different.</p>\n\n<p>To make a project generated from an Xcode 11 app template backward compatible, you need to mark the entire SceneDelegate class, and any methods in the AppDelegate class that refer to UISceneSession, as <code>@available(iOS 13.0, *)</code>.</p>\n\n<p>You also need to declare a <code>window</code> property in the AppDelegate class (if you don't do that, the app will run and launch but the screen will be black):</p>\n\n<pre><code>var window : UIWindow?\n</code></pre>\n\n<p>The result is that when this app runs in iOS 13, the scene delegate has the <code>window</code>, but when it runs in iOS 12 or before, the app delegate has the <code>window</code> \u2014 and your other code may then need to take account of <em>that</em> in order to be backward compatible.</p>\n",
        "OwnerUserId": "341994",
        "OwnerDisplayName": "",
        "LastEditorUserId": "341994",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-07-06 19:48:01",
        "LastActivityDate": "2019-07-06 19:48:01",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "10",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57732847",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57174400",
        "CreationDate": "2019-08-30 20:24:28",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<blockquote>\n  <p>... A trailing template parameter pack ([temp.variadic]) not otherwise\n  deduced will be deduced as an empty sequence of template arguments.\n  ...</p>\n</blockquote>\n\n<p>It could be enough to say that the <em>not otherwise deduced</em> is not a clause that should somehow or automagically relax some other rules or actually it is has nothing to do with why it's malformed (contrary to what I think you imply).</p>\n\n<p>This <em>other rule</em> is perhaps best demonstrated by another very simpel example:</p>\n\n<pre><code>template&lt;class T&gt;\nvoid f(T, T){};\n\nint main() {\n    f(int{42},short{42});\n}\n</code></pre>\n\n<p>The above fails to compile. Why ? because even while allowed to convert short to int seamlessly (<em>promotion</em>) they are not the same type.</p>\n\n<p>Additionally since <code>nullptr</code> just has the somewhat <em>plain</em> type of <code>std::nullptr_t</code> - it is very ill-suited to participate in template argument deduction <em>at all</em>.</p>\n\n<p>So forget about non-deduced context for a moment and try with deduced one:</p>\n\n<pre><code>template &lt;class... T&gt;\nvoid g(S&lt;T...&gt;*, S&lt;T...&gt;* ) {}\n\nint main() {\n    S&lt;&gt; s1;\n    g(&amp;s1, nullptr);\n}\n</code></pre>\n\n<p><em>or if your prefer just</em></p>\n\n<pre><code>int main() {\n    S&lt;&gt; s1;\n    g(&amp;s1, 0);\n}\n</code></pre>\n\n<p>and both fails for the same reason.</p>\n\n<p>Now, if you would like to allow conversion - then use an identity template - and this even works for the non-deduced context!</p>\n\n<p>For your case, the example could look like (<a href=\"/questions/tagged/c%2b%2b2a\" class=\"post-tag\" title=\"show questions tagged &#39;c++2a&#39;\" rel=\"tag\">c++2a</a>):</p>\n\n<pre><code>template &lt;class... T&gt;\nvoid g(typename S&lt;T...&gt;::type, std::type_identity_t&lt;S&lt;T...&gt; &gt;*) {}\n\nint main() {\n    f(42);\n    g(42, nullptr);\n} \n</code></pre>\n\n<p>Which is valid. (note if you don't have have <a href=\"/questions/tagged/c%2b%2b2a\" class=\"post-tag\" title=\"show questions tagged &#39;c++2a&#39;\" rel=\"tag\">c++2a</a> just write the identity template yourself)</p>\n\n<p>As stated in a <a href=\"http://Jul%2024%20at%204:07\" rel=\"nofollow noreferrer\">comment</a>, turning the question around could perhaps lead to a more interesting question ?</p>\n\n<p><em>What's the reasoning for allowing empty template argument deduction in non-deduced contexts?</em></p>\n",
        "OwnerUserId": "2261538",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-08-30 20:24:28",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58429103",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58427394",
        "CreationDate": "2019-10-17 09:19:06",
        "DeletionDate": "",
        "Score": "3",
        "ViewCount": "",
        "Body": "<p>I am guessing that the <code>__total__</code> field signifies whether instances must be complete (the default) or not (all fields optional). I started my search at <a href=\"https://www.python.org/dev/peps/pep-0589/#totality\" rel=\"nofollow noreferrer\">PEP 589</a>, which introduced <code>TypedDict</code> and describes totality as such. It used a <code>total</code> argument, which it would make sense to rename dunder-style for the <code>class</code>  syntax. However, I did not find when such a renaming took place. </p>\n\n<p>Looking into MyPy, which is the actual type checker that cares about these annotations, there is <a href=\"https://www.python.org/dev/peps/pep-0589/#totality\" rel=\"nofollow noreferrer\">similar documentation on <code>TypedDict</code> and totality</a>, but again no reference to the dunder syntax. Digging into its implementation led to more confusion, as <a href=\"https://github.com/python/mypy/blob/8990ebdb884ed2d5b5dcb1dac5d8a8407358ef21/mypy/types.py#L1348\" rel=\"nofollow noreferrer\"><code>TypedDictType</code> in types.py</a> doesn't have a total field, but separate <code>items</code> and <code>required_keys</code>. Totality would imply that <code>items.keys()==required_keys</code> but the implementation makes different assumptions, such as <code>can_be_false</code> relying on <code>items</code> alone. <code>total=False</code> should in principle mean <code>required_keys</code> is empty. </p>\n\n<p>The CPython source for <a href=\"https://github.com/python/cpython/blob/8252c52e57283515ace5d4251584255dc5c60eb5/Lib/typing.py#L1698\" rel=\"nofollow noreferrer\">_TypedDictMeta</a> at least reveals that the <code>total</code> argument and <code>__total__</code> dunder are one and the same, although the source describes <code>TypedDict</code> itself as \"may be added soon\". </p>\n",
        "OwnerUserId": "379311",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-10-17 09:19:06",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58612888",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58427394",
        "CreationDate": "2019-10-29 17:47:17",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<p><code>TypedDict</code> was accepted in Python 3.8 via <a href=\"https://www.python.org/dev/peps/pep-0589/#totality\" rel=\"nofollow noreferrer\">PEP 589</a>. From Python, it appears <code>__total__</code> is a boolean flag set to <code>True</code> by default:</p>\n\n<pre><code>tot = TypedDict.__total__\nprint(type(tot))\nprint(tot)\n\n# &lt;class 'bool'&gt;\n# True\n</code></pre>\n\n<p>As mentioned in other posts, details on this method are limited in the <a href=\"https://docs.python.org/3.8/library/typing.html#typing.TypedDict\" rel=\"nofollow noreferrer\">docs</a>, but @Yann Vernier's link to the <a href=\"https://github.com/python/cpython/blob/8252c52e57283515ace5d4251584255dc5c60eb5/Lib/typing.py#L1698-L1718\" rel=\"nofollow noreferrer\">CPython source code</a> strongly suggests <code>__total__</code> is related to the new <code>total</code> keyword <a href=\"https://twitter.com/raymondh/status/1175105764823719942\" rel=\"nofollow noreferrer\">introduced in Python 3.8</a>:</p>\n\n<pre><code># cypthon/typing.py\n\nclass _TypedDictMeta(type):\n    def __new__(cls, name, bases, ns, total=True):\n        \"\"\"Create new typed dict class object.\n        ...\n        \"\"\"\n        ...\n        if not hasattr(tp_dict, '__total__'):\n            tp_dict.__total__ = total\n        ...\n</code></pre>\n\n<p>How does it work?</p>\n\n<p><em>Synopsis</em>: by default, all keys are required when instantiating a defined <code>TypedDict</code>.  <code>total=False</code> overrides this restriction and allows optional keys.  See the following demonstration.</p>\n\n<p><strong>Given</strong></p>\n\n<p>A test directory tree:</p>\n\n<p><a href=\"https://i.stack.imgur.com/sGbrU.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/sGbrU.png\" alt=\"enter image description here\"></a></p>\n\n<p><strong>Code</strong></p>\n\n<p>Files in the test directory:</p>\n\n<pre><code># rgb_bad.py\n\nfrom typing import TypedDict\n\n\nclass Color(TypedDict):\n    r: int\n    g: int\n    b: int\n    a: float\n\n\nblue = Color(r=0, g=0, b=255)                     # missing \"a\"\n</code></pre>\n\n<p></p>\n\n<pre><code># rgb_good.py\n\nfrom typing import TypedDict\n\n\nclass Color(TypedDict, total=False):\n    r: int\n    g: int\n    b: int\n    a: float\n\n\nblue = Color(r=0, g=0, b=255)                     # missing \"a\"\n</code></pre>\n\n<p><strong>Demo</strong></p>\n\n<p>If a key is missing, mypy will complain at the commandline:</p>\n\n<pre><code>&gt; mypy code/rgb_bad.py\ncode\\rgb_bad.py:11: error: Key 'a' missing for TypedDict \"Color\"\n...\n</code></pre>\n\n<p>Setting <code>total=False</code> permits optional keys:</p>\n\n<p></p>\n\n<pre><code>&gt; mypy code/rgb_good.py\nSuccess: no issues found in 1 source file\n</code></pre>\n\n<p><strong>See Also</strong></p>\n\n<ul>\n<li><a href=\"https://twitter.com/raymondh/status/1175105764823719942\" rel=\"nofollow noreferrer\">Tweet</a> by R. Hettinger demonstating totality</li>\n<li>PEP <a href=\"https://www.python.org/dev/peps/pep-0589/#totality\" rel=\"nofollow noreferrer\">section</a> on totality in PEP 589</li>\n<li>Article <a href=\"https://realpython.com/python38-new-features/#more-precise-types\" rel=\"nofollow noreferrer\">Section</a> on types and <code>TypedDict</code> in Python 3.8 by Real Python</li>\n<li><a href=\"https://pypi.org/project/typing-extensions/\" rel=\"nofollow noreferrer\"><code>typing-extensions</code> package</a> to use <code>TypedDict</code> in Python 3.5, 3.6</li>\n</ul>\n",
        "OwnerUserId": "4531270",
        "OwnerDisplayName": "",
        "LastEditorUserId": "4531270",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-10-29 19:42:07",
        "LastActivityDate": "2019-10-29 19:42:07",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56668369",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56668186",
        "CreationDate": "2019-06-19 13:05:38",
        "DeletionDate": "",
        "Score": "40",
        "ViewCount": "",
        "Body": "<p>A <code>std::array&lt;int, 3&gt;</code> is 96 bits wide on your implementation.  As such the ABI declares that it should be returned in RAX + the low 32 bits of RDX (aka EDX).</p>\n\n<p>4294967296 is 2<sup>32</sup>, in hex it is <code>$1'0000'0000</code>.  So the <code>movabs</code> stores 0 in the low order 32 bits of RAX, and 1 in the high order bits of RAX.  The <code>mov</code> stores 2 in EDX (which is exactly what you wanted).</p>\n",
        "OwnerUserId": "771073",
        "OwnerDisplayName": "",
        "LastEditorUserId": "771073",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-06-20 05:32:40",
        "LastActivityDate": "2019-06-20 05:32:40",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "5",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54362646",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54362209",
        "CreationDate": "2019-01-25 09:47:07",
        "DeletionDate": "",
        "Score": "36",
        "ViewCount": "",
        "Body": "<p><strong>TL;DR:</strong></p>\n\n<ul>\n<li>in C++98/03 the clause was not present, and the standard did not specify relational operators for <code>void</code> pointers (core issue 879, see end of this post);</li>\n<li>the odd clause about comparing <code>void</code> pointers was added in C++11 to resolve it, but this in turn gave rise to two other core issues 583 &amp; 1512 (see below);</li>\n<li>the resolution of these issues required the clause to be removed and be replaced with the wording found in C++14 standard, which allows for \"normal\" <code>void *</code> comparison.</li>\n</ul>\n\n<hr>\n\n<p>Core Issue 583: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#583\" rel=\"noreferrer\">Relational pointer comparisons against the null pointer constant</a></p>\n\n<blockquote>\n  <ol start=\"583\">\n  <li>Relational pointer comparisons against the null pointer constant Section: 8.9  [expr.rel]      </li>\n  </ol>\n  \n  <p>In C, this is ill-formed (cf C99 6.5.8):</p>\n\n<pre><code>void f(char* s) {\n    if (s &lt; 0) { }\n} ...but in C++, it's not. Why? Who would ever need to write (s &gt; 0) when they could just as well write (s != 0)?\n</code></pre>\n  \n  <p>This has been in the language since the ARM (and possibly earlier);\n  apparently it's because the pointer conversions (7.11 [conv.ptr]) need\n  to be performed on both operands whenever one of the operands is of\n  pointer type. So it looks like the \"null-ptr-to-real-pointer-type\"\n  conversion is hitching a ride with the other pointer conversions.</p>\n  \n  <p>Proposed resolution (April, 2013):</p>\n  \n  <p>This issue is resolved by the resolution of <strong>issue 1512</strong>.</p>\n</blockquote>\n\n<p>Core Issue 1512: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#1512\" rel=\"noreferrer\">Pointer comparison vs qualification conversions</a></p>\n\n<blockquote>\n  <ol start=\"1512\">\n  <li>Pointer comparison vs qualification conversions Section: 8.9  [expr.rel]     </li>\n  </ol>\n  \n  <p>According to 8.9 [expr.rel] paragraph 2, describing pointer\n  comparisons,</p>\n  \n  <p>Pointer conversions (7.11 [conv.ptr]) and qualification conversions\n  (7.5 [conv.qual]) are performed on pointer operands (or on a pointer\n  operand and a null pointer constant, or on two null pointer constants,\n  at least one of which is non-integral) to bring them to their\n  composite pointer type. This would appear to make the following\n  example ill-formed,</p>\n\n<pre><code> bool foo(int** x, const int** y) {\n return x &lt; y;  // valid ?   } because int** cannot be converted to const int**, according to the rules of 7.5 [conv.qual] paragraph 4.\n</code></pre>\n  \n  <p>This seems too strict for pointer comparison, and current\n  implementations accept the example.</p>\n  \n  <p>Proposed resolution (November, 2012):</p>\n</blockquote>\n\n<hr>\n\n<p>Relevant excerpts from <strong>resolution of the above issues</strong> are found in the paper: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3624.html\" rel=\"noreferrer\">Pointer comparison vs qualification conversions (revision 3)</a>.</p>\n\n<blockquote>\n  <p><em>The following also resolves core <strong>issue 583</strong>.</em></p>\n  \n  <p>Change in 5.9 expr.rel paragraphs 1 to 5:</p>\n</blockquote>\n\n<p>In this section the following statement (the <strong><em>odd clause in C++11</em></strong>) has been <strong>expunged</strong>:</p>\n\n<blockquote>\n  <p>Pointers to <code>void</code> (after pointer conversions) can be compared, with a result defined as follows: If both pointers represent the same address or are both the null pointer value, the result is <code>true</code> if the operator is <code>&lt;=</code> or <code>&gt;=</code> and <code>false</code> otherwise; otherwise the result is unspecified</p>\n</blockquote>\n\n<p>And the following statements have been <strong>added</strong>:  </p>\n\n<blockquote>\n  <ul>\n  <li>If two pointers point to different elements of the same array, or to subobjects thereof, the pointer to the element with the higher subscript compares greater.  </li>\n  <li>If one pointer points to an element of an array, or to a subobject thereof, and another pointer points one past the last element of the array, the latter pointer compares greater.  </li>\n  </ul>\n</blockquote>\n\n<p>So in the final working draft of <strong>C++14</strong> (n4140) section [expr.rel]/3, the above statements are found as they were stated at the time of the resolution.</p>\n\n<hr>\n\n<p>Digging for the reason why this odd clause was added led me to a much earlier issue 879: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#879\" rel=\"noreferrer\">Missing built-in comparison operators for pointer types</a>.\nThe proposed resolution of this issue (in July, 2009) led to the addition of this clause which was voted into WP in October, 2009.   </p>\n\n<p>And that is how it came to be included in the C++11 standard.</p>\n",
        "OwnerUserId": "10190237",
        "OwnerDisplayName": "",
        "LastEditorUserId": "214671",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-01-29 21:44:40",
        "LastActivityDate": "2019-01-29 21:44:40",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "14",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56243709",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56162109",
        "CreationDate": "2019-05-21 17:39:09",
        "DeletionDate": "",
        "Score": "4",
        "ViewCount": "",
        "Body": "<p>Your format file is representing import of a tab separated values file, but in the source path you are referring to an xslx file.<br>\nXslx file is an ZIP archive of multiple XML files, bulk import will not be able to process it. To open it you need to use Microsoft Jet or ACE driver, you have some examples here:\n<a href=\"https://blog.learningtree.com/using-openrowset-to-read-excel-worksheets-from-sql-server-part-2-linked-sql-queries/\" rel=\"nofollow noreferrer\">using-openrowset-to-read-excel</a>. You will need to download file from blob storage to local disks before processing it. You can use SQL Agent or SSIS to download it.  </p>\n\n<p>Other option will be to save your data as CSV or tab separated file and load it directly from blob storage.</p>\n",
        "OwnerUserId": "10542581",
        "OwnerDisplayName": "",
        "LastEditorUserId": "10542581",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-05-22 20:46:39",
        "LastActivityDate": "2019-05-22 20:46:39",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "6",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56699427",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56663624",
        "CreationDate": "2019-06-21 08:15:36",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<p>Found a workaround, by using what I wrote <a href=\"https://stackoverflow.com/a/30401010/878126\"><strong>here</strong></a> , and mapping each StorageVolume with a real file as I wrote <a href=\"https://stackoverflow.com/a/56695191/878126\"><strong>here</strong></a>. Sadly this might not work in the future, as it uses a lot of \"tricks\" :</p>\n\n<pre><code>        for (storageVolume in storageVolumes) {\n            val volumePath = FileUtilEx.getVolumePath(storageVolume)\n            if (volumePath == null) {\n                Log.d(\"AppLog\", \"storageVolume \\\"${storageVolume.getDescription(this)}\\\" - failed to get volumePath\")\n            } else {\n                val statFs = StatFs(volumePath)\n                val availableSizeInBytes = statFs.availableBytes\n                val totalBytes = statFs.totalBytes\n                val formattedResult = \"availableSizeInBytes:${android.text.format.Formatter.formatShortFileSize(this, availableSizeInBytes)} totalBytes:${android.text.format.Formatter.formatShortFileSize(this, totalBytes)}\"\n                Log.d(\"AppLog\", \"storageVolume \\\"${storageVolume.getDescription(this)}\\\" - volumePath:$volumePath - $formattedResult\")\n            }\n        }\n</code></pre>\n\n<p>Seems to work on both emulator (that has primary storage and SD-card) and real device (Pixel 2), both on Android Q beta 4.</p>\n\n<p>A bit better solution which wouldn't use reflection, could be to put a unique file in each of the paths we get on <code>ContextCompat.getExternalCacheDirs</code>, and then try to find them via each of the StorageVolume instances. It is tricky though because you don't know when to start the search, so you will need to check various paths till you reach the destination. Not only that, but as I wrote <a href=\"https://stackoverflow.com/q/56657639/878126\"><strong>here</strong></a>, I don't think there is an official way to get the Uri or DocumentFile or File or file-path of each StorageVolume.</p>\n\n<p>Anyway, weird thing is that the total space is lower than the real one. Probably as it's a partition of what's the maximum that's really available to the user.</p>\n\n<p>I wonder how come various apps (such as file manager apps, like Total Commander) get the real total device storage.</p>\n\n<hr>\n\n<p>EDIT: OK got another workaround, which is probably more reliable, based on the <a href=\"https://developer.android.com/reference/android/os/storage/StorageManager#getStorageVolume(java.io.File)\" rel=\"nofollow noreferrer\"><strong>storageManager.getStorageVolume(File)</strong></a> function. </p>\n\n<p>So here is the merging of the 2 workarounds:</p>\n\n<pre><code>fun getStorageVolumePath(context: Context, storageVolumeToGetItsPath: StorageVolume): String? {\n    //first, try to use reflection\n    if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.LOLLIPOP)\n        return null\n    try {\n        val storageVolumeClazz = StorageVolume::class.java\n        val getPathMethod = storageVolumeClazz.getMethod(\"getPath\")\n        val result = getPathMethod.invoke(storageVolumeToGetItsPath) as String?\n         if (!result.isNullOrBlank())\n            return result\n    } catch (e: Exception) {\n        e.printStackTrace()\n    }\n    //failed to use reflection, so try mapping with app's folders\n    val storageVolumeUuidStr = storageVolumeToGetItsPath.uuid\n    val externalCacheDirs = ContextCompat.getExternalCacheDirs(context)\n    val storageManager = context.getSystemService(Context.STORAGE_SERVICE) as StorageManager\n    for (externalCacheDir in externalCacheDirs) {\n        val storageVolume = storageManager.getStorageVolume(externalCacheDir) ?: continue\n        val uuidStr = storageVolume.uuid\n        if (uuidStr == storageVolumeUuidStr) {\n            //found storageVolume&lt;-&gt;File match\n            var resultFile = externalCacheDir\n            while (true) {\n                val parentFile = resultFile.parentFile ?: return resultFile.absolutePath\n                val parentFileStorageVolume = storageManager.getStorageVolume(parentFile)\n                        ?: return resultFile.absolutePath\n                if (parentFileStorageVolume.uuid != uuidStr)\n                    return resultFile.absolutePath\n                resultFile = parentFile\n            }\n        }\n    }\n    return null\n}\n</code></pre>\n\n<p>And to show the available and total space, we use StatFs as before:</p>\n\n<pre><code>for (storageVolume in storageVolumes) {\n    val storageVolumePath = getStorageVolumePath(this@MainActivity, storageVolume) ?: continue\n    val statFs = StatFs(storageVolumePath)\n    val availableSizeInBytes = statFs.availableBytes\n    val totalBytes = statFs.totalBytes\n    val formattedResult = \"availableSizeInBytes:${android.text.format.Formatter.formatShortFileSize(this, availableSizeInBytes)} totalBytes:${android.text.format.Formatter.formatShortFileSize(this, totalBytes)}\"\n    Log.d(\"AppLog\", \"storageVolume \\\"${storageVolume.getDescription(this)}\\\" - storageVolumePath:$storageVolumePath - $formattedResult\")\n}\n</code></pre>\n\n<hr>\n\n<p>EDIT: shorter version, without using the real file-path of the storageVolume:</p>\n\n<pre><code>fun getStatFsForStorageVolume(context: Context, storageVolumeToGetItsPath: StorageVolume): StatFs? {\n    //first, try to use reflection\n    if (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.N)\n        return null\n    try {\n        val storageVolumeClazz = StorageVolume::class.java\n        val getPathMethod = storageVolumeClazz.getMethod(\"getPath\")\n        val resultPath = getPathMethod.invoke(storageVolumeToGetItsPath) as String?\n        if (!resultPath.isNullOrBlank())\n            return StatFs(resultPath)\n    } catch (e: Exception) {\n        e.printStackTrace()\n    }\n    //failed to use reflection, so try mapping with app's folders\n    val storageVolumeUuidStr = storageVolumeToGetItsPath.uuid\n    val externalCacheDirs = ContextCompat.getExternalCacheDirs(context)\n    val storageManager = context.getSystemService(Context.STORAGE_SERVICE) as StorageManager\n    for (externalCacheDir in externalCacheDirs) {\n        val storageVolume = storageManager.getStorageVolume(externalCacheDir) ?: continue\n        val uuidStr = storageVolume.uuid\n        if (uuidStr == storageVolumeUuidStr) {\n            //found storageVolume&lt;-&gt;File match\n            return StatFs(externalCacheDir.absolutePath)\n        }\n    }\n    return null\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>        for (storageVolume in storageVolumes) {\n            val statFs = getStatFsForStorageVolume(this@MainActivity, storageVolume)\n                    ?: continue\n            val availableSizeInBytes = statFs.availableBytes\n            val totalBytes = statFs.totalBytes\n            val formattedResult = \"availableSizeInBytes:${android.text.format.Formatter.formatShortFileSize(this, availableSizeInBytes)} totalBytes:${android.text.format.Formatter.formatShortFileSize(this, totalBytes)}\"\n            Log.d(\"AppLog\", \"storageVolume \\\"${storageVolume.getDescription(this)}\\\" - $formattedResult\")\n        }\n</code></pre>\n\n<p>Note that this solution doesn't require any kind of permission. </p>\n\n<p>--</p>\n\n<p>EDIT: I actually found out that I tried to do it in the past, but for some reason it crashed for me on the SD-card StoraveVolume on the emulator:</p>\n\n<pre><code>        val storageStatsManager = getSystemService(Context.STORAGE_STATS_SERVICE) as StorageStatsManager\n        for (storageVolume in storageVolumes) {\n            val uuidStr = storageVolume.uuid\n            val uuid = if (uuidStr == null) StorageManager.UUID_DEFAULT else UUID.fromString(uuidStr)\n            val availableSizeInBytes = storageStatsManager.getFreeBytes(uuid)\n            val totalBytes = storageStatsManager.getTotalBytes(uuid)\n            val formattedResult = \"availableSizeInBytes:${android.text.format.Formatter.formatShortFileSize(this, availableSizeInBytes)} totalBytes:${android.text.format.Formatter.formatShortFileSize(this, totalBytes)}\"\n            Log.d(\"AppLog\", \"storageVolume \\\"${storageVolume.getDescription(this)}\\\" - $formattedResult\")\n        }\n</code></pre>\n\n<p>The good news is that for the primary storageVolume, you get the real total space of it.</p>\n\n<p>On a real device it also crashes for the SD-card, but not for the primary one.</p>\n\n<hr>\n\n<p>So here's the latest solution for this, gathering the above:</p>\n\n<pre><code>        for (storageVolume in storageVolumes) {\n            val availableSizeInBytes: Long\n            val totalBytes: Long\n            if (storageVolume.isPrimary) {\n                val storageStatsManager = getSystemService(Context.STORAGE_STATS_SERVICE) as StorageStatsManager\n                val uuidStr = storageVolume.uuid\n                val uuid = if (uuidStr == null) StorageManager.UUID_DEFAULT else UUID.fromString(uuidStr)\n                availableSizeInBytes = storageStatsManager.getFreeBytes(uuid)\n                totalBytes = storageStatsManager.getTotalBytes(uuid)\n            } else {\n                val statFs = getStatFsForStorageVolume(this@MainActivity, storageVolume)\n                        ?: continue\n                availableSizeInBytes = statFs.availableBytes\n                totalBytes = statFs.totalBytes\n            }\n            val formattedResult = \"availableSizeInBytes:${android.text.format.Formatter.formatShortFileSize(this, availableSizeInBytes)} totalBytes:${android.text.format.Formatter.formatShortFileSize(this, totalBytes)}\"\n            Log.d(\"AppLog\", \"storageVolume \\\"${storageVolume.getDescription(this)}\\\" - $formattedResult\")\n        }\n</code></pre>\n",
        "OwnerUserId": "878126",
        "OwnerDisplayName": "",
        "LastEditorUserId": "878126",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-07-20 21:37:12",
        "LastActivityDate": "2019-07-20 21:37:12",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56797603",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56663624",
        "CreationDate": "2019-06-27 19:37:02",
        "DeletionDate": "",
        "Score": "5",
        "ViewCount": "",
        "Body": "<p>The following uses <code>fstatvfs(FileDescriptor)</code> to retrieve stats without resorting to reflection or traditional file system methods.</p>\n\n<p>To check the output of the program to make sure it is producing reasonable result for total, used and available space I ran the \"df\" command on an Android Emulator running API 29. </p>\n\n<p><strong>Output of \"df\" command in adb shell reporting 1K blocks:</strong></p>\n\n<p>\"/data\" corresponds to the \"primary\" UUID used when by StorageVolume#isPrimary is true.</p>\n\n<p>\"/storage/1D03-2E0E\" corresponds to the \"1D03-2E0E\" UUID reported by StorageVolume#uuid.</p>\n\n<pre><code>generic_x86:/ $ df\nFilesystem              1K-blocks    Used Available Use% Mounted on\n/dev/root                 2203316 2140872     46060  98% /\ntmpfs                     1020140     592   1019548   1% /dev\ntmpfs                     1020140       0   1020140   0% /mnt\ntmpfs                     1020140       0   1020140   0% /apex\n/dev/block/vde1            132168   75936     53412  59% /vendor\n\n/dev/block/vdc             793488  647652    129452  84% /data\n\n/dev/block/loop0              232      36       192  16% /apex/com.android.apex.cts.shim@1\n/data/media                793488  647652    129452  84% /storage/emulated\n\n/mnt/media_rw/1D03-2E0E    522228      90    522138   1% /storage/1D03-2E0E\n</code></pre>\n\n<p><strong>Reported by the app using <em>fstatvfs</em> (in 1K blocks):</strong></p>\n\n<blockquote>\n  <p>For /tree/primary:/document/primary: \n      Total=793,488 used space=647,652 available=129,452</p>\n  \n  <p>For /tree/1D03-2E0E:/document/1D03-2E0E: \n      Total=522,228 used space=90 available=522,138</p>\n</blockquote>\n\n<p>The totals match. </p>\n\n<p><em>fstatvfs</em> is described <a href=\"https://developer.android.com/reference/android/system/Os.html#fstatvfs(java.io.FileDescriptor)\" rel=\"nofollow noreferrer\">here</a>.</p>\n\n<p>Detail on what <em>fstatvfs</em> returns can be found <a href=\"https://developer.android.com/reference/android/system/StructStatVfs\" rel=\"nofollow noreferrer\">here</a>.</p>\n\n<p>The following little app displays used, free and total bytes for volumes that are accessible.</p>\n\n<p><a href=\"https://i.stack.imgur.com/qcrY5.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/qcrY5.png\" alt=\"enter image description here\"></a></p>\n\n<p><strong>MainActivity.kt</strong></p>\n\n<pre><code>class MainActivity : AppCompatActivity() {\n    private lateinit var mStorageManager: StorageManager\n    private val mVolumeStats = HashMap&lt;Uri, StructStatVfs&gt;()\n    private val mStorageVolumePathsWeHaveAccessTo = HashSet&lt;String&gt;()\n    private lateinit var mStorageVolumes: List&lt;StorageVolume&gt;\n    private var mHaveAccessToPrimary = false\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        mStorageManager = getSystemService(Context.STORAGE_SERVICE) as StorageManager\n        mStorageVolumes = mStorageManager.storageVolumes\n\n        requestAccessButton.setOnClickListener {\n            val primaryVolume = mStorageManager.primaryStorageVolume\n            val intent = primaryVolume.createOpenDocumentTreeIntent()\n            startActivityForResult(intent, 1)\n        }\n\n        releaseAccessButton.setOnClickListener {\n            val takeFlags =\n                Intent.FLAG_GRANT_READ_URI_PERMISSION or Intent.FLAG_GRANT_WRITE_URI_PERMISSION\n            val uri = buildVolumeUriFromUuid(PRIMARY_UUID)\n\n            contentResolver.releasePersistableUriPermission(uri, takeFlags)\n            val toast = Toast.makeText(\n                this,\n                \"Primary volume permission released was released.\",\n                Toast.LENGTH_SHORT\n            )\n            toast.setGravity(Gravity.BOTTOM, 0, releaseAccessButton.height)\n            toast.show()\n            getVolumeStats()\n            showVolumeStats()\n        }\n        getVolumeStats()\n        showVolumeStats()\n\n    }\n\n    private fun getVolumeStats() {\n        val persistedUriPermissions = contentResolver.persistedUriPermissions\n        mStorageVolumePathsWeHaveAccessTo.clear()\n        persistedUriPermissions.forEach {\n            mStorageVolumePathsWeHaveAccessTo.add(it.uri.toString())\n        }\n        mVolumeStats.clear()\n        mHaveAccessToPrimary = false\n        for (storageVolume in mStorageVolumes) {\n            val uuid = if (storageVolume.isPrimary) {\n                // Primary storage doesn't get a UUID here.\n                PRIMARY_UUID\n            } else {\n                storageVolume.uuid\n            }\n\n            val volumeUri = uuid?.let { buildVolumeUriFromUuid(it) }\n\n            when {\n                uuid == null -&gt;\n                    Log.d(TAG, \"UUID is null for ${storageVolume.getDescription(this)}!\")\n                mStorageVolumePathsWeHaveAccessTo.contains(volumeUri.toString()) -&gt; {\n                    Log.d(TAG, \"Have access to $uuid\")\n                    if (uuid == PRIMARY_UUID) {\n                        mHaveAccessToPrimary = true\n                    }\n                    val uri = buildVolumeUriFromUuid(uuid)\n                    val docTreeUri = DocumentsContract.buildDocumentUriUsingTree(\n                        uri,\n                        DocumentsContract.getTreeDocumentId(uri)\n                    )\n                    mVolumeStats[docTreeUri] = getFileStats(docTreeUri)\n                }\n                else -&gt; Log.d(TAG, \"Don't have access to $uuid\")\n            }\n        }\n    }\n\n    private fun showVolumeStats() {\n        val sb = StringBuilder()\n        if (mVolumeStats.size == 0) {\n            sb.appendln(\"Nothing to see here...\")\n        } else {\n            sb.appendln(\"All figures are in 1K blocks.\")\n            sb.appendln()\n        }\n        mVolumeStats.forEach {\n            val lastSeg = it.key.lastPathSegment\n            sb.appendln(\"Volume: $lastSeg\")\n            val stats = it.value\n            val blockSize = stats.f_bsize\n            val totalSpace = stats.f_blocks * blockSize / 1024L\n            val freeSpace = stats.f_bfree * blockSize / 1024L\n            val usedSpace = totalSpace - freeSpace\n            sb.appendln(\" Used space: ${usedSpace.nice()}\")\n            sb.appendln(\" Free space: ${freeSpace.nice()}\")\n            sb.appendln(\"Total space: ${totalSpace.nice()}\")\n            sb.appendln(\"----------------\")\n        }\n        volumeStats.text = sb.toString()\n        if (mHaveAccessToPrimary) {\n            releaseAccessButton.visibility = View.VISIBLE\n            requestAccessButton.visibility = View.GONE\n        } else {\n            releaseAccessButton.visibility = View.GONE\n            requestAccessButton.visibility = View.VISIBLE\n        }\n    }\n\n    private fun buildVolumeUriFromUuid(uuid: String): Uri {\n        return DocumentsContract.buildTreeDocumentUri(\n            EXTERNAL_STORAGE_AUTHORITY,\n            \"$uuid:\"\n        )\n    }\n\n    private fun getFileStats(docTreeUri: Uri): StructStatVfs {\n        val pfd = contentResolver.openFileDescriptor(docTreeUri, \"r\")!!\n        return fstatvfs(pfd.fileDescriptor)\n    }\n\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n        Log.d(TAG, \"resultCode:$resultCode\")\n        val uri = data?.data ?: return\n        val takeFlags =\n            Intent.FLAG_GRANT_READ_URI_PERMISSION or Intent.FLAG_GRANT_WRITE_URI_PERMISSION\n        contentResolver.takePersistableUriPermission(uri, takeFlags)\n        Log.d(TAG, \"granted uri: ${uri.path}\")\n        getVolumeStats()\n        showVolumeStats()\n    }\n\n    companion object {\n        fun Long.nice(fieldLength: Int = 12): String = String.format(Locale.US, \"%,${fieldLength}d\", this)\n\n        const val EXTERNAL_STORAGE_AUTHORITY = \"com.android.externalstorage.documents\"\n        const val PRIMARY_UUID = \"primary\"\n        const val TAG = \"AppLog\"\n    }\n}\n</code></pre>\n\n<p><strong>activity_main.xml</strong></p>\n\n<pre><code>&lt;LinearLayout \n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:orientation=\"vertical\"\n        tools:context=\".MainActivity\"&gt;\n\n    &lt;TextView\n            android:id=\"@+id/volumeStats\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"0dp\"\n            android:layout_marginBottom=\"16dp\"\n            android:layout_weight=\"1\"\n            android:fontFamily=\"monospace\"\n            android:padding=\"16dp\" /&gt;\n\n    &lt;Button\n            android:id=\"@+id/requestAccessButton\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center_horizontal\"\n            android:layout_marginBottom=\"16dp\"\n            android:visibility=\"gone\"\n            android:text=\"Request Access to Primary\" /&gt;\n\n    &lt;Button\n            android:id=\"@+id/releaseAccessButton\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_gravity=\"center_horizontal\"\n            android:layout_marginBottom=\"16dp\"\n            android:text=\"Release Access to Primary\" /&gt;\n&lt;/LinearLayout&gt;   \n</code></pre>\n",
        "OwnerUserId": "6287910",
        "OwnerDisplayName": "",
        "LastEditorUserId": "878126",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-07-10 19:20:38",
        "LastActivityDate": "2019-07-10 19:20:38",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "18",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57126727",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56663624",
        "CreationDate": "2019-07-20 16:44:14",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<p><strong>Is getAllocatableBytes indeed the way to get the free space?</strong></p>\n\n<p><a href=\"https://developer.android.com/about/versions/oreo/android-8.0\" rel=\"nofollow noreferrer\">Android 8.0 Features and APIs</a> states that <em>getAllocatableBytes(UUID)</em>:</p>\n\n<blockquote>\n  <p>Finally, when you need to allocate disk space for large files, consider using the new allocateBytes(FileDescriptor, long) API, which will automatically clear cached files belonging to other apps (as needed) to meet your request. When deciding if the device has enough disk space to hold your new data, call getAllocatableBytes(UUID) instead of using getUsableSpace(), since the former will consider any cached data that the system is willing to clear on your behalf.</p>\n</blockquote>\n\n<p>So, <em>getAllocatableBytes()</em> reports how many bytes could be free for a new file by clearing cache for other apps but may not be currently free. This does not seem to be the right call for a general-purpose file utility.</p>\n\n<p>In any case, <em>getAllocatableBytes(UUID)</em> doesn't seem to work for any volume other than the primary volume due to the inability to get acceptable UUIDs from <em>StorageManager</em> for storage volumes other than the primary volume. See <a href=\"https://stackoverflow.com/questions/48589109/invalid-uuid-of-storage-gained-from-android-storagemanager\">Invalid UUID of storage gained from Android StorageManager?</a> and <a href=\"https://issuetracker.google.com/issues/62982912\" rel=\"nofollow noreferrer\">Bug report #62982912</a>. (Mentioned here for completeness; I realize that you already know about these.) The bug report is now over two years old with no resolution or hint at a work-around, so no love there.</p>\n\n<p>If you want the type of free space reported by \"Files by Google\" or other file managers, then you will want to approach free space in a different way as explained below.</p>\n\n<p><strong>How can I get the free and real total space (in some cases I got lower values for some reason) of each StorageVolume, without requesting any permission, just like on Google's app?</strong></p>\n\n<p>Here is a procedure to get free and total space for available volumes:</p>\n\n<p><strong><em>Identify external directories:</em></strong> Use <a href=\"https://developer.android.com/reference/android/content/Context#getExternalFilesDirs(java.lang.String)\" rel=\"nofollow noreferrer\">getExternalFilesDirs(null)</a> to discover available external locations. What is returned is a <em>File[]</em>. These are directories that our app is permitted to use.</p>\n\n<blockquote>\n  <p>extDirs = {File<a href=\"https://i.stack.imgur.com/M1U43l.jpg\" rel=\"nofollow noreferrer\">2</a>@9489<br>\n   0 = {File@9509} \"/storage/emulated/0/Android/data/com.example.storagevolumes/files\"<br>\n    1 = {File@9510} \"/storage/14E4-120B/Android/data/com.example.storagevolumes/files\"</p>\n</blockquote>\n\n<p>(N.B. According to the documentation, this call returns what are considered to be stable devices such as SD cards. This does not return attached USB drives.)</p>\n\n<p><strong><em>Identify storage volumes:</em></strong> For each directory returned above, use <a href=\"https://developer.android.com/reference/android/os/storage/StorageManager.html#getStorageVolume(java.io.File)\" rel=\"nofollow noreferrer\">StorageManager#getStorageVolume(File)</a> to identify the storage volume that contains the directory. We don't need to identify the top-level directory to get the storage volume, just a file from the storage volume, so these directories will do.</p>\n\n<p><strong><em>Calculate total and used space:</em></strong> Determine the space on the storage volumes. The primary volume is treated differently from an SD card.</p>\n\n<p><em>For the primary volume:</em> Using <a href=\"https://developer.android.com/reference/android/app/usage/StorageStatsManager#getTotalBytes(java.util.UUID)\" rel=\"nofollow noreferrer\">StorageStatsManager#getTotalBytes(UUID</a> get the nominal total bytes of storage on the primary device using <a href=\"https://developer.android.com/reference/android/os/storage/StorageManager.html#UUID_DEFAULT\" rel=\"nofollow noreferrer\">StorageManager#UUID_DEFAULT</a> . The value returned treats a kilobyte as 1,000 bytes (rather than 1,024) and a gigabyte as 1,000,000,000 bytes instead of 2<sup>30</sup>. On my SamSung Galaxy S7 the value reported is 32,000,000,000 bytes. On my Pixel 3 emulator running API 29 with 16 MB of storage, the value reported is 16,000,000,000. </p>\n\n<p><em>Here is the trick:</em> If you want the numbers reported by \"Files by Google\", use 10<sup>3</sup> for a kilobyte, 10<sup>6</sup> for a megabyte and 10<sup>9</sup> for a gigabyte. For other file managers  2<sup>10</sup>, 2<sup>20</sup> and 2<sup>30</sup> is what works. (This is demonstrated below.) See <a href=\"https://en.wikipedia.org/wiki/Kibibyte\" rel=\"nofollow noreferrer\">this</a> for more information on these units.</p>\n\n<p>To get free bytes, use <a href=\"https://developer.android.com/reference/android/app/usage/StorageStatsManager.html#getFreeBytes(java.util.UUID)\" rel=\"nofollow noreferrer\">StorageStatsManager#getFreeBytes(uuid)</a>. Used bytes is the difference between total bytes and free bytes.</p>\n\n<p><strong>For non-primary volumes:</strong> Space calculations for non-primary volumes is straightforward: For total space used <a href=\"https://developer.android.com/reference/java/io/File.html#getTotalSpace()\" rel=\"nofollow noreferrer\">File#getTotalSpace</a> and <a href=\"https://developer.android.com/reference/java/io/File.html#getFreeSpace()\" rel=\"nofollow noreferrer\">File#getFreeSpace</a> for the free space.</p>\n\n<p>Here are a couple of screens shots that display volume stats. The first image shows the output of the <em>StorageVolumeStats</em> app (included below the images) and \"Files by Google.\" The toggle button at the top of the top section switches the app between using 1,000 and 1,024 for kilobytes. As you can see, the figures agree. (This is a screen shot from a device running Oreo. I was unable to get the beta version of \"Files by Google\" loaded onto an Android Q emulator.)</p>\n\n<p><a href=\"https://i.stack.imgur.com/31eTIl.jpg\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/31eTIl.jpg\" alt=\"enter image description here\"></a></p>\n\n<p>The following image shows the <em>StorageVolumeStats</em> app at the top and output from \"EZ File Explorer\" on the bottom. Here 1,024 is used for kilobytes and the two apps agree on the total and free space available except for rounding.</p>\n\n<p><a href=\"https://i.stack.imgur.com/M1U43l.jpg\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/M1U43l.jpg\" alt=\"enter image description here\"></a></p>\n\n<p><strong>MainActivity.kt</strong></p>\n\n<p>This small app is just the main activity. The manifest is generic, <em>compileSdkVersion</em> and <em>targetSdkVersion</em> are set to 29. <em>minSdkVersion</em> is 26.</p>\n\n<pre><code>class MainActivity : AppCompatActivity() {\n    private lateinit var mStorageManager: StorageManager\n    private val mStorageVolumesByExtDir = mutableListOf&lt;VolumeStats&gt;()\n    private lateinit var mVolumeStats: TextView\n    private lateinit var mUnitsToggle: ToggleButton\n    private var mKbToggleValue = true\n    private var kbToUse = KB\n    private var mbToUse = MB\n    private var gbToUse = GB\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        if (savedInstanceState != null) {\n            mKbToggleValue = savedInstanceState.getBoolean(\"KbToggleValue\", true)\n            selectKbValue()\n        }\n        setContentView(statsLayout())\n\n        mStorageManager = getSystemService(Context.STORAGE_SERVICE) as StorageManager\n\n        getVolumeStats()\n        showVolumeStats()\n    }\n\n    override fun onSaveInstanceState(outState: Bundle) {\n        super.onSaveInstanceState(outState)\n        outState.putBoolean(\"KbToggleValue\", mKbToggleValue)\n    }\n\n    private fun getVolumeStats() {\n        // We will get our volumes from the external files directory list. There will be one\n        // entry per external volume.\n        val extDirs = getExternalFilesDirs(null)\n\n        mStorageVolumesByExtDir.clear()\n        extDirs.forEach { file -&gt;\n            val storageVolume: StorageVolume? = mStorageManager.getStorageVolume(file)\n            if (storageVolume == null) {\n                Log.d(TAG, \"Could not determinate StorageVolume for ${file.path}\")\n            } else {\n                val totalSpace: Long\n                val usedSpace: Long\n                if (storageVolume.isPrimary) {\n                    // Special processing for primary volume. \"Total\" should equal size advertised\n                    // on retail packaging and we get that from StorageStatsManager. Total space\n                    // from File will be lower than we want to show.\n                    val uuid = StorageManager.UUID_DEFAULT\n                    val storageStatsManager =\n                        getSystemService(Context.STORAGE_STATS_SERVICE) as StorageStatsManager\n                    // Total space is reported in round numbers. For example, storage on a\n                    // SamSung Galaxy S7 with 32GB is reported here as 32_000_000_000. If\n                    // true GB is needed, then this number needs to be adjusted. The constant\n                    // \"KB\" also need to be changed to reflect KiB (1024).\n//                    totalSpace = storageStatsManager.getTotalBytes(uuid)\n                    totalSpace = (storageStatsManager.getTotalBytes(uuid) / 1_000_000_000) * gbToUse\n                    usedSpace = totalSpace - storageStatsManager.getFreeBytes(uuid)\n                } else {\n                    // StorageStatsManager doesn't work for volumes other than the primary volume\n                    // since the \"UUID\" available for non-primary volumes is not acceptable to\n                    // StorageStatsManager. We must revert to File for non-primary volumes. These\n                    // figures are the same as returned by statvfs().\n                    totalSpace = file.totalSpace\n                    usedSpace = totalSpace - file.freeSpace\n                }\n                mStorageVolumesByExtDir.add(\n                    VolumeStats(storageVolume, totalSpace, usedSpace)\n                )\n            }\n        }\n    }\n\n    private fun showVolumeStats() {\n        val sb = StringBuilder()\n        mStorageVolumesByExtDir.forEach { volumeStats -&gt;\n            val (usedToShift, usedSizeUnits) = getShiftUnits(volumeStats.mUsedSpace)\n            val usedSpace = (100f * volumeStats.mUsedSpace / usedToShift).roundToLong() / 100f\n            val (totalToShift, totalSizeUnits) = getShiftUnits(volumeStats.mTotalSpace)\n            val totalSpace = (100f * volumeStats.mTotalSpace / totalToShift).roundToLong() / 100f\n            val uuidToDisplay: String?\n            val volumeDescription =\n                if (volumeStats.mStorageVolume.isPrimary) {\n                    uuidToDisplay = \"\"\n                    PRIMARY_STORAGE_LABEL\n                } else {\n                    uuidToDisplay = \" (${volumeStats.mStorageVolume.uuid})\"\n                    volumeStats.mStorageVolume.getDescription(this)\n                }\n            sb\n                .appendln(\"$volumeDescription$uuidToDisplay\")\n                .appendln(\" Used space: ${usedSpace.nice()} $usedSizeUnits\")\n                .appendln(\"Total space: ${totalSpace.nice()} $totalSizeUnits\")\n                .appendln(\"----------------\")\n        }\n        mVolumeStats.text = sb.toString()\n    }\n\n    private fun getShiftUnits(x: Long): Pair&lt;Long, String&gt; {\n        val usedSpaceUnits: String\n        val shift =\n            when {\n                x &lt; kbToUse -&gt; {\n                    usedSpaceUnits = \"Bytes\"; 1L\n                }\n                x &lt; mbToUse -&gt; {\n                    usedSpaceUnits = \"KB\"; kbToUse\n                }\n                x &lt; gbToUse -&gt; {\n                    usedSpaceUnits = \"MB\"; mbToUse\n                }\n                else -&gt; {\n                    usedSpaceUnits = \"GB\"; gbToUse\n                }\n            }\n        return Pair(shift, usedSpaceUnits)\n    }\n\n    @SuppressLint(\"SetTextI18n\")\n    private fun statsLayout(): SwipeRefreshLayout {\n        val swipeToRefresh = SwipeRefreshLayout(this)\n        swipeToRefresh.setOnRefreshListener {\n            getVolumeStats()\n            showVolumeStats()\n            swipeToRefresh.isRefreshing = false\n        }\n\n        val scrollView = ScrollView(this)\n        swipeToRefresh.addView(scrollView)\n        val linearLayout = LinearLayout(this)\n        linearLayout.orientation = LinearLayout.VERTICAL\n        scrollView.addView(\n            linearLayout, ViewGroup.LayoutParams.MATCH_PARENT,\n            ViewGroup.LayoutParams.WRAP_CONTENT\n        )\n\n        val instructions = TextView(this)\n        instructions.text = \"Swipe down to refresh.\"\n        linearLayout.addView(\n            instructions, ViewGroup.LayoutParams.WRAP_CONTENT,\n            ViewGroup.LayoutParams.WRAP_CONTENT\n        )\n        (instructions.layoutParams as LinearLayout.LayoutParams).gravity = Gravity.CENTER\n\n        mUnitsToggle = ToggleButton(this)\n        mUnitsToggle.textOn = \"KB = 1,000\"\n        mUnitsToggle.textOff = \"KB = 1,024\"\n        mUnitsToggle.isChecked = mKbToggleValue\n        linearLayout.addView(\n            mUnitsToggle, ViewGroup.LayoutParams.WRAP_CONTENT,\n            ViewGroup.LayoutParams.WRAP_CONTENT\n        )\n        mUnitsToggle.setOnClickListener { v -&gt;\n            val toggleButton = v as ToggleButton\n            mKbToggleValue = toggleButton.isChecked\n            selectKbValue()\n            getVolumeStats()\n            showVolumeStats()\n        }\n\n        mVolumeStats = TextView(this)\n        mVolumeStats.typeface = Typeface.MONOSPACE\n        val padding =\n            16 * (resources.displayMetrics.densityDpi.toFloat() / DisplayMetrics.DENSITY_DEFAULT).toInt()\n        mVolumeStats.setPadding(padding, padding, padding, padding)\n\n        val lp = LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, 0)\n        lp.weight = 1f\n        linearLayout.addView(mVolumeStats, lp)\n\n        return swipeToRefresh\n    }\n\n    private fun selectKbValue() {\n        if (mKbToggleValue) {\n            kbToUse = KB\n            mbToUse = MB\n            gbToUse = GB\n        } else {\n            kbToUse = KiB\n            mbToUse = MiB\n            gbToUse = GiB\n        }\n    }\n\n    companion object {\n        fun Float.nice(fieldLength: Int = 6): String =\n            String.format(Locale.US, \"%$fieldLength.2f\", this)\n\n        // StorageVolume should have an accessible \"getPath()\" method that will do\n        // the following so we don't have to resort to reflection.\n        @Suppress(\"unused\")\n        fun StorageVolume.getStorageVolumePath(): String {\n            return try {\n                javaClass\n                    .getMethod(\"getPath\")\n                    .invoke(this) as String\n            } catch (e: Exception) {\n                e.printStackTrace()\n                \"\"\n            }\n        }\n\n        // See https://en.wikipedia.org/wiki/Kibibyte for description\n        // of these units.\n\n        // These values seems to work for \"Files by Google\"...\n        const val KB = 1_000L\n        const val MB = KB * KB\n        const val GB = KB * KB * KB\n\n        // ... and these values seems to work for other file manager apps.\n        const val KiB = 1_024L\n        const val MiB = KiB * KiB\n        const val GiB = KiB * KiB * KiB\n\n        const val PRIMARY_STORAGE_LABEL = \"Internal Storage\"\n\n        const val TAG = \"MainActivity\"\n    }\n\n    data class VolumeStats(\n        val mStorageVolume: StorageVolume,\n        var mTotalSpace: Long = 0,\n        var mUsedSpace: Long = 0\n    )\n}\n</code></pre>\n\n<p><strong>Addendum</strong></p>\n\n<p>Let's get more comfortable with using <em>getExternalFilesDirs()</em>:</p>\n\n<p>We call <a href=\"https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/app/ContextImpl.java#683\" rel=\"nofollow noreferrer\">Context#getExternalFilesDirs()</a>\nin the code. Within this method a call is made to <a href=\"https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/core/java/android/os/Environment.java#141\" rel=\"nofollow noreferrer\">Environment#buildExternalStorageAppFilesDirs()</a> which calls <a href=\"https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/core/java/android/os/Environment.java#95\" rel=\"nofollow noreferrer\">Environment#getExternalDirs()</a> to obtain the volume list from <em>StorageManager</em>. This storage list is used to create the paths we see returned from <em>Context#getExternalFilesDirs()</em> by appending some static path segments to the path identified by each storage volume.</p>\n\n<p>We would really want access to <a href=\"https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/core/java/android/os/Environment.java#95\" rel=\"nofollow noreferrer\">Environment#getExternalDirs()</a> so we can immediately determine space utilization, but we are restricted. Since the call we make depends upon a file list that is generated from the volume list, we can be comfortable that all volumes are covered by out code and we can get the space utilization information we need.</p>\n",
        "OwnerUserId": "6287910",
        "OwnerDisplayName": "",
        "LastEditorUserId": "6287910",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-07-22 14:54:40",
        "LastActivityDate": "2019-07-22 14:54:40",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "13",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58660208",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58660207",
        "CreationDate": "2019-11-01 13:39:49",
        "DeletionDate": "",
        "Score": "15",
        "ViewCount": "",
        "Body": "<p>The standard doesn't require this to compile on <em>any</em> toolchain!</p>\n\n<p>First recall that <code>vector&lt;bool&gt;</code> is weird and subscripting it gives you a temporary object of a proxy type called <code>std::vector&lt;bool&gt;::reference</code>, rather than an actual <code>bool&amp;</code>.</p>\n\n<p>The error message is telling you that it cannot bind this temporary to a non-<code>const</code> lvalue reference in the generic <code>template &lt;typename T&gt; std::swap(T&amp; lhs, T&amp; rhs)</code> implementation.</p>\n\n<h3>Extensions!</h3>\n\n<p>However, it turns out that libstdc++ <a href=\"https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/bits/stl_bvector.h#L118\" rel=\"noreferrer\">defines an overload</a> for <code>std::swap(std::vector&lt;bool&gt;::reference, std::vector&lt;bool&gt;::reference)</code>, but this is an extension to the standard (or, if it is in there, I can't find any evidence for it).</p>\n\n<p>libc++ <a href=\"https://github.com/llvm-mirror/libcxx/blob/master/include/__bit_reference#L86\" rel=\"noreferrer\">does this too</a>.</p>\n\n<p>I'd guess that the Visual Studio stdlib implementation, which you're still using, <em>doesn't</em>, but then to add insult to injury <a href=\"https://godbolt.org/z/Cn1vEm\" rel=\"noreferrer\">you can bind temporaries to lvalue references</a> in VS (unless you're using conformance mode), so the standard, \"generic\", <code>std::swap</code> function works until you substitute the VS compiler for the stricter Clang compiler.</p>\n\n<p>As a result, you've been relying on extensions on all of the three toolchains for which it did work for you, and the Clang on Windows combination is the only one actually exhibiting strict compliance.</p>\n\n<p><em>(In my opinion, those three toolchains <a href=\"http://eel.is/c++draft/intro.compliance#8\" rel=\"noreferrer\">should have diagnosed this</a> so you didn't ship non-portable code this whole time. \ud83d\ude0a)</em></p>\n\n<h3>What now?</h3>\n\n<p>It may be tempting to add your own specialisation of <code>std::swap</code> and <code>std::vector&lt;bool&gt;::reference</code>, but you're not allowed to do this for standard types; indeed, it would conflict with the overloads that libstdc++ and libc++ have chosen to add as extensions.</p>\n\n<p>So, to be portable and compliant, <strong>you should change your code</strong>.</p>\n\n<p>Perhaps a good old-fashioned:</p>\n\n<pre><code>const bool temp = vb[0];\nvb[0] = vb[1];\nvb[1] = temp;\n</code></pre>\n\n<p>Or make use of <a href=\"https://en.cppreference.com/w/cpp/container/vector_bool/swap\" rel=\"noreferrer\">the special static member function that does exactly what you wanted</a>:</p>\n\n<pre><code>std::vector&lt;bool&gt;::swap(vb[0], vb[1]);\n</code></pre>\n\n<p>Also spellable as follows:</p>\n\n<pre><code>vb.swap(vb[0], vb[1]);\n</code></pre>\n",
        "OwnerUserId": "560648",
        "OwnerDisplayName": "",
        "LastEditorUserId": "560648",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-11-01 14:01:53",
        "LastActivityDate": "2019-11-01 14:01:53",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "13",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56213688",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54432583",
        "CreationDate": "2019-05-20 02:34:06",
        "DeletionDate": "",
        "Score": "4",
        "ViewCount": "",
        "Body": "<p>For <code>axis=1</code> (i.e. row-wise functions) then you can just use the following function in lieu of <code>apply</code>. I wonder why this isn't the <code>pandas</code> behavior. (Untested with compound indexes, but it does appear to be much faster than <code>apply</code>)</p>\n\n<pre><code>def faster_df_apply(df, func):\n    cols = list(df.columns)\n    data, index = [], []\n    for row in df.itertuples(index=True):\n        row_dict = {f:v for f,v in zip(cols, row[1:])}\n        data.append(func(row_dict))\n        index.append(row[0])\n    return pd.Series(data, index=index)\n</code></pre>\n",
        "OwnerUserId": "2848281",
        "OwnerDisplayName": "",
        "LastEditorUserId": "2848281",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-05-20 06:13:37",
        "LastActivityDate": "2019-05-20 06:13:37",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "3",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "59522470",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "59503760",
        "CreationDate": "2019-12-29 19:08:37",
        "DeletionDate": "",
        "Score": "8",
        "ViewCount": "",
        "Body": "<p>I forgot to see if this was an Android Studio bug. :facepalm:</p>\n\n<p>It turns out that if you run the code, it runs fine. Android Studio 3.5.3 appears to be complaining needlessly.</p>\n\n<p>I filed <a href=\"https://issuetracker.google.com/issues/146923572\" rel=\"noreferrer\">a bug report</a> to try to get confirmation of the problem.</p>\n\n<p>Many thanks to @natario, whose comment made me realize that this might be an IDE problem!</p>\n",
        "OwnerUserId": "115145",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-12-29 19:08:37",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "3",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54357469",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54357468",
        "CreationDate": "2019-01-25 00:39:13",
        "DeletionDate": "",
        "Score": "35",
        "ViewCount": "",
        "Body": "<p>You can update both the version name and the version code number in the same place in <em>pubspec.yaml</em>. Just separate them with a <code>+</code> sign. For example:</p>\n\n<pre><code>version: 2.0.0+8\n</code></pre>\n\n<p>This means</p>\n\n<ul>\n<li>The version name is <code>2.0.0</code></li>\n<li>The version code is <code>8</code></li>\n</ul>\n\n<p>This is described in the documentation of a new project (but you might have deleted that if you are working on an old project):</p>\n\n<blockquote>\n  <p>The following defines the version and build number for your application.\n  A version number is three numbers separated by dots, like 1.2.43\n  followed by an optional build number separated by a +.\n  Both the version and the builder number may be overridden in flutter\n  build by specifying --build-name and --build-number, respectively.\n  Read more about versioning at semver.org.</p>\n  \n  <p><code>version: 1.0.0+1</code></p>\n</blockquote>\n\n<p>By default a Flutter project is set up to automatically update the Android and iOS settings based on the <code>version</code> setting in pubspec.yaml when you build the project.</p>\n\n<p><strong>See also:</strong></p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/53672171/how-to-get-build-and-version-number-of-flutter-app\">How to get build and version number of Flutter app</a></li>\n</ul>\n",
        "OwnerUserId": "3681880",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-01-25 00:39:13",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "3",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54650418",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54650417",
        "CreationDate": "2019-02-12 12:44:13",
        "DeletionDate": "",
        "Score": "47",
        "ViewCount": "",
        "Body": "<p>The sample file (added at the end of the post) has a Userform, Module and a Class Module. To incorporate this into your project, simply export the Userform, Module and the Class Module from the sample file and import it into your project.</p>\n\n<p><strong>Class Module Code</strong></p>\n\n<p>In the Class Module (Let's call it <code>CalendarClass</code>) paste this code</p>\n\n<pre><code>Public WithEvents CommandButtonEvents As MSForms.CommandButton\n\n'~~&gt; Unload the form when the user presses Escape\nPrivate Sub CommandButtonEvents_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)\n    If Not f Is Nothing Then If KeyAscii = 27 Then Unload f\nEnd Sub\n\n'~~&gt; This section delas with showing/displaying controls\n'~~&gt; and updating different labels\nPrivate Sub CommandButtonEvents_Click()\n    f.Label6.Caption = CommandButtonEvents.Tag\n\n    If Left(CommandButtonEvents.Name, 1) = \"Y\" Then\n        If Len(Trim(CommandButtonEvents.Caption)) &lt;&gt; 0 Then\n            CurYear = Val(CommandButtonEvents.Caption)                \n            With f\n                .HideAllControls\n                .ShowMonthControls\n\n                .Label4.Caption = CurYear\n                .Label5.Caption = 2\n\n                .CommandButton1.Visible = False\n                .CommandButton2.Visible = False\n            End With\n        End If\n    ElseIf Left(CommandButtonEvents.Name, 1) = \"M\" Then\n        Select Case UCase(CommandButtonEvents.Caption)\n            Case \"JAN\": CurMonth = 1\n            Case \"FEB\": CurMonth = 2\n            Case \"MAR\": CurMonth = 3\n            Case \"APR\": CurMonth = 4\n            Case \"MAY\": CurMonth = 5\n            Case \"JUN\": CurMonth = 6\n            Case \"JUL\": CurMonth = 7\n            Case \"AUG\": CurMonth = 8\n            Case \"SEP\": CurMonth = 9\n            Case \"OCT\": CurMonth = 10\n            Case \"NOV\": CurMonth = 11\n            Case \"DEC\": CurMonth = 12\n        End Select\n\n        f.HideAllControls\n        f.ShowSpecificMonth\n    End If\nEnd Sub\n</code></pre>\n\n<p><strong>Module Code</strong></p>\n\n<p>In the Module (Let's call it <code>CalendarModule</code>) paste this code</p>\n\n<pre><code>Option Explicit\n\nPublic Const GWL_STYLE = -16\nPublic Const WS_CAPTION = &amp;HC00000\n\n#If VBA7 Then\n    #If Win64 Then\n        Public Declare PtrSafe Function GetWindowLongPtr Lib \"user32\" Alias _\n        \"GetWindowLongPtrA\" (ByVal hwnd As LongPtr, ByVal nIndex As Long) As LongPtr\n\n        Public Declare PtrSafe Function SetWindowLongPtr Lib \"user32\" Alias _\n        \"SetWindowLongPtrA\" (ByVal hwnd As LongPtr, ByVal nIndex As Long, _\n        ByVal dwNewLong As LongPtr) As LongPtr\n    #Else\n        Public Declare PtrSafe Function GetWindowLongPtr Lib \"user32\" Alias _\n        \"GetWindowLongA\" (ByVal hwnd As LongPtr, ByVal nIndex As Long) As LongPtr\n\n        Private Declare Function SetWindowLongPtr Lib \"user32\" Alias _\n        \"SetWindowLongA\" (ByVal hwnd As LongPtr, ByVal nIndex As Long, _\n        ByVal dwNewLong As LongPtr) As LongPtr\n    #End If\n\n    Public Declare PtrSafe Function DrawMenuBar Lib \"user32\" _\n    (ByVal hwnd As LongPtr) As LongPtr\n\n    Private Declare PtrSafe Function FindWindow Lib \"user32\" Alias _\n    \"FindWindowA\" (ByVal lpClassName As String, _\n    ByVal lpWindowName As String) As LongPtr\n\n    Private Declare PtrSafe Function SetTimer Lib \"user32\" _\n    (ByVal hwnd As LongPtr, ByVal nIDEvent As LongPtr, _\n    ByVal uElapse As LongPtr, ByVal lpTimerFunc As LongPtr) As LongPtr\n\n    Public Declare PtrSafe Function KillTimer Lib \"user32\" _\n    (ByVal hwnd As LongPtr, ByVal nIDEvent As LongPtr) As LongPtr\n\n    Public TimerID As LongPtr\n\n    Dim lngWindow As LongPtr, lFrmHdl As LongPtr\n#Else\n\n    Public Declare Function GetWindowLong _\n    Lib \"user32\" Alias \"GetWindowLongA\" ( _\n    ByVal hwnd As Long, ByVal nIndex As Long) As Long\n\n    Public Declare Function SetWindowLong _\n    Lib \"user32\" Alias \"SetWindowLongA\" ( _\n    ByVal hwnd As Long, ByVal nIndex As Long, _\n    ByVal dwNewLong As Long) As Long\n\n    Public Declare Function DrawMenuBar _\n    Lib \"user32\" (ByVal hwnd As Long) As Long\n\n    Public Declare Function FindWindowA _\n    Lib \"user32\" (ByVal lpClassName As String, _\n    ByVal lpWindowName As String) As Long\n\n    Public Declare Function SetTimer Lib \"user32\" ( _\n    ByVal hwnd As Long, ByVal nIDEvent As Long, _\n    ByVal uElapse As Long, ByVal lpTimerFunc As Long) As Long\n\n    Public Declare Function KillTimer Lib \"user32\" ( _\n    ByVal hwnd As Long, ByVal nIDEvent As Long) As Long\n\n    Public TimerID As Long\n    Dim lngWindow As Long, lFrmHdl As Long\n#End If\n\nPublic TimerSeconds As Single, tim As Boolean\nPublic CurMonth As Integer, CurYear As Integer\nPublic frmYr As Integer, ToYr As Integer\n\nPublic f As frmCalendar\n\nEnum CalendarThemes\n    Venom = 0\n    MartianRed = 1\n    ArcticBlue = 2\n    Greyscale = 3\nEnd Enum\n\nSub Launch()\n    Set f = frmCalendar\n\n    With f\n        .Caltheme = Greyscale\n        .LongDateFormat = \"dddd dd. mmmm yyyy\" '\"dddd mmmm dd, yyyy\" etc\n        .ShortDateFormat = \"dd/mm/yyyy\"  '\"mm/dd/yyyy\" or \"d/m/y\" etc\n        .Show\n    End With\nEnd Sub\n\n'~~&gt; Hide the title bar of the userform\nSub HideTitleBar(frm As Object)\n    #If VBA7 Then\n        Dim lngWindow As LongPtr, lFrmHdl As LongPtr\n        lFrmHdl = FindWindow(vbNullString, frm.Caption)\n        lngWindow = GetWindowLongPtr(lFrmHdl, GWL_STYLE)\n        lngWindow = lngWindow And (Not WS_CAPTION)\n        Call SetWindowLongPtr(lFrmHdl, GWL_STYLE, lngWindow)\n        Call DrawMenuBar(lFrmHdl)\n    #Else\n        Dim lngWindow As Long, lFrmHdl As Long\n        lFrmHdl = FindWindow(vbNullString, frm.Caption)\n        lngWindow = GetWindowLong(lFrmHdl, GWL_STYLE)\n        lngWindow = lngWindow And (Not WS_CAPTION)\n        Call SetWindowLong(lFrmHdl, GWL_STYLE, lngWindow)\n        Call DrawMenuBar(lFrmHdl)\n    #End If\nEnd Sub\n\n'~~&gt; Start Timer\nSub StartTimer()\n    '~~ Set the timer for 1 second\n    TimerSeconds = 1\n    TimerID = SetTimer(0&amp;, 0&amp;, TimerSeconds * 1000&amp;, AddressOf TimerProc)\nEnd Sub\n\n'~~&gt; End Timer\nSub EndTimer()\n    On Error Resume Next\n    KillTimer 0&amp;, TimerID\nEnd Sub\n\n'~~&gt; Update Time\n#If VBA7 And Win64 Then ' 64 bit Excel under 64-bit windows  ' Use LongLong and LongPtr\n    Public Sub TimerProc(ByVal hwnd As LongPtr, ByVal uMsg As LongLong, _\n    ByVal nIDEvent As LongPtr, ByVal dwTimer As LongLong)\n        frmCalendar.Label1.Caption = Split(Format(Time, \"h:mm:ss AM/PM\"))(0)\n        frmCalendar.Label2.Caption = Split(Format(Time, \"h:mm:ss AM/PM\"))(1)\n    End Sub\n#ElseIf VBA7 Then ' 64 bit Excel in all environments\n    Public Sub TimerProc(ByVal hwnd As LongPtr, ByVal uMsg As Long, _\n    ByVal nIDEvent As LongPtr, ByVal dwTimer As Long)\n        frmCalendar.Label1.Caption = Split(Format(Time, \"h:mm:ss AM/PM\"))(0)\n        frmCalendar.Label2.Caption = Split(Format(Time, \"h:mm:ss AM/PM\"))(1)\n    End Sub\n#Else ' 32 bit Excel\n    Public Sub TimerProc(ByVal hwnd As Long, ByVal uMsg As Long, _\n    ByVal nIDEvent As Long, ByVal dwTimer As Long)\n        frmCalendar.Label1.Caption = Split(Format(Time, \"h:mm:ss AM/PM\"))(0)\n        frmCalendar.Label2.Caption = Split(Format(Time, \"h:mm:ss AM/PM\"))(1)\n    End Sub\n#End If\n\n'~~&gt; Improvement suggested by T.M (https://stackoverflow.com/users/6460297/t-m)\n'(1) Get weekday name\nFunction wday(ByVal wd&amp;, ByVal lang As String) As String\n    ' Purpose: get weekday in \"DDD\" format\n    wday = Application.Text(DateSerial(6, 1, wd), cPattern(lang) &amp; \"ddd\")    ' the first day in year 1906 starts with a Sunday\nEnd Function\n\n'~~&gt; Improvement suggested by T.M (https://stackoverflow.com/users/6460297/t-m)\n'(2) Get month name\nFunction mon(ByVal mo&amp;, ByVal lang As String) As String\n    ' Example call: mon(12, \"1031\") or mon(12, \"de\")\n    mon = Application.Text(DateSerial(6, mo, 1), cPattern(lang) &amp; \"mmm\")\nEnd Function\n\n'~~&gt; Improvement suggested by T.M (https://stackoverflow.com/users/6460297/t-m)\n'(3) International patterns\nFunction cPattern(ByVal ctry As String) As String\n    ' Purpose: return country code pattern for above functions mon() and wday()\n    ' Codes: see https://msdn.microsoft.com/en-us/library/dd318693(VS.85).aspx\n    ctry = LCase(Trim(ctry))\n    Select Case ctry\n        Case \"1033\", \"en-us\": cPattern = \"[$-409]\" ' English (US)\n        Case \"1031\", \"de\": cPattern = \"[$-C07]\" ' German\n        Case \"1034\", \"es\": cPattern = \"[$-C0A]\" ' Spanish\n        Case \"1036\", \"fr\": cPattern = \"[$-80C]\" ' French\n        Case \"1040\", \"it\": cPattern = \"[$-410]\" ' Italian\n        ' more ...\n    End Select\nEnd Function\n</code></pre>\n\n<p><strong>Userform Code</strong></p>\n\n<p>The  Userform (Let's call it <code>frmCalendar</code>) code is too big to be posted here. Please refer to the sample file.</p>\n\n<p><strong>Screenshot</strong></p>\n\n<p><a href=\"https://i.stack.imgur.com/CkYmY.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/CkYmY.png\" alt=\"enter image description here\"></a></p>\n\n<p><strong>Themes</strong></p>\n\n<p><a href=\"https://i.stack.imgur.com/WU2MH.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/WU2MH.png\" alt=\"enter image description here\"></a></p>\n\n<p><strong>Highlights</strong></p>\n\n<ol>\n<li>No need to register any dll/ocx.</li>\n<li>Easily distributable. It is FREE.</li>\n<li>No Administratior Rights required to use this.</li>\n<li>You can select a skin for the calendar widget. One can choose from 4 themes Venom, MartianRed, ArticBlue and GreyScale.</li>\n<li>Choose Language to see Month/Day name. Support for 4 languages.</li>\n<li>Specify Long and Short date formats</li>\n</ol>\n\n<p><strong>Sample File</strong></p>\n\n<p><a href=\"https://www.dropbox.com/s/6keqqwrew862i51/New%20Calendar%20Ver%205.xlsm?dl=0\" rel=\"noreferrer\">Sample File</a></p>\n\n<p><strong>Acknowlegements</strong> @P\u1d07\u029c, @chrisneilsen and @T.M. for suggesting improvements.</p>\n\n<p><strong>What's New</strong>:</p>\n\n<p>Bugs reported by @RobinAipperspach and @Jose fixed</p>\n",
        "OwnerUserId": "1140579",
        "OwnerDisplayName": "",
        "LastEditorUserId": "1140579",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-07-10 04:51:47",
        "LastActivityDate": "2019-07-10 04:51:47",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "23",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54689596",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54650417",
        "CreationDate": "2019-02-14 11:42:26",
        "DeletionDate": "",
        "Score": "4",
        "ViewCount": "",
        "Body": "<p><strong>Get international day &amp; month names</strong></p>\n\n<blockquote>\n  <p>This answer is intended to be helpful to Sid's approach regarding <strong>internationalization</strong>; so it doesn't repeat the other code parts which I consider to be clear enough building a UserForm. If wanted, I can delete it after incorporation in Vers. 4.0. </p>\n</blockquote>\n\n<p>Just in addition to Sid's valid solution I demonstrate a simplified code to get international weekday and month names\n- c.f. <a href=\"https://stackoverflow.com/questions/48155382/dynamically-display-weekday-names-in-native-excel-language/48156068#48156068\">Dynamically display weekday names in native Excel language</a></p>\n\n<p><strong>Modified <code>ChangeLanguage</code> procedure in form's module <code>frmCalendar</code></strong></p>\n\n<pre><code>Sub ChangeLanguage(ByVal LCID As Long)\n    Dim i&amp;\n    '~~&gt; Week Day Name\n     For i = 1 To 7\n         Me.Controls(\"WD\" &amp; i).Caption = Left(wday(i, LCID), 2)\n     Next i\n    '~~&gt; Month Name\n     For i = 1 To 12\n         Me.Controls(\"M\" &amp; i).Caption = Left(mon(i, LCID), 3)\n     Next i\nEnd Sub\n</code></pre>\n\n<p><strong>Called Functions in <code>CalendarModule</code></strong></p>\n\n<p>These three functions could replace the <code>LanguageTranslations()</code> function.\nAdvantage: short code, less memory, easier maintenance, correct names</p>\n\n<pre><code>'(1) Get weekday name\nFunction wday(ByVal wd&amp;, ByVal lang As String) As String\n' Purpose: get weekday in \"DDD\" format\n  wday = Application.Text(DateSerial(6, 1, wd), cPattern(lang) &amp; \"ddd\")    ' the first day in year 1906 starts with a Sunday\nEnd Function\n\n'(2) Get month name\nFunction mon(ByVal mo&amp;, ByVal lang As String) As String\n' Example call: mon(12, \"1031\") or mon(12, \"de\")\n  mon = Application.Text(DateSerial(6, mo, 1), cPattern(lang) &amp; \"mmm\")\nEnd Function\n\n'(3) International patterns\nFunction cPattern(ByVal ctry As String) As String\n' Purpose: return country code pattern for above functions mon() and wday()\n' Codes: see https://msdn.microsoft.com/en-us/library/dd318693(VS.85).aspx\nctry = lcase(trim(ctry))\nSelect Case ctry\n  Case \"1033\", \"en-us\"\n    cPattern = \"[$-409]\" ' English (US)\n  Case \"1031\", \"de\"\n    cPattern = \"[$-C07]\" ' German\n  Case \"1034\", \"es\"\n    cPattern = \"[$-C0A]\" ' Spanish\n  Case \"1036\", \"fr\"\n    cPattern = \"[$-80C]\" ' French\n  Case \"1040\", \"it\"\n    cPattern = \"[$-410]\" ' Italian\n' more ...\nEnd Select\nEnd Function\n</code></pre>\n",
        "OwnerUserId": "6460297",
        "OwnerDisplayName": "",
        "LastEditorUserId": "6460297",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-02-14 12:13:08",
        "LastActivityDate": "2019-02-14 12:13:08",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "1",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "59559276",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "59503994",
        "CreationDate": "2020-01-02 06:40:56",
        "DeletionDate": "",
        "Score": "-2",
        "ViewCount": "",
        "Body": "<p>You can decode the JSON by calling the <code>jsonDecode()</code> function, with the JSON string as the method argument.</p>\n\n<pre><code>Map&lt;String, dynamic&gt; user = jsonDecode(jsonString);\n\nprint('Howdy, ${user['name']}!');\nprint('We sent the verification link to ${user['email']}.');\n</code></pre>\n\n<p>Now, Use the <code>User.fromJson()</code> constructor, for constructing a new User instance from a map structure and a <code>toJson()</code> method, which converts a User instance into a map.</p>\n\n<p><strong>employee.dart</strong></p>\n\n<pre><code>class Employee {\n  final String name;\n  final String id;\n\n  Employee(this.name, this.id);\n\n  Employee.fromJson(Map&lt;String, dynamic&gt; json)\n      : name = json['name'],\n        id = json['id'];\n\n  Map&lt;String, dynamic&gt; toJson() =&gt;\n    {\n      'name': name,\n      'id': id,\n    };\n}\n</code></pre>\n\n<p><code>json_serializable</code> is an automated source code generator that generates the JSON serialization boilerplate for you.</p>\n\n<p>You need one regular dependency, and two dev dependencies to include <code>json_serializable</code> in your project.</p>\n\n<pre><code>dependencies:\n  json_annotation: ^0.2.3\n\ndev_dependencies:\n  build_runner: ^0.8.0\n  json_serializable: ^0.5.0\n</code></pre>\n\n<p>For more details on JSON serialization you can refer <a href=\"https://flutter.dev/docs/development/data-and-backend/json\" rel=\"nofollow noreferrer\">here</a></p>\n\n<p>you can also use the <a href=\"https://pub.dartlang.org/packages/smoke\" rel=\"nofollow noreferrer\">Smoke</a> library.</p>\n\n<p>It's a subset of the Mirrors functionality but has both a Mirrors-based and a Codegen-based implementation. It's written by the PolymerDart team, so it's as close to \"Official\" as we're going to get.</p>\n\n<p>While developing, it'll use the Mirrors-based encoding/decoding; but for publishing you can create a small transformer that will generate code.</p>\n\n<p>Seth Ladd created <a href=\"https://gist.github.com/sethladd/34b0d812b29c3bfd9529\" rel=\"nofollow noreferrer\">a code sample here</a>, which I <a href=\"https://gist.github.com/DanTup/d0b486d276f49da93e74\" rel=\"nofollow noreferrer\">extended slightly</a> to support child-objects:</p>\n",
        "OwnerUserId": "1853243",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2020-01-02 06:40:56",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "3",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "59605830",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "59503994",
        "CreationDate": "2020-01-06 01:52:14",
        "DeletionDate": "",
        "Score": "3",
        "ViewCount": "",
        "Body": "<p>Check the build.yaml config file documentation for more info, but I think you should use the <a href=\"https://github.com/dart-lang/build/blob/master/build_config/README.md#defining-builders-to-apply-to-dependents\" rel=\"nofollow noreferrer\"><code>applies_builders</code> param</a> that allows to execute another build after the defined one.</p>\n\n<p>The example shows a builder that generates .tar.gz files and then executes another build that takes the .tar.gz files as input</p>\n\n<pre><code>builders:\n  # The regular builder config, creates .tar.gz files.\n  regular_builder:\n    import: \"package:my_package/builder.dart\"\n    builder_factories: [\"myBuilder\"]\n    build_extensions: {\".dart\": [\".tar.gz\"]}\n    auto_apply: dependents\n    apply_builders: [\":archive_extract_builder\"]\npost_process_builders:\n  # The post process builder config, extracts .tar.gz files.\n  extract_archive_builder:\n    import: \"package:my_package/extract_archive_builder.dart\"\n    builder_factory: \"myExtractArchiveBuilder\"\n    input_extensions: [\".tar.gz\"]\n</code></pre>\n\n<p>so with <code>source_gen</code> you should implement for your build </p>\n\n<pre><code>applies_builders: [\"source_gen|combining_builder\", \"json_serializable\"]\n</code></pre>\n\n<p>and configure the other builder </p>\n\n<pre><code>json_serializable:\n    import: \"package:json_serializable/builder.dart\"\n    builder_factories: [\"jsonSerializable\"]\n    build_extensions: {\".dart\": [\"json_serializable.g.part\"]}\n    auto_apply: dependents\n    build_to: cache\n    applies_builders: [\"source_gen|combining_builder\"]\n</code></pre>\n",
        "OwnerUserId": "8096916",
        "OwnerDisplayName": "",
        "LastEditorUserId": "8096916",
        "LastEditorDisplayName": "",
        "LastEditDate": "2020-01-06 01:59:45",
        "LastActivityDate": "2020-01-06 01:59:45",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "1",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "59613535",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "59503994",
        "CreationDate": "2020-01-06 14:05:12",
        "DeletionDate": "",
        "Score": "2",
        "ViewCount": "",
        "Body": "<p>It's not possible just with annotation because there maybe two packages that both have the <code>@JsonSerializable</code> annotation</p>\n\n<p>There are two situtations :</p>\n\n<ul>\n<li><p>You know what other generators should run after your generator.</p>\n\n<ul>\n<li><a href=\"https://stackoverflow.com/a/59605830/6877472\">https://stackoverflow.com/a/59605830/6877472</a> is one of the solutions</li>\n<li>you can use the other generator's code in your own generator and call their generator's.generate function. example code:</li>\n</ul></li>\n</ul>\n\n<pre class=\"lang-dart prettyprint-override\"><code>\nclass Example extends Generator {\n    @override\n    String generate(LibraryReader library, BuildStep buildStep) {\n      return JsonSerializable().generate('''\n          @JsonSerializable(nullable: false)\n          class Person {\n            final String firstName;\n            final String lastName;\n            final DateTime dateOfBirth;\n            Person({this.firstName, this.lastName, this.dateOfBirth});\n            factory Person.fromJson(Map&lt;String, dynamic&gt; json) =&gt; _PersonFromJson(json);\n            Map&lt;String, dynamic&gt; toJson() =&gt; _PersonToJson(this);\n          }\n        ''');\n     }\n\n}\n\n</code></pre>\n\n<ul>\n<li>You don't know what other generators should run after your generator.</li>\n</ul>\n\n<p>Unfortunately currently there is no way to tell the source_gen that your generator may produce a code that needs code generation.</p>\n\n<p>I created an issue here <a href=\"https://github.com/dart-lang/source_gen/issues/442\" rel=\"nofollow noreferrer\">https://github.com/dart-lang/source_gen/issues/442</a> if you want to subscribe</p>\n",
        "OwnerUserId": "6877472",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2020-01-06 14:05:12",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54598103",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54596743",
        "CreationDate": "2019-02-08 18:12:22",
        "DeletionDate": "",
        "Score": "5",
        "ViewCount": "",
        "Body": "<p>For completeness\u2019 sake, lionel\u2019s answer hints at a way of calling <code>`function`</code> after all. Unfortunately it\u2019s rather restricted, since we cannot pass any argument definition except for <code>NULL</code>:</p>\n\n<pre><code>mean5 = `function`(NULL, mean(x, ...))\nformals(mean5) = formals(mean)\n</code></pre>\n\n<p>(Note the lack of quoting around the body!)</p>\n\n<p>This is of course utterly unpractical (and <code>formals&lt;-</code> internally calls <code>as.function</code> anyway.)</p>\n",
        "OwnerUserId": "1968",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-02-08 18:12:22",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54600838",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54596743",
        "CreationDate": "2019-02-08 22:01:53",
        "DeletionDate": "",
        "Score": "4",
        "ViewCount": "",
        "Body": "<p>After digging a little bit through the source code, here are a few observations:</p>\n\n<ol>\n<li><p>The actual function creation is done by <a href=\"https://github.com/wch/r-source/blob/780021752eb83a71e2198019acf069ba8741103b/src/main/dstruct.c#L78\" rel=\"nofollow noreferrer\">mkCLOSXP()</a>. This is what gets called by <code>function() {}</code>, by <code>as.function.default()</code> and by <code>.Primitive(\"function\")</code> (a.k.a. <code>`function`</code>)</p></li>\n<li><p><code>as.function.default()</code> gets routed to <a href=\"https://github.com/wch/r-source/blob/780021752eb83a71e2198019acf069ba8741103b/src/main/coerce.c#L1521\" rel=\"nofollow noreferrer\">do_asfunction()</a>, which <a href=\"https://github.com/wch/r-source/blob/780021752eb83a71e2198019acf069ba8741103b/src/main/coerce.c#L1555\" rel=\"nofollow noreferrer\">also calls CheckFormals()</a>. However, it directly constructs these formals a few lines above that.</p></li>\n<li><p>As you pointed out, the other place where <code>CheckFormals()</code> gets called is inside <code>do_function()</code>. However, I don't think <code>do_function()</code> gets called by anything <em>other than</em> <code>.Primitive(\"function\")</code>, so this is the only situation where <code>CheckFormals()</code> is called on the user's input.</p></li>\n<li><p><code>CheckFormals()</code> does actually correctly validate a <code>pairlist</code> object.</p></li>\n</ol>\n\n<p>You can check the last point yourself by running parts of the <code>CheckFormals()</code> function using <code>inline::cfunction</code></p>\n\n<pre><code>inline::cfunction( c(x=\"ANY\"),\n  'Rprintf(\"is list?: %d\\\\nTag1 OK?: %d\\\\nTag2 OK?: %d\\\\nTag3 NULL?: %d\\\\n\",\n     isList(x), TYPEOF(TAG(x)) == SYMSXP, TYPEOF(TAG(CDR(x))) == SYMSXP,\n     CDR(CDR(x)) == R_NilValue); return R_NilValue;' )( formals(mean) )\n\n# is list?: 1\n# Tag1 OK?: 1\n# Tag2 OK?: 1\n# Tag3 NULL?: 1\n</code></pre>\n\n<p>So, somewhere between you passing <code>formals(means)</code> to <code>.Primitive(\"function\")</code> and it getting forwarded to <code>CheckFormals()</code> by <code>do_function()</code>, the argument loses its validity. (I don't know the R source well enough to tell you how that happens.) However, since <code>do_function()</code> is only called by <code>.Primitive(\"function\")</code>, you don't encounter this situation with any other examples.</p>\n",
        "OwnerUserId": "300187",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-02-08 22:01:53",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "3",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "60021402",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58759591",
        "CreationDate": "2020-02-01 21:54:49",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<p>There are some issues that I can see and they can be affected by how the compiler decides to layout memory.</p>\n\n<pre><code>    n = strlen((char *)&amp;s.b) / sizeof(BUF);\n    printf(\"%d\\n\", n);\n</code></pre>\n\n<p>In the above code <code>s.b</code> is a 23 entry array of an array of 8 characters.  When you refer to just <code>s.b</code> you are getting the address of the first entry in the 23 byte array (and the first byte in the 8 character array).  When the code says <code>&amp;s.b</code>, this is asking for the address of the address of the array.  Under the covers, the compiler is more than likely generating some local storage, storing the address of the array in there and supplying the address of the local storage to <code>strlen</code>.</p>\n\n<p>You have 2 possible solutions.  They are:</p>\n\n<pre><code>    n = strlen((char *)s.b) / sizeof(BUF);\n    printf(\"%d\\n\", n);\n</code></pre>\n\n<p>or</p>\n\n<pre><code>    n = strlen((char *)&amp;s.b[0]) / sizeof(BUF);\n    printf(\"%d\\n\", n);\n</code></pre>\n\n<p>I also tried to run your program and demonstrate the issue, but both clang and the version of gcc I have with any <code>-O</code> options still worked as you expected.  For what it's worth, I'm running clang version 9.0.0-2 and gcc version 9.2.1 on x86_64-pc-linux-gnu).</p>\n",
        "OwnerUserId": "6724071",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2020-02-01 21:54:49",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57820266",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57820195",
        "CreationDate": "2019-09-06 10:26:00",
        "DeletionDate": "",
        "Score": "43",
        "ViewCount": "",
        "Body": "<p>For <code>foo&lt;int&gt;(a)</code>, <code>ARG_T</code> is being deduced from <code>a</code>, and is not taken from the default template argument. Since it's a by value function parameter, and <code>a</code> is an expression of type <code>int</code>, it's deduced as <code>int</code>.</p>\n\n<p>In general, default template arguments are not used when template argument deduction can discover what the argument is.</p>\n\n<p>But we can force the use of the default argument by introducing a non-deduced context for the function parameter. For instance:</p>\n\n<pre><code>template &lt;class T, class ARG_T = T&amp;&gt;\nT foo(std::enable_if_t&lt;true, ARG_T&gt; v1){\n    //...\n}\n</code></pre>\n\n<p>Or the C++20 <code>type_identity</code> utility, such as the other answer demonstrates.</p>\n",
        "OwnerUserId": "817643",
        "OwnerDisplayName": "",
        "LastEditorUserId": "817643",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-09-06 10:38:21",
        "LastActivityDate": "2019-09-06 10:38:21",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "5",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57820304",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57820195",
        "CreationDate": "2019-09-06 10:28:29",
        "DeletionDate": "",
        "Score": "29",
        "ViewCount": "",
        "Body": "<p>You need to stop <a href=\"https://en.cppreference.com/w/cpp/language/template_argument_deduction#Non-deduced_contexts\" rel=\"noreferrer\">template argument deduction</a> for <code>ARG_T</code> from the function argument <code>v</code>, (with the help of <a href=\"https://en.cppreference.com/w/cpp/types/type_identity\" rel=\"noreferrer\"><code>std::type_identity</code></a>, which could be used to exclude specific arguments from deduction); Otherwise, the default template argument won't be used. e.g.</p>\n\n<pre><code>template &lt;class T, class ARG_T = T&amp;&gt;\nT foo(std::type_identity_t&lt;ARG_T&gt; v){\n    return std::is_reference&lt;decltype(v)&gt;::value;\n}\n</code></pre>\n\n<p><a href=\"https://wandbox.org/permlink/dPyHO4uD5WfyJ9Sa\" rel=\"noreferrer\">LIVE</a></p>\n\n<p>BTW: If your compiler doesn't support <code>std::type_identity</code> (since C++20), you might make your own.</p>\n\n<pre><code>template&lt;typename T&gt; struct type_identity { typedef T type; };\ntemplate&lt; class T &gt;\nusing type_identity_t = typename type_identity&lt;T&gt;::type;\n</code></pre>\n",
        "OwnerUserId": "3309790",
        "OwnerDisplayName": "",
        "LastEditorUserId": "3309790",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-09-07 07:59:40",
        "LastActivityDate": "2019-09-07 07:59:40",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "1",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54984333",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54869278",
        "CreationDate": "2019-03-04 13:29:46",
        "DeletionDate": "",
        "Score": "2",
        "ViewCount": "",
        "Body": "<p><strong>TL;DR:</strong> No, there's currently no official way to center the title on a toolbar.</p>\n\n<hr>\n\n<p>I don't think there is an official way to do it, at least not yet. But I know that the <a href=\"https://flutter.dev\" rel=\"nofollow noreferrer\">Flutter</a> framework supports it and it's pretty straight forward: you simply need to pass <code>centerTitle: true</code> to the appbar constructor, as described in this <a href=\"https://stackoverflow.com/a/43982943/5861618\">answer</a>. And there's a good chance that the apps you've mentioned in your question were built with Flutter, since both are from Google.</p>\n\n<p>I think the closest workaround to your expected layout is having the TextView on top of the Toolbar, as shown <a href=\"https://stackoverflow.com/a/39272021/5861618\">here</a>:</p>\n\n<pre><code>&lt;android.support.design.widget.AppBarLayout\n    android:id=\"@+id/appbar_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"&gt;\n    &lt;RelativeLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"&gt;\n\n        &lt;android.support.v7.widget.Toolbar\n            android:id=\"@+id/toolbar\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:theme=\"@style/ThemeOverlay.AppCompat.ActionBar\"&gt;\n        &lt;/android.support.v7.widget.Toolbar&gt;\n\n        &lt;TextView\n            android:layout_centerInParent=\"true\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"@string/app_name\"/&gt;\n\n    &lt;/RelativeLayout&gt;\n&lt;/android.support.design.widget.AppBarLayout&gt;\n</code></pre>\n\n<p>But it would be really nice if the official Android API could support this the same way flutter does. Maybe you'd like to send a feature request to the <a href=\"https://issuetracker.google.com/issues/new?component=439535&amp;template=1121918\" rel=\"nofollow noreferrer\">Material Components Android Issue Tracker</a>?</p>\n",
        "OwnerUserId": "5861618",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-03-04 13:29:46",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "3",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "60294314",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56916948",
        "CreationDate": "2020-02-19 06:31:17",
        "DeletionDate": "",
        "Score": "9",
        "ViewCount": "",
        "Body": "<p>Could you please add this line code like the following</p>\n\n<p><strong>STEP1:-</strong></p>\n\n<p><strong>@available out the SceneDelegate.swift</strong></p>\n\n<pre><code>@available(iOS 13.0, *)\nclass SceneDelegate: UIResponder, UIWindowSceneDelegate {\n\n//...\n\n}\n</code></pre>\n\n<p><strong>STEP2:-</strong></p>\n\n<p><strong>@available out some methods in AppDelegate.swift</strong></p>\n\n<pre><code>// AppDelegate.swift\n\n@available(iOS 13.0, *)\nfunc application(_ application: UIApplication, configurationForConnecting connectingSceneSession: UISceneSession, options: UIScene.ConnectionOptions) -&gt; UISceneConfiguration {\n    // Called when a new scene session is being created.\n    // Use this method to select a configuration to create the new scene with.\n    return UISceneConfiguration(name: \"Default Configuration\", sessionRole: connectingSceneSession.role)\n}\n\n@available(iOS 13.0, *)\nfunc application(_ application: UIApplication, didDiscardSceneSessions sceneSessions: Set&lt;UISceneSession&gt;) {\n    // Called when the user discards a scene session.\n    // If any sessions were discarded while the application was not running, this will be called shortly after application:didFinishLaunchingWithOptions.\n    // Use this method to release any resources that were specific to the discarded scenes, as they will not return.\n}\n</code></pre>\n\n<p><strong>STEP3:-</strong></p>\n\n<p>You should declare <strong>window</strong> property in AppDelegate.swift file\n like <em>var window: UIWindow?</em></p>\n\n<pre><code>class AppDelegate: UIResponder, UIApplicationDelegate {\n\n     var window: UIWindow?\n\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool {\n        // Override point for customization after application launch.\n        return true\n    }\n</code></pre>\n",
        "OwnerUserId": "1980105",
        "OwnerDisplayName": "",
        "LastEditorUserId": "1980105",
        "LastEditorDisplayName": "",
        "LastEditDate": "2020-02-19 06:36:33",
        "LastActivityDate": "2020-02-19 06:36:33",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "1",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57964193",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57964026",
        "CreationDate": "2019-09-16 20:46:19",
        "DeletionDate": "",
        "Score": "14",
        "ViewCount": "",
        "Body": "<p>There is value in keeping the rules as simple as possible, and \u201cdon\u2019t use a variable that might not have been initialised\u201d is as simple as it gets.</p>\n\n<p>More to the point, there is an established way of calling static methods - always use the class name, not a variable.</p>\n\n<pre><code>System.out.println(Foo.x);\n</code></pre>\n\n<p>The variable \u201cfoo\u201d is unwanted overhead that should be removed, and the compiler errors and warnings could be seen as helping leading towards that.</p>\n",
        "OwnerUserId": "681444",
        "OwnerDisplayName": "",
        "LastEditorUserId": "1393766",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-09-16 20:48:41",
        "LastActivityDate": "2019-09-16 20:48:41",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57964211",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57964026",
        "CreationDate": "2019-09-16 20:48:15",
        "DeletionDate": "",
        "Score": "20",
        "ViewCount": "",
        "Body": "<blockquote>\n  <h2><a href=\"https://docs.oracle.com/javase/specs/jls/se12/html/jls-16.html\" rel=\"noreferrer\">Chapter 16. Definite Assignment</a></h2>\n  \n  <p>Each local variable (\u00a714.4) and every blank final field (\u00a74.12.4, \u00a78.3.1.2) <strong>must have a definitely assigned value when any access of its value occurs.</strong></p>\n</blockquote>\n\n<p>It doesn't really matter <em>what</em> you try to access via a local variable. The rule is that it should be definitely assigned before that. </p>\n\n<p>To evaluate <a href=\"https://docs.oracle.com/javase/specs/jls/se12/html/jls-15.html#jls-15.11\" rel=\"noreferrer\">a field access expression</a> <code>foo.x</code>, the <a href=\"https://docs.oracle.com/javase/specs/jls/se12/html/jls-15.html#jls-Primary\" rel=\"noreferrer\"><code>primary</code></a> part of it (<code>foo</code>) must be evaluated first. It means that access to <code>foo</code> will occur, which will result in a compile-time error.</p>\n\n<blockquote>\n  <p>For every access of a local variable or blank final field x, x must be definitely assigned before the access, <strong>or a compile-time error occurs.</strong></p>\n</blockquote>\n",
        "OwnerUserId": "4922375",
        "OwnerDisplayName": "",
        "LastEditorUserId": "4922375",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-09-16 21:12:48",
        "LastActivityDate": "2019-09-16 21:12:48",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57964216",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57964026",
        "CreationDate": "2019-09-16 20:48:35",
        "DeletionDate": "",
        "Score": "73",
        "ViewCount": "",
        "Body": "<p><a href=\"https://docs.oracle.com/javase/specs/jls/se12/html/jls-15.html#jls-15.11\" rel=\"noreferrer\"><strong>\u00a715.11. Field Access Expressions</strong></a>:</p>\n\n<blockquote>\n  <p>If the field is <strong>static</strong>:</p>\n  \n  <blockquote>\n    <p><strong>The Primary expression is evaluated, and the result is discarded</strong>. If evaluation of the Primary expression completes abruptly, the field access expression completes abruptly for the same reason.</p>\n  </blockquote>\n</blockquote>\n\n<p>Where earlier it states that field access is identified by  <code>Primary.Identifier</code>.</p>\n\n<p>This shows that even though it seems to not use the <code>Primary</code>, it is still evaluated and the result is then discarded which is why it will need to be initialized.  This can make a difference when the evaluation halts the access as stated in the quote.</p>\n\n<p><strong>EDIT:</strong></p>\n\n<p>Here is a short example just to demonstrate visually that the <code>Primary</code> is evaluated even though the result is discarded:</p>\n\n<pre><code>class Foo {\n    public static int x = 1;\n\n    public static Foo dummyFoo() throws InterruptedException {\n        Thread.sleep(5000);\n        return null;\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        System.out.println(dummyFoo().x);\n        System.out.println(Foo.x);\n    }\n}\n</code></pre>\n\n<p>Here you can see that <code>dummyFoo()</code> is still evaluated because the <code>print</code> is delayed by the 5 second <code>Thread.sleep()</code> even though it always returns a <code>null</code> value which is discarded.  </p>\n\n<p>If the expression was not evaluated the <code>print</code> would appear instantly, which can be seen when the class <code>Foo</code> is used directly to access <code>x</code> with  <code>Foo.x</code>.</p>\n\n<p><strong>Note:</strong>  Method invocation is also considered a <code>Primary</code> shown in <a href=\"https://docs.oracle.com/javase/specs/jls/se12/html/jls-15.html#jls-Primary\" rel=\"noreferrer\">\u00a715.8 Primary Expressions</a>.</p>\n",
        "OwnerUserId": "11434552",
        "OwnerDisplayName": "",
        "LastEditorUserId": "11434552",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-09-17 14:05:28",
        "LastActivityDate": "2019-09-17 14:05:28",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "1",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "59359959",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "59359911",
        "CreationDate": "2019-12-16 15:47:48",
        "DeletionDate": "",
        "Score": "117",
        "ViewCount": "",
        "Body": "<p>Double braces escape the braces, so that no interpolation happens: <code>{{</code> \u279d <code>{</code>, and <code>}}</code> \u279d <code>}</code>. And <code>74</code> remains an unchanged string, <code>'74'</code>.</p>\n\n<p>With triple braces, the outer double braces are escaped, same as above. The inner braces, on the other hand, lead to regular string interpolation of the value <code>74</code>.</p>\n\n<p>That is, the string <code>f'{{{74}}}'</code> is equivalent to <code>f'{{ {74} }}'</code>, but without spaces (or, equivalently, to <code>'{' + f'{74}' + '}'</code>).</p>\n\n<p>You can see the difference when replacing the numeric constant by a variable:</p>\n\n<pre><code>In [1]: x = 74\n\nIn [2]: f'{{x}}'\nOut[2]: '{x}'\n\nIn [3]: f'{{{x}}}'\nOut[3]: '{74}'\n</code></pre>\n",
        "OwnerUserId": "1968",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-12-16 15:47:48",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "55391240",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55390991",
        "CreationDate": "2019-03-28 06:18:31",
        "DeletionDate": "",
        "Score": "13",
        "ViewCount": "",
        "Body": "<p>The bitwise operators will result in a <em>signed</em> 32 bit number, meaning that if the bit at position 31 (counting from the least significant bit at the right, which is bit 0) is 1, the number will be negative.</p>\n\n<p>To avoid this from happening, use other operators than <code>&lt;&lt;</code> or <code>|</code>, which both result in a signed 32-bit number. For instance:</p>\n\n<pre><code>(bit * 2**e) + make (more, e + 4)\n</code></pre>\n\n<h3>Forcing <em>unsigned</em> 32-bit</h3>\n\n<p>Bit shifting operators are designed to force the result into the signed 32-bit range, at least that is claimed on <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Signed_32-bit_integers\" rel=\"nofollow noreferrer\">mdn</a> (at the time of writing):</p>\n\n<blockquote>\n  <p>The operands of all bitwise operators are converted to signed 32-bit integers</p>\n</blockquote>\n\n<p>This is in fact not entirely true. The <code>&gt;&gt;&gt;</code> operator is an exception to this. <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-unsigned-right-shift-operator-runtime-semantics-evaluation\" rel=\"nofollow noreferrer\">EcmaScript 2015, section 12.5.8.1</a> states that the operands are mapped to <em>unsigned</em> 32 bit before shifting in the 0 bits. So even if you would shift <em>zero</em> bits, you'd see that effect.</p>\n\n<p>You would only have to apply it once to the final value, like for instance in your <code>print</code> function:</p>\n\n<pre><code>console.log((n&gt;&gt;&gt;0).toString(2))\n</code></pre>\n\n<h3>BigInt solution</h3>\n\n<p>If you need even more than 32 bits, and your JavaScript engine supports <a href=\"https://github.com/tc39/proposal-bigint\" rel=\"nofollow noreferrer\">BigInt</a> like <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt\" rel=\"nofollow noreferrer\">some</a> already do, then use BigInts for the operands involved in the bitwise operators -- these will then <em>not</em> use the 32-bit signed number wrapping (notice the <code>n</code> suffixes):</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const make = ([ bit, ...more ], e = 0n) =&gt;\n  bit === undefined\n    ? 0n\n    : (bit &lt;&lt; e) + make (more, e + 4n)\n\nconst print = n =&gt;\n  console.log(n.toString(2))\n\n// Test\nfor (let i=1; i&lt;20; i++) {\n    print(make(Array(i).fill(15n))) // longer and longer array...\n}</code></pre>\n</div>\n</div>\n</p>\n\n<p>NB: If you get an error running the above, try again with Chrome...</p>\n",
        "OwnerUserId": "5459839",
        "OwnerDisplayName": "",
        "LastEditorUserId": "5459839",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-03-28 18:36:56",
        "LastActivityDate": "2019-03-28 18:36:56",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "5",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54278884",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54216273",
        "CreationDate": "2019-01-20 17:12:02",
        "DeletionDate": "",
        "Score": "9",
        "ViewCount": "",
        "Body": "<p>The question is how to manipulate an image like <a href=\"https://developer.android.com/reference/android/widget/ImageView.ScaleType\" rel=\"nofollow noreferrer\"><code>ImageView.ScaleType.CENTER_CROP</code></a> but to shift the focus from the center to another location that is 20% from the top of the image. First, let's look at what <code>CENTER_CROP</code> does:</p>\n\n<p>From the <a href=\"https://developer.android.com/reference/android/widget/ImageView.ScaleType\" rel=\"nofollow noreferrer\">documentation</a>:</p>\n\n<p><strong>CENTER_CROP</strong></p>\n\n<blockquote>\n  <p>Scale the image uniformly (maintain the image's aspect ratio) so that both dimensions (width and height) of the image will be equal to or larger than the corresponding dimension of the view (minus padding). The image is then centered in the view. From XML, use this syntax: <code>android:scaleType=\"centerCrop\"</code>.</p>\n</blockquote>\n\n<p>In other words, scale the image without distortion such that either the width or height of the image (or both width and height) fit within the view so that the view is completely filled with the image (no gaps.)</p>\n\n<p>Another way to think of this is that the center of the image is \"pinned\" to the center of the view. The image is then scaled to meet the criteria above. </p>\n\n<p>In the following video, the white lines mark the center of the image; the red lines mark the center of the view. The scale type is <code>CENTER_CROP</code>.  Notice how the center points of the image and the view coincide. As the view changes size, these two points continue to overlap and always appear at the center of the view regardless of the view size.</p>\n\n<p><a href=\"https://i.stack.imgur.com/uHOOH.gif\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/uHOOH.gif\" alt=\"enter image description here\"></a></p>\n\n<p>So, what does it mean to have center crop-like behavior at a different location such as 20% from the top? Like center crop, we can specify that the point that is 20% from the top of the image and the point that 20% from the top of the view will be \"pinned\" like the 50% point is \"pinned\" in center crop. The horizontal location of this point remains at 50% of the image and view. The image can now be scaled to satisfy the other conditions of center crop which specify that either the width and/or height of the image will fit the view with no gaps. <em>(Size of view is understood to be the view size less padding.)</em></p>\n\n<p>Here is a short video of this 20% crop behavior. In this video, the white lines show the middle of the image, the red lines show the pinned point in the view and the blue line that shows behind the horizontal red line identifies 20% from the top of the image. (Demo project is on <a href=\"https://github.com/Cheticamp/DemoAlternateCrop\" rel=\"nofollow noreferrer\">GitHub</a>.</p>\n\n<p><a href=\"https://i.stack.imgur.com/FM4Z2.gif\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/FM4Z2.gif\" alt=\"enter image description here\"></a></p>\n\n<p>Here is the result showing the full image that was supplied and the video in a square frame that transition from the still image. .</p>\n\n<p><a href=\"https://i.stack.imgur.com/X1oJd.gif\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/X1oJd.gif\" alt=\"enter image description here\"></a></p>\n\n<p><strong>MainActivity.kt</strong> <br/>\n<code>prepareMatrix()</code> is the method that does the work to determine how to scale/crop the image. There is some additional work to be done with the video since it appears that the video is made to fit the <code>TextureView</code>as a scale type \"FIT_XY\" when it is assigned to the <code>TextureView</code>. Because of this scaling, the media size must be restored before <code>prepareMatrix()</code> is called for the video</p>\n\n<pre><code>class MainActivity : AppCompatActivity() {\n    private val imageResId = R.drawable.test\n    private val videoResId = R.raw.test\n    private var player: SimpleExoPlayer? = null\n    private val mFocalPoint = PointF(0.5f, 0.2f)\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        window.setBackgroundDrawable(ColorDrawable(0xff000000.toInt()))\n        super.onCreate(savedInstanceState)\n        if (cache == null) {\n            cache = SimpleCache(File(cacheDir, \"media\"), LeastRecentlyUsedCacheEvictor(MAX_PREVIEW_CACHE_SIZE_IN_BYTES))\n        }\n        setContentView(R.layout.activity_main)\n        //        imageView.visibility = View.INVISIBLE\n        imageView.setImageResource(imageResId)\n        imageView.doOnPreDraw {\n            imageView.scaleType = ImageView.ScaleType.MATRIX\n            val imageWidth: Float = ContextCompat.getDrawable(this, imageResId)!!.intrinsicWidth.toFloat()\n            val imageHeight: Float = ContextCompat.getDrawable(this, imageResId)!!.intrinsicHeight.toFloat()\n            imageView.imageMatrix = prepareMatrix(imageView, imageWidth, imageHeight, mFocalPoint, Matrix())\n            val b = BitmapFactory.decodeResource(resources, imageResId)\n            val d = BitmapDrawable(resources, b.copy(Bitmap.Config.ARGB_8888, true))\n            val c = Canvas(d.bitmap)\n            val p = Paint()\n            p.color = resources.getColor(android.R.color.holo_red_dark)\n            p.style = Paint.Style.STROKE\n            val strokeWidth = 10\n            p.strokeWidth = strokeWidth.toFloat()\n            // Horizontal line\n            c.drawLine(0f, imageHeight * mFocalPoint.y, imageWidth, imageHeight * mFocalPoint.y, p)\n            // Vertical line\n            c.drawLine(imageWidth * mFocalPoint.x, 0f, imageWidth * mFocalPoint.x, imageHeight, p)\n            // Line in horizontal and vertical center\n            p.color = resources.getColor(android.R.color.white)\n            c.drawLine(imageWidth / 2, 0f, imageWidth / 2, imageHeight, p)\n            c.drawLine(0f, imageHeight / 2, imageWidth, imageHeight / 2, p)\n\n            imageView.setImageBitmap(d.bitmap)\n            imageViewFull.setImageBitmap(d.bitmap)\n        }\n    }\n\n    fun startPlay(view: View) {\n        playVideo()\n    }\n\n    private fun getViewWidth(view: View): Float {\n        return (view.width - view.paddingStart - view.paddingEnd).toFloat()\n    }\n\n    private fun getViewHeight(view: View): Float {\n        return (view.height - view.paddingTop - view.paddingBottom).toFloat()\n    }\n\n    private fun prepareMatrix(targetView: View, mediaWidth: Float, mediaHeight: Float,\n                              focalPoint: PointF, matrix: Matrix): Matrix {\n        if (targetView.visibility != View.VISIBLE) {\n            return matrix\n        }\n        val viewHeight = getViewHeight(targetView)\n        val viewWidth = getViewWidth(targetView)\n        val scaleFactorY = viewHeight / mediaHeight\n        val scaleFactor: Float\n        val px: Float\n        val py: Float\n        if (mediaWidth * scaleFactorY &gt;= viewWidth) {\n            // Fit height\n            scaleFactor = scaleFactorY\n            px = -(mediaWidth * scaleFactor - viewWidth) * focalPoint.x / (1 - scaleFactor)\n            py = 0f\n        } else {\n            // Fit width\n            scaleFactor = viewWidth / mediaWidth\n            px = 0f\n            py = -(mediaHeight * scaleFactor - viewHeight) * focalPoint.y / (1 - scaleFactor)\n        }\n        matrix.postScale(scaleFactor, scaleFactor, px, py)\n        return matrix\n    }\n\n    private fun playVideo() {\n        player = ExoPlayerFactory.newSimpleInstance(this@MainActivity, DefaultTrackSelector())\n        player!!.setVideoTextureView(textureView)\n        player!!.addVideoListener(object : VideoListener {\n            override fun onVideoSizeChanged(width: Int, height: Int, unappliedRotationDegrees: Int, pixelWidthHeightRatio: Float) {\n                super.onVideoSizeChanged(width, height, unappliedRotationDegrees, pixelWidthHeightRatio)\n                val matrix = Matrix()\n                // Restore true media size for further manipulation.\n                matrix.setScale(width / getViewWidth(textureView), height / getViewHeight(textureView))\n                textureView.setTransform(prepareMatrix(textureView, width.toFloat(), height.toFloat(), mFocalPoint, matrix))\n            }\n\n            override fun onRenderedFirstFrame() {\n                Log.d(\"AppLog\", \"onRenderedFirstFrame\")\n                player!!.removeVideoListener(this)\n                imageView.animate().alpha(0f).setDuration(2000).start()\n                imageView.visibility = View.INVISIBLE\n            }\n        })\n        player!!.volume = 0f\n        player!!.repeatMode = Player.REPEAT_MODE_ALL\n        player!!.playRawVideo(this, videoResId)\n        player!!.playWhenReady = true\n        //        player!!.playVideoFromUrl(this, \"https://sample-videos.com/video123/mkv/240/big_buck_bunny_240p_20mb.mkv\", cache!!)\n        //        player!!.playVideoFromUrl(this, \"https://sample-videos.com/video123/mkv/720/big_buck_bunny_720p_1mb.mkv\", cache!!)\n        //        player!!.playVideoFromUrl(this@MainActivity, \"https://sample-videos.com/video123/mkv/720/big_buck_bunny_720p_1mb.mkv\")\n    }\n\n    override fun onStop() {\n        super.onStop()\n        if (player != null) {\n            player!!.setVideoTextureView(null)\n            //        playerView.player = null\n            player!!.release()\n            player = null\n        }\n    }\n\n    companion object {\n        const val MAX_PREVIEW_CACHE_SIZE_IN_BYTES = 20L * 1024L * 1024L\n        var cache: com.google.android.exoplayer2.upstream.cache.Cache? = null\n\n        @JvmStatic\n        fun getUserAgent(context: Context): String {\n            val packageManager = context.packageManager\n            val info = packageManager.getPackageInfo(context.packageName, 0)\n            val appName = info.applicationInfo.loadLabel(packageManager).toString()\n            return Util.getUserAgent(context, appName)\n        }\n    }\n\n    fun SimpleExoPlayer.playRawVideo(context: Context, @RawRes rawVideoRes: Int) {\n        val dataSpec = DataSpec(RawResourceDataSource.buildRawResourceUri(rawVideoRes))\n        val rawResourceDataSource = RawResourceDataSource(context)\n        rawResourceDataSource.open(dataSpec)\n        val factory: DataSource.Factory = DataSource.Factory { rawResourceDataSource }\n        prepare(LoopingMediaSource(ExtractorMediaSource.Factory(factory).createMediaSource(rawResourceDataSource.uri)))\n    }\n\n    fun SimpleExoPlayer.playVideoFromUrl(context: Context, url: String, cache: Cache? = null) = playVideoFromUri(context, Uri.parse(url), cache)\n\n    fun SimpleExoPlayer.playVideoFile(context: Context, file: File) = playVideoFromUri(context, Uri.fromFile(file))\n\n    fun SimpleExoPlayer.playVideoFromUri(context: Context, uri: Uri, cache: Cache? = null) {\n        val factory = if (cache != null)\n            CacheDataSourceFactory(cache, DefaultHttpDataSourceFactory(getUserAgent(context)))\n        else\n            DefaultDataSourceFactory(context, MainActivity.getUserAgent(context))\n        val mediaSource = ExtractorMediaSource.Factory(factory).createMediaSource(uri)\n        prepare(mediaSource)\n    }\n}\n</code></pre>\n",
        "OwnerUserId": "6287910",
        "OwnerDisplayName": "",
        "LastEditorUserId": "6287910",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-01-30 19:57:49",
        "LastActivityDate": "2019-01-30 19:57:49",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "1",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58322233",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58322107",
        "CreationDate": "2019-10-10 11:49:14",
        "DeletionDate": "",
        "Score": "17",
        "ViewCount": "",
        "Body": "<p>I <a href=\"https://stackoverflow.com/questions/57639853/is-comparing-two-pointers-with-undefined-behavior-if-they-are-both-cast-to-an\">once tried to find a way around this</a> and I did find a solution that works for overlapping objects and in most other cases assuming the compiler does the \"usual\" thing.</p>\n\n<p>You can first implement the suggestion in <a href=\"https://stackoverflow.com/questions/4023320/how-to-implement-memmove-in-standard-c-without-an-intermediate-copy\">How to implement memmove in standard C without an intermediate copy?</a> and then if that doesn't work cast to <code>uintptr</code> (a wrapper type for either <code>uintptr_t</code> or <code>unsigned long long</code> depending on whether <code>uintptr_t</code> is available) and get a most-likely accurate result (although it probably wouldn't matter anyway):</p>\n\n<pre><code>#include &lt;stdint.h&gt;\n#ifndef UINTPTR_MAX\ntypedef unsigned long long uintptr;\n#else\ntypedef uintptr_t uintptr;\n#endif\n\nint pcmp(const void *p1, const void *p2, size_t len)\n{\n    const unsigned char *s1 = p1;\n    const unsigned char *s2 = p2;\n    size_t l;\n\n    /* Check for overlap */\n    for( l = 0; l &lt; len; l++ )\n    {\n        if( s1 + l == s2 || s1 + l == s2 + len - 1 )\n        {\n            /* The two objects overlap, so we're allowed to\n               use comparison operators. */\n            if(s1 &gt; s2)\n                return 1;\n            else if (s1 &lt; s2)\n                return -1;\n            else\n                return 0;\n        }\n    }\n\n    /* No overlap so the result probably won't really matter.\n       Cast the result to `uintptr` and hope the compiler\n       does the \"usual\" thing */\n    if((uintptr)s1 &gt; (uintptr)s2)\n        return 1;\n    else if ((uintptr)s1 &lt; (uintptr)s2)\n        return -1;\n    else\n        return 0;\n}\n</code></pre>\n",
        "OwnerUserId": "10795151",
        "OwnerDisplayName": "",
        "LastEditorUserId": "10795151",
        "LastEditorDisplayName": "",
        "LastEditDate": "2020-01-11 17:09:11",
        "LastActivityDate": "2020-01-11 17:09:11",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56067414",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55975924",
        "CreationDate": "2019-05-09 20:52:13",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<p>Maybe staticCastValue?\nAs in you are casting a dynamic(runtime) value to a static value.\nCan be used with templates or overloads for different types.</p>\n\n<p>Or maybe assertInmutable?\nAs in you are converting a mutable type into an inmutable one.</p>\n\n<p>Or perhaps expressConstantly?\nAs in you are expressing the same value but in constant form.\nA form similar to constexpr.</p>\n\n<p>A wild one:\nstaticBifurcate?\nAs in theres two things to choose from, thus a bifurcation is there.</p>\n\n<p>bifurcate\nverb\n/\u02c8b\u028c\u026af\u0259ke\u026at/\n1.\ndivide into two branches or forks.\n\"just below Cairo the river bifurcates\"</p>\n\n<p>Or finally convertToConstExpr?\nExplicitly saying that the value will be converted to something akin or compatible with a constexpr.</p>\n",
        "OwnerUserId": "4416169",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-05-09 20:52:13",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "1",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56083145",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55975924",
        "CreationDate": "2019-05-10 18:36:11",
        "DeletionDate": "",
        "Score": "5",
        "ViewCount": "",
        "Body": "<p>Generation of specialized version of a function is called <em>cloning</em>. (see <a href=\"https://www.sciencedirect.com/science/article/pii/009605519390005L\" rel=\"noreferrer\">Procedure Cloning</a>). The term <em>clone</em> is used to name the specialized function generated by the optimizer during constant propagation (see <a href=\"https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html\" rel=\"noreferrer\">gcc doc</a>).</p>\n\n<p>The set of specialized functions generated by <code>std::visit</code> could be named <em>clone set</em>.</p>\n\n<p>This set is generated for all <a href=\"https://en.wikipedia.org/wiki/Combination\" rel=\"noreferrer\">combinations</a> of argument value. This term <em>combination</em> let us suppose that the set of possible value of each argument is finite. </p>\n\n<p>So we could have a long name for the set of clones such as, <em>set of clones for all combination of argument values</em>. An other option more obscure but shorter could be <em>combinatorial clone set</em>.</p>\n\n<p>As already pointed out, the action of selecting the right function to call in term of the argument could be called <em>dispatch</em>.</p>\n\n<p>So I would propose <code>combinatiorial_clone_set_dispatch</code> or <code>dispatch_in_combinatorial_clone_set</code> ...</p>\n",
        "OwnerUserId": "5632316",
        "OwnerDisplayName": "",
        "LastEditorUserId": "5632316",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-05-10 18:42:51",
        "LastActivityDate": "2019-05-10 18:42:51",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56088964",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55975924",
        "CreationDate": "2019-05-11 09:27:34",
        "DeletionDate": "",
        "Score": "2",
        "ViewCount": "",
        "Body": "<p>As I am unaware of a similar implementation, I'll just go type by type with bikeshed colors.</p>\n\n<hr>\n\n<pre><code>using boolean_t = std::variant&lt;std::false_type, std::true_type&gt;;\n</code></pre>\n\n<p>This is pretty self-explanatory, as it's a variant that can store one or the other of the <code>std::integral_constant</code>s for true or false. It's kind of a <code>bool</code>, but <code>bool_t</code> is likely to cause confusion. An alternative is <code>boolean_variant</code>, but that may be too verbose.</p>\n\n<hr>\n\n<pre><code>constexpr boolean_t to_boolean_t( bool b ) {\n  if (b) return std::true_type{};\n  return std::false_type{};\n}\n</code></pre>\n\n<p>I started with <code>convert_bool</code>, but that's a bit too generic. <code>to_boolean_t</code> is more expressive. <code>make_boolean_t</code> is also a possibility, as it is basically a <code>boolean_t</code> factory function. Note: I previously chose <code>to_constexpr_boolean</code>, but that's unnecessarily verbose.</p>\n\n<hr>\n\n<pre><code>template&lt;class F, class...Bools&gt;\nconstexpr auto static_eval( F&amp;&amp; f, Bools...bools ) {\n  static_assert( (std::is_same&lt;Bools, bool&gt;{} &amp;&amp; ...) );\n  return std::visit( std::forward&lt;F&gt;(f), to_boolean_t(bools)... );\n}\n</code></pre>\n\n<p>I chose <code>static_eval</code> here as I like Clonk's reasoning, but \"static\" has contextual meaning in C++, so alternatives are (in no order of importance):</p>\n\n<ul>\n<li><code>boolean_visit</code></li>\n<li><code>static_visit</code></li>\n<li><code>constexpr_eval</code></li>\n<li><code>constexpr_visit</code></li>\n</ul>\n",
        "OwnerUserId": "4732082",
        "OwnerDisplayName": "",
        "LastEditorUserId": "4732082",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-05-11 18:21:18",
        "LastActivityDate": "2019-05-11 18:21:18",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56111673",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55975924",
        "CreationDate": "2019-05-13 11:47:50",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<p><strong>You issue was:</strong>  (bold mine)</p>\n\n<blockquote>\n  <p>I'm looking for a name that is well known in any community (even a\n  non-C++ one), even a verb that describes \"<strong>taking a runtime value and\n  creating a switch and a set of compile time value in generated code to\n  pick between</strong>\" better than a sentence.</p>\n</blockquote>\n\n<p>There is, but only if you will adopt it from a related field of science:</p>\n\n<blockquote>\n  <p>The U.S. National Electrical Code (NEC) defines a switchboard as \"a\n  large single panel, frame, or assembly of panels on which are mounted,\n  on the face, back, or both, switches, over-current and other\n  protective devices, buses, and usually instruments\". The role of a\n  switchboard is to allow the division of the current supplied to the\n  switchboard into smaller currents for further distribution and to\n  provide switching, current protection and (possibly) metering for\n  those various currents. In general, switchboards may distribute power\n  to transformers, panelboards, control equipment, and, ultimately, to\n  individual system loads.</p>\n</blockquote>\n\n<p>Adopting this thinking, you would simply call it <strong>switches</strong>.</p>\n\n<p>I will also add that it is quite unusual to specify (ie. <em>repeat</em>) the storage type or cv-qualifier, etc. in type/variable names - even when not directly visible you would usually  leave that as implicit - unless it really needs to be emphasized.</p>\n",
        "OwnerUserId": "2261538",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-05-13 11:47:50",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57973036",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57964026",
        "CreationDate": "2019-09-17 11:11:50",
        "DeletionDate": "",
        "Score": "3",
        "ViewCount": "",
        "Body": "<p>Other answers perfectly explain the mechanism behind what is happening. Maybe you also wanted the rationale behind Java's specification. Not being a Java expert, I cannot give you the original reasons, but let me point this out:</p>\n\n<ul>\n<li>Every piece of code either has a meaning or it triggers a compilation error.</li>\n<li>(For statics, because an instance is unnecessary, <code>Foo.x</code> is natural.)</li>\n<li>Now, what shall we do with <code>foo.x</code> (access through instance variable)? \n\n<ul>\n<li>It could be a compilation error, as in C#, or</li>\n<li>It has a meaning. Because <code>Foo.x</code> already means \"simply access <code>x</code>\", it is reasonable that the <em>expression</em> <code>foo.x</code> has a different meaning; that is, <em>every part of the expression is valid</em> and access <code>x</code>.</li>\n</ul></li>\n</ul>\n\n<p>Let's hope someone knowledgeable can tell the real reason. :-)</p>\n",
        "OwnerUserId": "6655648",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-09-17 11:11:50",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57843036",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57842756",
        "CreationDate": "2019-09-08 14:54:12",
        "DeletionDate": "",
        "Score": "92",
        "ViewCount": "",
        "Body": "<p>C is, famously, a rather low-level language as HLLs go.  C++, though it might seem to be a considerably higher-level language than C, still shares a number of its traits.  And one of those traits is that the languages were designed by programmers, for programmers -- and, specifically, programmers who knew what they were doing.</p>\n\n<p>[For the rest of this answer I'm going to focus on C.  Most of what I'll say also applies to C++, though perhaps not as strongly.  Although as Bjarne Stroustrup has famously said, <a href=\"http://www.stroustrup.com/bs_faq.html#really-say-that\" rel=\"nofollow noreferrer\">\"C makes it easy to shoot yourself in the foot; C++ makes it harder, but when you do it blows your whole leg off.\"</a>]</p>\n\n<p>If you know what you are doing -- <em>really</em> know what you are doing -- sometimes you may have to \"break the rules\".  But most of the time, most of us will agree that well-intentioned rules keep us all out of trouble, and that wantonly breaking those rules all the time is a bad idea.</p>\n\n<p>But in C and C++, there are surprisingly large numbers of things you can do that are \"bad ideas\" but which aren't formally \"against the rules\".  Sometimes they're a bad idea some of the time (but might be defensible other times); sometimes they're a bad idea virtually all of the time.  But the tradition has always been <em>not</em> to warn about these things -- because, again, the assumption is that programmers know what they are doing, they wouldn't be doing these things without a good reason, they'd be annoyed by a bunch of unnecessary warnings.</p>\n\n<p>But of course not all programmers <em>really</em> know what they're doing.  And, in particular, every C programmer (no matter how experienced) goes through a phase of being a beginning C programmer.  And even experienced C programmers can get careless and make mistakes.</p>\n\n<p>Finally, experience has shown not only that programmers do make mistakes, but that these mistakes can have real, serious consequences.  If you make a mistake, and the compiler doesn't warn you about it, and somehow the program doesn't immediately crash or do something obviously wrong because of it, the mistake can lurk there, hidden, sometimes for years, until it causes a <em>really</em> big problem.</p>\n\n<p>So it turns out that, most of the time, warnings are a good idea, after all.  Even the experienced programmers have learned (actually, it's \"<em>especially</em> the experienced programmers have learned\") that, on balance, the warnings tend to do more good than harm.  For every time you did something wrong deliberately and the warning was a nuisance, there are probably at least ten times you did something wrong by accident and the warning saved you from further trouble.  And most warnings can be disabled or worked around for those few times when you really want to do the \"wrong\" thing.</p>\n\n<p>(A classic example of such a \"mistake\" is the test <code>if(a = b)</code>.  Most of the time, this is a mistake, so most compilers these days warn about it -- some even by default.  But if you <em>really</em> wanted to both assign <code>b</code> to <code>a</code> and test the result, you can disable the warning by typing <code>if((a = b))</code>.)</p>\n\n<p>The second question is, why would you want to ask the compiler to treat warnings as errors?  I'd say it's because of human nature, specifically, the all-too-easy reaction of saying \"Oh, that's just a warning, that's not so important, I'll clean that up later.\"  But if you're a procrastinator (and I don't know about you, but I'm a <em>terrible</em> procrastinator) it's easy to put off the necessarily cleanup for basically ever -- and if you get into the habit of ignoring warnings, it gets easier and easier to miss an <em>important</em> warning message that's sitting there, unnoticed, in the midst of all the ones you're ignoring.</p>\n\n<p>So asking the compiler to treat warnings as errors is a little trick you can play on yourself to get around this human foible.</p>\n\n<p>Personally, I'm not as insistent about treating warnings as errors.  (In fact, if I'm honest, I can say that I virtually never enable that option in my \"personal\" programming.)  But you can be sure I've got that option enabled at work, where our style guide (which I wrote) mandates its use.  And I would say -- I suspect most professional programmers would say -- that any shop that doesn't treat warnings as errors in C is behaving irresponsibly, is not adhering to commonly-accepted industry best practices.</p>\n",
        "OwnerUserId": "3923896",
        "OwnerDisplayName": "",
        "LastEditorUserId": "3923896",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-11-11 12:42:13",
        "LastActivityDate": "2019-11-11 12:42:13",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "10",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57843972",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57842756",
        "CreationDate": "2019-09-08 16:59:07",
        "DeletionDate": "",
        "Score": "2",
        "ViewCount": "",
        "Body": "<p>Some warning may mean possible semantic error in code or possible UB. E.g. <code>;</code> after <code>if()</code>, unused variable, global variable masked by local,  or comparison of signed and unsigned. Many warnings are related to static code analyzer in compiler or to breaches of ISO standard detectable at compile time, which \"require diagnostics\". While those occurrences may be legal in one particular case, they would be result of design issues most of time.</p>\n\n<p>Some compilers, e.g. gcc, have a command line option to activate \"warnings as errors\" mode, it's a nice , if cruel, tool to educate novice coders.</p>\n",
        "OwnerUserId": "2742717",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-09-08 16:59:07",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57848116",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57842756",
        "CreationDate": "2019-09-09 05:03:48",
        "DeletionDate": "",
        "Score": "-31",
        "ViewCount": "",
        "Body": "<p>Take it easy: you don't have to, it is not necessary. -Wall and -Werror was designed by code-refactoring maniacs for themselves: <strong>it was invented by compiler developers to avoid breaking existing builds after compiler updates on the user side</strong>. The feature is nothing, but all about the decision to break or not to break the build.</p>\n\n<p>It is totally up to your preference to use it or not. I use it all the time because it helps me to fix my mistakes.</p>\n",
        "OwnerUserId": "2873201",
        "OwnerDisplayName": "",
        "LastEditorUserId": "2873201",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-10-07 04:32:16",
        "LastActivityDate": "2019-10-07 04:32:16",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "5",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57848301",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57842756",
        "CreationDate": "2019-09-09 05:27:26",
        "DeletionDate": "",
        "Score": "39",
        "ViewCount": "",
        "Body": "<p>Warnings consist of the best advice some of the most skilled C++ developers could bake into an application.  They're worth keeping around.</p>\n\n<p>C++, being a Turing complete language, has plenty of cases where the compiler must simply trust that you knew what you are doing.  However, there are many cases where the compiler can realize that you probably did not intend to write what you wrote.   A classic example is printf() codes which don't match the arguments, or std::strings passed to printf (not that that <em>ever</em> happens to me!).  In these cases, the code you wrote is not an error.  It is a valid C++ expression with a valid interpretation for the compiler to act on.  But the compiler has a strong hunch that you simply overlooked something which is easy for a modern compiler to detect.  These are warnings.  They are things that are obvious to a compiler, using all the strict rules of C++ at its disposal, that you might have overlooked.</p>\n\n<p>Turning warnings off, or ignoring them, is like choosing to ignore free advice from those more skilled than you.  Its a lesson in huberis that ends either when you fly too close to the sun and your wings melt, or a memory corruption error occurs.  Between the two, I'll take falling from the sky any day!</p>\n\n<p>\"Treat warnings as errors\" is the extreme version of this philosophy.  The idea here is that you resolve <em>every</em> warning the compiler gives you -- you listen to every bit of free advice and act on it.  Whether this is a good model for development for you depends on the team and what kind of product you are working on.  It's the ascetic approach that a monk might have.  For some, it works great.  For others, it does not.</p>\n\n<p>On many of my applications we do not treat warnings as errors.  We do this because these particular applications need to compile on several platforms with several compilers of varying ages.  Sometimes we find it is actually impossible to fix a warning on one side without it turning into a warning on another platform.  So we are merely careful.  We respect warnings, but we don't bend over backwards for them.</p>\n",
        "OwnerUserId": "2728148",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-09-09 05:27:26",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "17",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57849551",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57842756",
        "CreationDate": "2019-09-09 07:29:42",
        "DeletionDate": "",
        "Score": "19",
        "ViewCount": "",
        "Body": "<p>Not only does handling the warnings make better code, it makes you a better programmer. Warnings will tell you about things that may seem little to you today, but one day that bad habit will come back and bite your head off. </p>\n\n<p>Use the correct type, return that value, evaluate that return value. Take time and reflect \"Is this really the correct type in this context?\" \"Do I need to return this?\" And the biggie; \"Is this code going to be portable for the next 10 years?\"</p>\n\n<p>Get into the habit of writing warning-free code in the first place.</p>\n",
        "OwnerUserId": "716681",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-09-09 07:29:42",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56403085",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56402988",
        "CreationDate": "2019-06-01 00:50:24",
        "DeletionDate": "",
        "Score": "8",
        "ViewCount": "",
        "Body": "<p>One thing I love about python is that you can peak into source code of almost anything. And from <code>pd.Series.eq</code> source code, it calls:</p>\n\n<pre><code>def flex_wrapper(self, other, level=None, fill_value=None, axis=0):\n    # other stuff\n    # ...\n\n    if isinstance(other, ABCSeries):\n        return self._binop(other, op, level=level, fill_value=fill_value)\n</code></pre>\n\n<p>and go on to <code>pd.Series._binop</code>:</p>\n\n<pre><code>def _binop(self, other, func, level=None, fill_value=None):\n\n    # other stuff\n    # ...\n    if not self.index.equals(other.index):\n        this, other = self.align(other, level=level, join='outer',\n                                 copy=False)\n        new_index = this.index\n</code></pre>\n\n<p>That means the <code>eq</code> operator aligns the two series before comparison (which, apparently, the normal operator <code>==</code> does not).</p>\n",
        "OwnerUserId": "4238408",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-06-01 00:50:24",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56403101",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56402988",
        "CreationDate": "2019-06-01 00:53:42",
        "DeletionDate": "",
        "Score": "5",
        "ViewCount": "",
        "Body": "<p>Back to 2012 , when we do not have <code>eq</code> , <code>ne</code> and <code>gt</code> , <code>pandas</code> have the problem : disorder <code>Series</code> will return the unexpected output with logic (<code>&gt;,&lt;,==,!=</code>) , so they doing with a fix (new function added, <code>gt</code>,<code>ge</code>,<code>ne</code>..) </p>\n\n<p>GitHub Ticket <a href=\"https://github.com/pandas-dev/pandas/issues/1134\" rel=\"noreferrer\">reference</a> </p>\n",
        "OwnerUserId": "7964527",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-06-01 00:53:42",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56403114",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56402988",
        "CreationDate": "2019-06-01 00:56:31",
        "DeletionDate": "",
        "Score": "31",
        "ViewCount": "",
        "Body": "<p>Viewing the whole traceback for a Series comparison with mismatched indexes, particularly focusing on the exception message:</p>\n\n<pre><code>In [1]: import pandas as pd\nIn [2]: x = pd.Series([1, 2, 3], index=list('abc'))\nIn [3]: y = pd.Series([2, 3, 3], index=list('bca'))\nIn [4]: x == y\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n&lt;ipython-input-4-73b2790c1e5e&gt; in &lt;module&gt;()\n----&gt; 1 x == y\n/usr/lib/python3.7/site-packages/pandas/core/ops.py in wrapper(self, other, axis)\n   1188 \n   1189         elif isinstance(other, ABCSeries) and not self._indexed_same(othe\nr):\n-&gt; 1190             raise ValueError(\"Can only compare identically-labeled \"\n   1191                              \"Series objects\")\n   1192 \nValueError: Can only compare identically-labeled Series objects\n</code></pre>\n\n<p>we see that this is a deliberate implementation decision. Also, this is not unique to Series objects - DataFrames raise a similar error.</p>\n\n<p>Digging through the Git blame for the relevant lines eventually turns up some relevant commits and issue tracker threads. For example, <code>Series.__eq__</code> used to completely ignore the RHS's index, and in a <a href=\"https://github.com/pandas-dev/pandas/issues/1134#issuecomment-5347816\" rel=\"noreferrer\">comment</a> on a bug report about that behavior, Pandas author Wes McKinney says the following:</p>\n\n<blockquote>\n  <p>This is actually a feature / deliberate choice and not a bug-- it's\n  related to <a href=\"https://github.com/pandas-dev/pandas/issues/652\" rel=\"noreferrer\">#652</a>. Back in January I changed the comparison methods to\n  do auto-alignment, but found that it led to a large amount of bugs /\n  breakage for users and, in particular, many NumPy functions (which\n  regularly do things like <code>arr[1:] == arr[:-1]</code>; example: <code>np.unique</code>)\n  stopped working.</p>\n  \n  <p>This gets back to the issue that Series isn't quite ndarray-like\n  enough and should probably not be a subclass of ndarray.</p>\n  \n  <p>So, I haven't got a good answer for you except for that;\n  auto-alignment would be ideal but I don't think I can do it unless I\n  make Series not a subclass of ndarray. I think this is probably a good\n  idea but not likely to happen until 0.9 or 0.10 (several months down\n  the road).</p>\n</blockquote>\n\n<p>This was then <a href=\"https://github.com/pandas-dev/pandas/commit/5152cdd77ba4799a276d2716535255c3301e9741\" rel=\"noreferrer\">changed</a> to the current behavior in pandas 0.19.0. Quoting the <a href=\"http://pandas.pydata.org/pandas-docs/version/0.19.0/whatsnew.html#series-operators-for-different-indexes\" rel=\"noreferrer\">\"what's new\" page</a>:</p>\n\n<blockquote>\n  <p>Following Series operators have been changed to make all operators\n  consistent, including DataFrame (<a href=\"https://github.com/pydata/pandas/issues/1134\" rel=\"noreferrer\">GH1134</a>, <a href=\"https://github.com/pydata/pandas/issues/4581\" rel=\"noreferrer\">GH4581</a>,\n  <a href=\"https://github.com/pydata/pandas/issues/13538\" rel=\"noreferrer\">GH13538</a>)</p>\n  \n  <ul>\n  <li>Series comparison operators now raise ValueError when index are different.</li>\n  <li>Series logical operators align both index of left and right hand side.</li>\n  </ul>\n</blockquote>\n\n<p>This made the Series behavior match that of DataFrame, which already rejected mismatched indices in comparisons.</p>\n\n<p>In summary, making the comparison operators align indices automatically turned out to break too much stuff, so this was the best alternative.</p>\n",
        "OwnerUserId": "2357112",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-06-01 00:56:31",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "1",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54618177",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54617101",
        "CreationDate": "2019-02-10 15:54:07",
        "DeletionDate": "",
        "Score": "6",
        "ViewCount": "",
        "Body": "<p>Here is what the <a href=\"https://timsong-cpp.github.io/cppwp/n4659/class.mem#23\" rel=\"noreferrer\">common-initial-sequence rule says about unions</a>:</p>\n\n<blockquote>\n  <p>In a standard-layout union with an active member of struct type <code>T1</code>, it is permitted to read a non-static data member <code>m</code> of another union member of struct type <code>T2</code> provided m is part of the common initial sequence of T1 and T2; the behavior is as if the corresponding member of T1 were nominated.</p>\n</blockquote>\n\n<p>Your code does not qualify. Why? Because you are not <em>reading</em> from \"another union member\". You are doing <code>m.x = 42;</code>. That isn't reading; that's calling a member function of another union member.</p>\n\n<p>So it doesn't qualify for the common initial sequence rule. And without the common-initial-sequence rule to protect you, accessing non-active members of the union is UB.</p>\n",
        "OwnerUserId": "734069",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-02-10 15:54:07",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "1",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56719936",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55462658",
        "CreationDate": "2019-06-22 23:34:30",
        "DeletionDate": "",
        "Score": "2",
        "ViewCount": "",
        "Body": "<p>Python 3 Apache Beam + BigQuery\nHere\u2019s the key Beam code to read from BigQuery and write to BigQuery:</p>\n\n<pre><code>with beam.Pipeline(RUNNER, options = opts) as p:\n    (p \n      | 'read_bq' &gt;&gt; beam.io.Read(beam.io.BigQuerySource(query=query, use_standard_sql=True))\n      | 'compute_fit' &gt;&gt; beam.FlatMap(compute_fit)\n      | 'write_bq' &gt;&gt; beam.io.gcp.bigquery.WriteToBigQuery(\n          'ch05eu.station_stats', schema='station_id:string,ag:FLOAT64,bg:FLOAT64,cg:FLOAT64')\n    )\n</code></pre>\n\n<p>Essentially, we are running a query on a BigQuery table, running the Python method compute_fit, and writing the output to a BigQuery table.\nThis is my compute_fit method. As you can see, it\u2019s just plain Python code:</p>\n\n<pre><code>def compute_fit(row):\n  from scipy import stats\n  import numpy as np\n  durations = row['duration_array']\n  ag, bg, cg = stats.gamma.fit(durations)\n  if np.isfinite(ag) and np.isfinite(bg) and np.isfinite(cg):\n      result = {}\n      result['station_id'] = str(row['start_station_id'])\n      result['ag'] = ag\n      result['bg'] = bg\n      result['cg'] = cg\n      yield result\n</code></pre>\n\n<p>Make sure to specify the Python packages that you need installed on the Dataflow workers in a requirements.txt:</p>\n\n<pre><code>%%writefile requirements.txt\nnumpy\nscipy\n</code></pre>\n\n<p>Enjoy!\nfor more info you could refer to this document <a href=\"https://thepythoncoding.blogspot.com/2019/06/how-to-run-python-code-on-your-bigquery.html\" rel=\"nofollow noreferrer\">How to run Python code on your BigQuery table</a></p>\n",
        "OwnerUserId": "10033286",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-06-22 23:34:30",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "55934491",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55934490",
        "CreationDate": "2019-05-01 09:56:54",
        "DeletionDate": "",
        "Score": "66",
        "ViewCount": "",
        "Body": "<p>Reserved keywords cannot be used as <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Reserved_word_usage\" rel=\"noreferrer\">identifiers (variable names)</a>. Unlike most other special Javascript words (like those listed in the question, <code>let</code>, <code>finally</code>, ...), <code>await</code> is <em>not</em> a reserved keyword, so using it as a variable name does not throw a SyntaxError. Why wasn't it made into a reserved keyword when the new syntax came out?</p>\n\n<h1>Backwards compatibility</h1>\n\n<p>Back in 2011, when ES5 was still a relatively new thing, code that used <code>await</code> (and <code>async</code>) as variable names was perfectly valid, so you may have seen something like this on a couple sites:</p>\n\n<pre><code>function timeout(ms) {\n  var await = $.Deferred();\n  setTimeout(await.resolve, ms);\n  return await.promise();\n};\n</code></pre>\n\n<p>The choice of that variable name may seem odd, but there was nothing <em>wrong</em> with it. <code>await</code> and <code>async</code> have never been reserved keywords - if the writers of the ES2017 specification made <code>await</code> into a reserved keyword, and browsers implemented that change, people visiting those older sites on newer browsers would not be able to use those sites; they would likely be broken.</p>\n\n<p>So perhaps if they were made into reserved keywords, a <em>few</em> sites which chose a peculiar variable name wouldn't work properly - why should the existence of those sites permanently affect the future evolution of ECMAscript and result in confusing code like in the question?</p>\n\n<p><strong>Because browsers will refuse to implement a feature which breaks existing sites.</strong> If a user finds that a site does not work on one browser, but works on another, that will incentivize them to switch browsers - the maker of the first browser would not want that, because that would mean less market share for them, even if it's a feature which makes the language more consistent and understandable. In addition, the editors of the specification do not want to add something that will never be implemented (or will only be implemented sporadically), because then the specification would lose some of its status as a standard - contrary to its main goal.</p>\n\n<p>You could see these interactions in action with <a href=\"https://github.com/tc39/proposal-flatMap/pull/56\" rel=\"noreferrer\"><code>Array.prototype.flatten</code></a> and <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1075059\" rel=\"noreferrer\"><code>Array.prototype.contains</code></a> - when browsers started shipping them, it was found that they broke a few existing sites due to name conflicts, so the browsers backed out of the implementation, and the specification had to be tweaked (the methods were renamed to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\" rel=\"noreferrer\"><code>.flat</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\" rel=\"noreferrer\"><code>.includes</code></a>).</p>\n\n<hr>\n\n<p>There actually <em>is</em> a situation in which <code>await</code> cannot be used as an identifier, which is inside of ES6 modules:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script type=\"module\"&gt;\n  const await = 'Does it work?';\n&lt;/script&gt;</code></pre>\n</div>\n</div>\n</p>\n\n<p>This is because while ES6 (ES2015) modules were being figured out, <code>async</code>/<code>await</code> was already on the horizon (<a href=\"https://github.com/tc39/ecmascript-asyncawait/commit/97b5cbee1594b2861f3e9f4771beb39747ba064c\" rel=\"noreferrer\">initial commit for the <code>async</code>/<code>await</code> proposal</a> can be seen at the beginning of 2014), so while designing modules, <code>await</code> could be made a reserved keyword in preparation for the future, without breaking any existing sites.</p>\n\n<hr>\n\n<p>With regards to the first snippet in the question:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const foo = await /barbaz/\nmyFn()</code></pre>\n</div>\n</div>\n</p>\n\n<p>This is syntactically valid because <code>await</code> is a valid variable name outside of <code>async</code> functions, and the interpreter thinks you're trying to <em>divide</em>, rather than use a regular expression:</p>\n\n<pre><code>const foo = await / barbaz / myFn()\n</code></pre>\n\n<p>Not relying on Automatic Semicolon Insertion would have identified the problem earlier, because the last <code>/</code> could not have been interpreted as division:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const foo = await /barbaz/;\nmyFn();</code></pre>\n</div>\n</div>\n</p>\n\n<p>This exact somewhat-ambiguous situation was actually specifically brought up in a <a href=\"https://github.com/rwaldron/tc39-notes/blob/master/es7/2016-07/jul-28.md#10iv-async-functions\" rel=\"noreferrer\">TC39 meeting</a> on <code>async</code>/<code>await</code>:</p>\n\n<blockquote>\n  <p><strong>YK:</strong> What are you worried about?</p>\n  \n  <p><strong>WH:</strong> Ambiguities on code sequences that start with await/ and then get interpreted in diverging ways (due to the await-as-identifier vs await-as-operator distinction that flips the / between division and starting a regexp) by cover grammars vs. real grammars. It's a potential bug farm.</p>\n</blockquote>\n",
        "OwnerUserId": "9515207",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-05-01 09:56:54",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58656323",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58654714",
        "CreationDate": "2019-11-01 08:44:13",
        "DeletionDate": "",
        "Score": "87",
        "ViewCount": "",
        "Body": "<p>OK, Turns out if you watch the WWDC video, they explain it:\n<a href=\"https://developer.apple.com/videos/play/wwdc2019/416/\" rel=\"noreferrer\">https://developer.apple.com/videos/play/wwdc2019/416/</a></p>\n\n<p>You need to set the <strong>Build Libraries for Distribution</strong> option to <strong>Yes</strong> in your framework's build settings, otherwise the swift compiler doesn't generate the neccessary <code>.swiftinterface</code> files which are the key to future compilers being able to load your old library.</p>\n\n<p>This ends up in your project.pbxproj file as:</p>\n\n<pre><code>BUILD_LIBRARY_FOR_DISTRIBUTION = YES;\n</code></pre>\n\n<p>After setting this flag, a framework I compiled using Xcode 11.0 (swift 5.1) was able to be used by Xcode 11.2 (swift 5.1.2) and everything appears to be working correctly.</p>\n\n<p>Hopefully this question/answer will serve as a useful reference for everyone who hasn't watched all the WWDC videos</p>\n\n<p>If the error still persists go to <strong>Product</strong> > <strong>Clean Build Folder</strong> and <strong>Build</strong> again. </p>\n",
        "OwnerUserId": "234",
        "OwnerDisplayName": "",
        "LastEditorUserId": "2854494",
        "LastEditorDisplayName": "",
        "LastEditDate": "2020-02-05 16:29:02",
        "LastActivityDate": "2020-02-05 16:29:02",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "13",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58817118",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58654714",
        "CreationDate": "2019-11-12 10:50:58",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<p>I had the same error importing 3rd party libraries.\nI fixed it using toolchains in Xcode and taking the release September 19 2019 from here <a href=\"https://swift.org/download/#releases\" rel=\"nofollow noreferrer\">https://swift.org/download/#releases</a>.\nAfter that I had to re-import my libraries and it worked.</p>\n",
        "OwnerUserId": "12213553",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-11-12 10:50:58",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58883382",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58654714",
        "CreationDate": "2019-11-15 19:20:27",
        "DeletionDate": "",
        "Score": "3",
        "ViewCount": "",
        "Body": "<p>I started seeing the same issue and found out that I was using the incorrect xcode Command Line Tools. Went to Preferences > Locations and changed the command line tools from Xcode 11.1 to 11.2.1. Just to be safe, I also cleared the derived data directory and ran <code>carthage build</code>.</p>\n",
        "OwnerUserId": "5419979",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-11-15 19:20:27",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "59062682",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58654714",
        "CreationDate": "2019-11-27 03:44:08",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<p>You can use Carthage to add the RxSwift framework. </p>\n\n<p>Basically, Carthage gives you a similar <em>traditional RxSwift.framework style package</em>.</p>\n\n<p>Then try <code>carthage update --no-use-binaries</code>.</p>\n",
        "OwnerUserId": "4810957",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-11-27 03:44:08",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58933423",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58932991",
        "CreationDate": "2019-11-19 11:48:21",
        "DeletionDate": "",
        "Score": "11",
        "ViewCount": "",
        "Body": "<p>util.smartptr.shared.const/9 in C++ 11:</p>\n\n<blockquote>\n  <p>Effects: Constructs a shared_ptr object that owns the object p and the deleter d. The second and fourth constructors shall use a copy of a to allocate memory for internal use.</p>\n</blockquote>\n\n<p>The second and fourth constructors have these prototypes:</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>template&lt;class Y, class D, class A&gt; shared_ptr(Y* p, D d, A a);\ntemplate&lt;class D, class A&gt; shared_ptr(nullptr_t p, D d, A a);\n</code></pre>\n\n<p>In the latest draft, util.smartptr.shared.const/10 is equivalent for our purpose:</p>\n\n<blockquote>\n  <p>Effects: Constructs a shared_\u00adptr object that owns the object p and the deleter d. When T is not an array type, the first and second constructors enable shared_\u00adfrom_\u00adthis with p. The second and fourth constructors shall use a copy of a to allocate memory for internal use. If an exception is thrown, d(p) is called.</p>\n</blockquote>\n\n<p>So the allocator is used if there is a need to allocate it in allocated memory. Based on the current standard and at relevant defect reports, allocation is not mandatory but assumed by the committee.</p>\n\n<ul>\n<li><p>Although the interface of <code>shared_ptr</code> allows an implementation where there is never a control block and all <code>shared_ptr</code> and <code>weak_ptr</code> are put in a linked list, there is no such implementation in practice. Additionally, the wording has been modified assuming, for instance, that the <code>use_count</code> is shared.</p></li>\n<li><p>The deleter is required to only move constructible. Thus, it is not possible to have several copies in the <code>shared_ptr</code>.</p></li>\n</ul>\n\n<p>One can imagine an implementation which puts the deleter in a specially designed <code>shared_ptr</code> and moves it when it the special <code>shared_ptr</code> is deleted. While the implementation seems conformant, it is also strange, especially since a control block may be needed for the use count (it is perhaps possible but even weirder to do the same thing with the use count).</p>\n\n<p>Relevant DRs I found: <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#545\" rel=\"nofollow noreferrer\">545</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#575\" rel=\"nofollow noreferrer\">575</a>, <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2434\" rel=\"nofollow noreferrer\">2434</a> (which acknowledge that all implementations are using a control block and seem to imply that multi-threading constraints somewhat mandate it), <a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2802\" rel=\"nofollow noreferrer\">2802</a> (which requires that the deleter only move constructible and thus prevents implementation where the deleter is copied between several <code>shared_ptr</code>'s).</p>\n",
        "OwnerUserId": "136208",
        "OwnerDisplayName": "",
        "LastEditorUserId": "11134827",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-11-24 14:28:01",
        "LastActivityDate": "2019-11-24 14:28:01",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "7",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58933578",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58932991",
        "CreationDate": "2019-11-19 11:57:02",
        "DeletionDate": "",
        "Score": "4",
        "ViewCount": "",
        "Body": "<p>From <a href=\"https://en.cppreference.com/w/cpp/memory/shared_ptr\" rel=\"nofollow noreferrer\">std::shared_ptr</a> we have:</p>\n\n<blockquote>\n  <p>The control block is a dynamically-allocated object that holds:  </p>\n</blockquote>\n\n<ul>\n<li>either a pointer to the managed object or the managed object itself;</li>\n<li><strong>the deleter (type-erased);</strong></li>\n<li>the allocator (type-erased);</li>\n<li>the number of shared_ptrs that own the managed object;</li>\n<li>the number of weak_ptrs that refer to the managed object.</li>\n</ul>\n\n<p>And from <a href=\"https://en.cppreference.com/w/cpp/memory/shared_ptr/allocate_shared\" rel=\"nofollow noreferrer\">std::allocate_shared</a> we get:</p>\n\n<pre><code>template&lt; class T, class Alloc, class... Args &gt;\nshared_ptr&lt;T&gt; allocate_shared( const Alloc&amp; alloc, Args&amp;&amp;... args );\n</code></pre>\n\n<blockquote>\n  <p>Constructs an object of type T and wraps it in a std::shared_ptr [...] in order to use <strong>one allocation for both the control block</strong> of the shared pointer and the T object.</p>\n</blockquote>\n\n<p>So it looks like <a href=\"https://en.cppreference.com/w/cpp/memory/shared_ptr/allocate_shared\" rel=\"nofollow noreferrer\">std::allocate_shared</a> should allocate the <code>deleter</code> with your <code>Alloc</code>.</p>\n\n<p>EDIT: And from <code>n4810</code> \u00a720.11.3.6 Creation [util.smartptr.shared.create]</p>\n\n<blockquote>\n  <p>1 The common requirements that apply to all <code>make_shared</code>, <strong><code>allocate_shared</code></strong>, <code>make_shared_default_init</code>,\n  and <code>allocate_shared_default_init</code> overloads, unless specified otherwise, are described below. </p>\n  \n  <p>[...]</p>\n  \n  <p>7 Remarks:\n  (7.1) \u2014 <strong>Implementations should perform no more than one memory allocation. [Note: This provides\n  efficiency equivalent to an intrusive smart pointer. \u2014end note]</strong></p>\n</blockquote>\n\n<p>[Emphasis all mine]</p>\n\n<p>So the standard is saying that <code>std::allocate_shared</code> <em>should</em> use <code>Alloc</code> for the control block.</p>\n",
        "OwnerUserId": "1312406",
        "OwnerDisplayName": "",
        "LastEditorUserId": "1312406",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-11-20 10:42:39",
        "LastActivityDate": "2019-11-20 10:42:39",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "11",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56273494",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56273345",
        "CreationDate": "2019-05-23 10:43:39",
        "DeletionDate": "",
        "Score": "45",
        "ViewCount": "",
        "Body": "<p>An identifier that uses the scope resolution operator is a qualified name as per [expr.prim.id.qual]. Otherwise it is unqualified.</p>\n\n<p>The standard doesn't define the meaning of <em>fully qualified</em>, but it <em>does</em> mention it in [library]/[requirements]/[organization]/[contents] which says (quote from standard draft)</p>\n\n<blockquote>\n  <p>Whenever a name x defined in the standard library is mentioned, the name x is assumed to be fully qualified as ::std::x, unless explicitly described otherwise.\n  For example, if the Effects: element for library function F is described as calling library function G, the function ::std::G is meant.</p>\n</blockquote>\n\n<p>Wikipedia defines <a href=\"https://en.wikipedia.org/wiki/Fully_qualified_name\" rel=\"noreferrer\">Fully qualified name</a>:</p>\n\n<blockquote>\n  <p>In computer programming, a fully qualified name is an unambiguous name that specifies which object, function, or variable a call refers to without regard to the context of the call</p>\n</blockquote>\n\n<p>Only a name qualified starting from the global namespace is unambiguous without context. This is the common usage.</p>\n",
        "OwnerUserId": "2079303",
        "OwnerDisplayName": "",
        "LastEditorUserId": "2079303",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-05-28 18:07:03",
        "LastActivityDate": "2019-05-28 18:07:03",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56273510",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56273345",
        "CreationDate": "2019-05-23 10:44:15",
        "DeletionDate": "",
        "Score": "23",
        "ViewCount": "",
        "Body": "<p>Indeed, it is not a standard term. It has no definition in the standard.</p>\n\n<p>However, the phrase \"fully qualified\" appears exactly once, in [contents] (15.5.1.1 \"Library contents\" in the as-of-writing most current draft N4800) paragraph 3:</p>\n\n<blockquote>\n  <p>Whenever a name <code>x</code> defined in the standard library is mentioned, the name <code>x</code> is assumed to be fully qualified as <code>::std::x</code>, unless explicitly described otherwise.</p>\n</blockquote>\n\n<p>So in this definition, only names starting with <code>::</code> are fully qualified.</p>\n",
        "OwnerUserId": "8922",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-05-23 10:44:15",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54776760",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54776759",
        "CreationDate": "2019-02-19 23:59:00",
        "DeletionDate": "",
        "Score": "3",
        "ViewCount": "",
        "Body": "<p>If you're not in strict mode, one possibility is to iterate over the property names of the global (or <code>with</code>ed) object, and create another object from those properties, whose setters and getters all throw <code>ReferenceErrors</code>, and then nest your code in <em>another</em> <code>with</code> over that object. See comments in the code below.</p>\n\n<p>This isn't a <em>nice</em> solution, but it's the only one I can think of:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const makeObjWhosePropsThrow = inputObj =&gt; Object.getOwnPropertyNames(inputObj)\n  .reduce((a, propName) =&gt; {\n    const doThrow = () =&gt; { throw new ReferenceError(propName + ' is not defined!'); };\n    Object.defineProperty(a, propName, { get: doThrow, set: doThrow });\n    return a;\n  }, {});\n\n// (using setTimeout so that console shows both this and the next error)\nsetTimeout(() =&gt; {\n  const windowWhichThrows = makeObjWhosePropsThrow(window);\n  with (windowWhichThrows) {\n    /* Use an IIFE\n     * so that variables with the same name declared with \"var\" inside\n     * create a locally scoped variable\n     * rather than try to reference the property, which would throw\n     */\n    (() =&gt; { \n      // Declaring any variable name will not throw:\n      var alert = true;  // window.alert\n      const open = true; // window.open\n      \n      // Referencing a property name without declaring it first will throw:\n      const foo = location;\n    })();\n  }\n});\n\nconst obj = { prop1: 'prop1' };\nwith (obj) {\n  const inner = makeObjWhosePropsThrow(obj);\n  with (inner) {\n    // Referencing a property name without declaring it first will throw:\n    console.log(prop1);\n  }\n}</code></pre>\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.as-console-wrapper {\n  max-height: 100% !important;\n}</code></pre>\n</div>\n</div>\n</p>\n\n<p>Caveats:</p>\n\n<ul>\n<li>This explicitly uses <code>with</code>, which is forbidden in strict mode</li>\n<li>This doesn't <em>exactly</em> escape the implicit <code>with(global)</code> scope, or the <code>with(obj)</code> scope: variables in the outer scope with the same name as a property will not be referenceable.</li>\n<li><code>window</code> has a property <code>window</code>, which refers to <code>window</code>. <code>window.window === window</code>. So, referencing <code>window</code> inside the <code>with</code> will throw. Either explicitly exclude the <code>window</code> property, or save another reference to <code>window</code> first.</li>\n</ul>\n",
        "OwnerUserId": "9515207",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-02-19 23:59:00",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54984866",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54869278",
        "CreationDate": "2019-03-04 14:02:53",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<p>How about <code>textAlignment=\"center\"</code>? a <code>RelativeLayout</code> does the trick, when <code>AppCompatTextView</code> has set <code>layout_width=\"match_parent\"</code>; for example:</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;layout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt;\n\n    &lt;androidx.appcompat.widget.LinearLayoutCompat\n        android:id=\"@+id/customView\"\n        android:minHeight=\"?android:attr/actionBarSize\"\n        android:layout_height=\"wrap_content\"\n        android:layout_width=\"match_parent\"\n        android:orientation=\"vertical\"\n        android:gravity=\"top\"&gt;\n\n        &lt;RelativeLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"&gt;\n\n            &lt;!-- Home Button --&gt;\n            &lt;include\n                layout=\"@layout/button_home_menu\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_gravity=\"start\"/&gt;\n\n            &lt;androidx.appcompat.widget.LinearLayoutCompat\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:orientation=\"vertical\"\n                android:padding=\"8dp\"&gt;\n\n                &lt;androidx.appcompat.widget.AppCompatTextView\n                    android:id=\"@+id/title\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"wrap_content\"\n                    android:text=\"@string/app_name\"\n                    android:textAlignment=\"center\"\n                    android:textAppearance=\"?android:attr/textAppearanceLarge\"\n                    android:textSize=\"18sp\"\n                    android:textStyle=\"bold\"/&gt;\n\n                &lt;androidx.appcompat.widget.AppCompatTextView\n                    android:id=\"@+id/subtitle\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"wrap_content\"\n                    android:text=\"@string/app_version\"\n                    android:textAlignment=\"center\"\n                    android:textAppearance=\"?android:attr/textAppearanceMedium\"\n                    android:textSize=\"12sp\"\n                    android:textStyle=\"bold\"/&gt;\n\n            &lt;/androidx.appcompat.widget.LinearLayoutCompat&gt;\n\n        &lt;/RelativeLayout&gt;\n\n    &lt;/androidx.appcompat.widget.LinearLayoutCompat&gt;\n\n&lt;/layout&gt;\n</code></pre>\n\n<p>the down-side is, that when showing several menu-items as action buttons - or when displaying extraordinary long strings as title, the title may overlap them - but when only showing one or two action buttons in combination with a title that fits the visually available width, this works just fine - that's because menu config <code>ifRoom</code> would always apply, because there is room. else one could only measure, which side of the toolbar has the most wide items' container - and then adjust the width on the other side's items' container. scaling the font-size depending on the available room might also be an option, to make it fit dynamically.</p>\n",
        "OwnerUserId": "549372",
        "OwnerDisplayName": "",
        "LastEditorUserId": "549372",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-03-04 14:31:26",
        "LastActivityDate": "2019-03-04 14:31:26",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "7",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "55073557",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54869278",
        "CreationDate": "2019-03-09 02:52:53",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<p>No official way to do it but subclassing provides most coverage without crazy tricks. </p>\n\n<p><a href=\"https://gist.github.com/bmc08gt/40a151e93969f2633b9b92bca4b31e83\" rel=\"nofollow noreferrer\">https://gist.github.com/bmc08gt/40a151e93969f2633b9b92bca4b31e83</a></p>\n",
        "OwnerUserId": "4608592",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-03-09 02:52:53",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "54669151",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54503331",
        "CreationDate": "2019-02-13 11:30:58",
        "DeletionDate": "",
        "Score": "4",
        "ViewCount": "",
        "Body": "<p>First of all a caveat: I am not familiar with the mp4parser library but your question looked interesting so I took a look.</p>\n\n<p>I think its worth you looking at one of the classes the code comments say is \"mainly for testing\". <code>InMemRandomAccessSourceImpl</code>. To create a Movie from any URI, the code would be as follows:</p>\n\n<pre><code>try {\n    InputStream  inputStream = getContentResolver().openInputStream(uri);\n    Log.e(\"InputStream Size\",\"Size \" + inputStream);\n    int  bytesAvailable = inputStream.available();\n    int bufferSize = Math.min(bytesAvailable, MAX_BUFFER_SIZE);\n    final byte[] buffer = new byte[bufferSize];\n\n    int read = 0;\n    int total = 0;\n    while ((read = inputStream.read(buffer)) !=-1 ) {\n        total += read;\n    }\n    if( total &lt; bytesAvailable ){\n        Log.e(TAG, \"Read from input stream failed\")\n        return;\n    }\n    //or try inputStream.readAllBytes() if using Java 9\n    inputStream.close();\n\n    ByteBuffer bb = ByteBuffer.wrap(buffer);\n    Movie m2 = MovieCreator.build(new ByteBufferByteChannel(bb),\n        new InMemRandomAccessSourceImpl(bb), \"inmem\");\n\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n}\n</code></pre>\n\n<p>But I would say, there looks to be somewhat of a conflict between what you want to achieve and the approach the parser takes. It is depending on local files to avoid large memory overheads, and random access to bytes can only be done if the entire set of data is available, which differs from a streaming approach. </p>\n\n<p>It will require buffering at least the amount of data required for your clip in one go before the parser is given the buffer. That might be workable for you if you are looking to grab short sections and the buffering is not too cumbersome. You may be subject to IO exceptions and the like if the read from the <code>InputStream</code> has issues, especially if it is remote content, whereas you really aren't expecting that with a file on a modern system. </p>\n\n<p>There is also <code>MemoryFile</code> to consider which provides an ashmem backed file-like object. I think somehow that could be worked in.</p>\n",
        "OwnerUserId": "949224",
        "OwnerDisplayName": "",
        "LastEditorUserId": "949224",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-02-13 12:23:49",
        "LastActivityDate": "2019-02-13 12:23:49",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "7",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "59413816",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54650417",
        "CreationDate": "2019-12-19 16:43:30",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<p>This is my first post here. I felt compelled to share as the loss of the calendar in Excel was a huge deal and this calendar SiddhartRout created is incredible. So, MANY thanks to @SiddhartRout for putting together this really amazing calendar. I made changes to the cosmetics but most of the underlying meat of it is still all Siddhart's work with some minor changes to meet my use case. </p>\n\n<p><strong>Cosmetic changes</strong>:</p>\n\n<ul>\n<li>Replaced ALL of the buttons with borderless labels so it looks a lot more like the Windows 10 calendar</li>\n<li>The border of the labels will appear/disappear on mouse enter/exit</li>\n<li>I grayed out days that aren't for the current month. The 'gray out' is a different color that matches better for each theme.</li>\n<li>Modified the theme colors to my liking. Added a label to click for cycling through the themes. </li>\n<li>Changed the font to Calibri</li>\n<li>added color change on mouse entry to month/year and arrow controls</li>\n<li>Use this site for all of you color code needs --> <a href=\"https://www.rapidtables.com/web/color/RGB_Color.html\" rel=\"nofollow noreferrer\">RGB Color Codes</a></li>\n</ul>\n\n<p><strong>Code Changes</strong> </p>\n\n<ul>\n<li>Optimized the Property Let Caltheme making it easier to setup and add theme colors or entirely new themes</li>\n<li>I couldn't get the 'ESC to exit' to work reliably so i replaced it with an 'X'. It stopped crashing as much as well.</li>\n<li>Removed the localization stuff as i'll never need it</li>\n<li>Changing from buttons to labels required modifying some object variables where needed throughout the project</li>\n<li>Added public variables used to store RGB values allowing use of theme colors throughout the project providing for more consistent and easier application of selected theme</li>\n<li>User selected theme stored in the hidden sheet so it's persistent between runs</li>\n<li>Removed the checkmark button &amp; launch directly from a click on any day.</li>\n</ul>\n\n<p><strong>Screenshots of each theme:</strong></p>\n\n<p><a href=\"https://i.stack.imgur.com/jCvic.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/jCvic.png\" alt=\"Venom 2\"></a>  <a href=\"https://i.stack.imgur.com/leSy4.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/leSy4.png\" alt=\"MartianRed 2\"></a><br>\n<a href=\"https://i.stack.imgur.com/GtEbP.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/GtEbP.png\" alt=\"ArcticBlue 2\"></a>  <a href=\"https://i.stack.imgur.com/WcwbN.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/WcwbN.png\" alt=\"GreyScale 2\"></a></p>\n\n<p><strong>Download link for code:</strong></p>\n\n<ul>\n<li><a href=\"https://www.dropbox.com/s/tu78cptbpkwwsiq/Win10ExcelCal.xlsm?dl=0\" rel=\"nofollow noreferrer\">Win10ExcelCal.xlsm</a></li>\n</ul>\n",
        "OwnerUserId": "12565892",
        "OwnerDisplayName": "",
        "LastEditorUserId": "12565892",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-12-19 18:52:30",
        "LastActivityDate": "2019-12-19 18:52:30",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "3",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58252664",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58252538",
        "CreationDate": "2019-10-05 22:01:33",
        "DeletionDate": "",
        "Score": "21",
        "ViewCount": "",
        "Body": "<p>This is hard-coded in the definition of <code>static_cast</code>:</p>\n\n<blockquote>\n  <p><strong>[expr.static.cast]</strong> (emphasis mine)</p>\n  \n  <p><a href=\"https://timsong-cpp.github.io/cppwp/n4659/expr.static.cast#1\" rel=\"noreferrer\">1</a> The result of the expression <code>static_\u00adcast&lt;T&gt;(v)</code> is the result\n  of converting the expression <code>v</code> to type <code>T</code>. <strong>If <code>T</code> is an lvalue\n  reference type or an rvalue reference to function type, the result is\n  an lvalue</strong>; if <code>T</code> is an rvalue reference to object type, the result is\n  an xvalue; otherwise, the result is a prvalue. The <code>static_\u00adcast</code>\n  operator shall not cast away constness.</p>\n</blockquote>\n\n<p><code>decltype</code> respects the value category of its operand, and produces an lvalue reference for lvalue expressions.</p>\n\n<p>The reasoning may be due to function names themselves always being lvalues, and so an rvalue of a function type cannot appear \"in the wild\". As such, casting to that type probably makes little sense.</p>\n",
        "OwnerUserId": "817643",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-10-05 22:01:33",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "1",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56941692",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56936336",
        "CreationDate": "2019-07-08 19:47:33",
        "DeletionDate": "",
        "Score": "2",
        "ViewCount": "",
        "Body": "<p>Absolutely not! NTLM and Kerberos operate completely different. First of all, I would highly recommend get rid off NTLM as fast as you can.</p>\n\n<p>You can solve your problem in an easy fashion if you can access C interfaces. I also assume you MIT Kerberos on a Unix-like OS like CentOS or FreeBSD, etc.</p>\n\n<p>NTLM will provide you the downlevel logon name. You need first to convert the NetBIOS domain to a DNS domain via LDAP (use <code>libopenldap</code>) then you can construct the Kerberos principal or the enterprise principal for your client. Then create a service account in your KDC and enable protocol transition and contrained delegation on that account for the target service. Now request a TGT on behalf of that user principal and request a service ticket for the user, voila you can access your Kerberos backend.\nHere is a decent read: <a href=\"https://k5wiki.kerberos.org/wiki/Projects/Services4User\" rel=\"nofollow noreferrer\">https://k5wiki.kerberos.org/wiki/Projects/Services4User</a></p>\n\n<p>If you run HTTPd as your reverse proxy, it might handle all the magic for your with <code>mod_auth_gssapi</code>.</p>\n\n<p>On Windows, this is a bit of a pain with the security API and SSPI. While the the principal transformation comes for free with Windows. You'll need <code>LsaLogonUser</code> with <code>KERB_S4U_LOGON</code>, impersonate with that handle and then require SSPI to acquire a cred handle...</p>\n",
        "OwnerUserId": "696632",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-07-08 19:47:33",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "5",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57088395",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56936336",
        "CreationDate": "2019-07-18 06:36:48",
        "DeletionDate": "",
        "Score": "2",
        "ViewCount": "",
        "Body": "<p>If your KDC allows constrained delegation, you can setup your intermedaite server to allow impersonation. This way it can established security context with the client in one mechanism (in your case, NTLM), and talk to the backend server on behalf of the client in another mechanism (Kerberos). Google for \"constrained delegation\" and \"protocol transition\" for more information. Hope this helps.</p>\n",
        "OwnerUserId": "1061575",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-07-18 06:36:48",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57239093",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57239089",
        "CreationDate": "2019-07-28 08:16:31",
        "DeletionDate": "",
        "Score": "6",
        "ViewCount": "",
        "Body": "<p>I found <a href=\"https://askubuntu.com/questions/841761/should-i-create-an-alias-for-each-bash-function\">an Ask Ubuntu question about a related topic</a> where one of the answers alleges that this is a misunderstanding of a different design principle: give the function a long and descriptive name, and create a shorter alias for convenience.</p>\n\n<p>This still offers no insight into why you would have the alias redeclare the function every time.</p>\n",
        "OwnerUserId": "874188",
        "OwnerDisplayName": "",
        "LastEditorUserId": "874188",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-07-28 08:22:05",
        "LastActivityDate": "2019-07-28 08:22:05",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "4",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57245366",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57239089",
        "CreationDate": "2019-07-28 22:15:58",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<p>You can use the alias for turning on and off a function that you don't want to change.\nSuppose you have have code that calls the function <code>_</code>. You can switch the implementation of the function for another one with</p>\n\n<pre><code>alias f='_ () { echo \"useful code\"; }; _'\nalias g='_ () { echo \"Other useful code\"; }; _'\nalias h='_ () { echo \"Special code\"; }; _'\n</code></pre>\n\n<p>And now you can call</p>\n\n<pre><code>f\n_\ng\n_\nh\n_\nf\n</code></pre>\n\n<p>@DavidC.Rankin commented correctly, that it looked terrible.<br>\nI agree.<br>\nI thought of some way to use it. You might use it for testing software, something like</p>\n\n<pre><code>alias ok='commitTransaction () { echo \"commited\"; return 0; }'\nalias nok='commitTransaction () { echo \"unknown error\"; return 1; }'\nalias locked='commitTransaction () { echo \"locked\"; return 2; }'\nalias slow='commitTransaction () { sleep 20; echo \"commited\"; return 0;  }'\n</code></pre>\n\n<p>And now the tester can run his testcases:</p>\n\n<pre><code>ok\n# And now start ok test\nnok\n# And now start nok test\n</code></pre>\n\n<p>Still hacking, why not make a better teststub?</p>\n",
        "OwnerUserId": "3220113",
        "OwnerDisplayName": "",
        "LastEditorUserId": "3220113",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-07-28 22:52:36",
        "LastActivityDate": "2019-07-28 22:52:36",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "3",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57275844",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57239089",
        "CreationDate": "2019-07-30 16:08:45",
        "DeletionDate": "",
        "Score": "13",
        "ViewCount": "",
        "Body": "<p>Here are my 2 cents on this and it represents my personal opinion as well as understanding on the topic. </p>\n\n<ul>\n<li>Using aliases with functions is to some extent a personal preference of developers. I will add some differences between the two approaches, which may also account for personal preferences of using aliases vs functions</li>\n<li>There are times when most of the things I want to do are possible with aliases itself but only a few require to take a parameter. So instead of mixing aliases with functions, I use an alias with the function itself</li>\n</ul>\n\n<p>Example:</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>alias kgps='kubectl get pods --all-namespaces | grep '\n</code></pre>\n\n<p>This works great and I can search my kubernetes pods. Now for deleting these pods, I need to pass the same parameter but in between the command, so I use an alias with a function inside</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>alias kdp=\"_(){ kubectl get pods --all-namespaces  | grep \\$1 | awk '{print \\$2}' | xargs kubectl delete pod; }; _\"\n</code></pre>\n\n<p>So most of my shortcut commands are possible to execute through <code>aliases</code> and only few which needs such things I use aliases with functions.</p>\n\n<h2>Aliases vs Functions</h2>\n\n<p>Now there are few differences between aliases and functions which I would like to highlight</p>\n\n<p><strong>Aliases can override system commands much more easily compared to functions</strong></p>\n\n<p>If I need to override <code>ls</code>, I can do that much easier with <code>alias</code></p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>alias ls='ls -altrh'\n</code></pre>\n\n<p>While a function equivalent of the same would be like below</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>ls() { command ls -altrh \"$@\";}\nls() { /bin/ls -altrh \"$@\";}\n</code></pre>\n\n<p><strong>Aliases intention is mostly for shortcuts</strong></p>\n\n<p>Aliases are majorly used to create shortcut commands while functions are used for a lot of things, complex combinations of commands, auto-completion, bash prompts</p>\n\n<p><strong>Aliases are easier to manage</strong></p>\n\n<p>Run <code>alias</code> command you get a list of currently active aliases</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>$ alias\n....\nvs='vagrant ssh'\nvu='vagrant up'\nvus='vu &amp;&amp; vs'\n....\n</code></pre>\n\n<p>To get the list of functions we need to use <code>declare -f</code> or another similar command</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>$ declare -f | wc -l\n  8226\n$ alias | wc -l\n  217\n</code></pre>\n\n<p>Now if I post a partial output of <code>declare -f</code> I get</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>$ declare -f\n...\nvi_mode_prompt_info () {\n    return 1\n}\nvirtualenv_prompt_info () {\n    return 1\n}\nwork_in_progress () {\n    if $(git log -n 1 2&gt;/dev/null | grep -q -c \"\\-\\-wip\\-\\-\")\n    then\n        echo \"WIP!!\"\n    fi\n}\nzle-line-finish () {\n    echoti rmkx\n}\nzle-line-init () {\n    echoti smkx\n}\nzsh_stats () {\n    fc -l 1 | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] \" \" CMD[a]/count*100 \"% \" a;}' | grep -v \"./\" | column -c3 -s \" \" -t | sort -nr | nl | head -n20\n}\n</code></pre>\n\n<p>As you can see there are lots of functions which are used but are not relevant to me. While the <code>alias</code> command gives me a very concise output and I can easily see what all is there. In my case, 100% of them are shortcut commands</p>\n\n<p><strong>Escaping aliases and functions syntax is different for system commands</strong></p>\n\n<p>To escape a defined alias you need to prefix it with <code>\\</code> while for <code>functions</code> you need to either use <code>command &lt;originalcommand&gt;</code> or absolute path of the command <code>/bin/originalcommand</code></p>\n\n<p><strong>Aliases have higher priority over function</strong></p>\n\n<p>Look at the below example</p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>alias ls='echo alias &amp;&amp; ls'\n$ ls() { /bin/ls -al }\nalias\n$ ls\nalias\ntotal 23173440\ndrwxrwxr-x+ 255 tarunlalwani  staff        8160 Jul 30 22:39 .\ndrwxr-xr-x+ 113 tarunlalwani  staff        3616 Jul 30 23:12 ..\n...\n</code></pre>\n\n<p>As you can see when we run the <code>ls</code> command, first the alias is used and then the next <code>ls</code> is calling the function. </p>\n\n<p>This becomes also a way of wrapping an exiting function with the same name and re-using the original function inside as well, which can only be done using <code>alias</code> and promotes the format in the question</p>\n",
        "OwnerUserId": "2830850",
        "OwnerDisplayName": "",
        "LastEditorUserId": "3834036",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-08-05 20:34:40",
        "LastActivityDate": "2019-08-05 20:34:40",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "5",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57363062",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57239089",
        "CreationDate": "2019-08-05 17:02:22",
        "DeletionDate": "",
        "Score": "5",
        "ViewCount": "",
        "Body": "<p>I found this <a href=\"https://unix.stackexchange.com/questions/30925/in-bash-when-to-alias-when-to-script-and-when-to-write-a-function/233751#233751\">answer too <em>[U&amp;L] In Bash, when to alias, when to script, and when to write a function?</em></a> which explains the benefit of defining a function in an alias.</p>\n\n<blockquote>\n  <p>The benefit of doing so over declaring a function is that your alias\n  cannot be simply overwritten by source-ing (or using <code>.</code>) a script which\n  happens to declare a same-named function.</p>\n</blockquote>\n",
        "OwnerUserId": "3819421",
        "OwnerDisplayName": "",
        "LastEditorUserId": "8344060",
        "LastEditorDisplayName": "",
        "LastEditDate": "2020-01-20 13:58:58",
        "LastActivityDate": "2020-01-20 13:58:58",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58324379",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58322107",
        "CreationDate": "2019-10-10 13:41:31",
        "DeletionDate": "",
        "Score": "5",
        "ViewCount": "",
        "Body": "<blockquote>\n  <p>Does C offer something with similar functionality which would allow safely comparing arbitrary pointers.</p>\n</blockquote>\n\n<p>No</p>\n\n<hr>\n\n<p>First let us only consider <em>object pointers</em>.  <em>Function pointers</em> bring in a whole other set of concerns.</p>\n\n<p>2 pointers <code>p1, p2</code> can have different encodings and point to the same address so <code>p1 == p2</code> even though <code>memcmp(&amp;p1, &amp;p2, sizeof p1)</code> is not 0.   Such architectures are rare.</p>\n\n<p>Yet conversion of these pointer to <code>uintptr_t</code> does not require the same integer result leading to <code>(uintptr_t)p1 != (uinptr_t)p2</code>.  </p>\n\n<p><code>(uintptr_t)p1 &lt; (uinptr_t)p2</code> itself is well legal code, by may not provide the hoped for functionality.  </p>\n\n<hr>\n\n<p>If code truly needs to compare unrelated pointers, form a helper function <code>less(const void *p1, const void *p2)</code> and perform platform specific code there.</p>\n\n<p>Perhaps:</p>\n\n<pre><code>// return -1,0,1 for &lt;,==,&gt; \nint ptrcmp(const void *c1, const void *c1) {\n  // Equivalence test works on all platforms\n  if (c1 == c2) {\n    return 0;\n  }\n  // At this point, we know pointers are not equivalent.\n  #ifdef UINTPTR_MAX\n    uintptr_t u1 = (uintptr_t)c1;\n    uintptr_t u2 = (uintptr_t)c2;\n    // Below code \"works\" in that the computation is legal,\n    //   but does it function as desired?\n    // Likely, but strange systems lurk out in the wild. \n    // Check implementation before using\n    #if tbd\n      return (u1 &gt; u2) - (u1 &lt; u2);\n    #else\n      #error TBD code\n    #endif\n  #else\n    #error TBD code\n  #endif \n}\n</code></pre>\n",
        "OwnerUserId": "2410359",
        "OwnerDisplayName": "",
        "LastEditorUserId": "2410359",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-10-10 21:31:06",
        "LastActivityDate": "2019-10-10 21:31:06",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58332627",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58322107",
        "CreationDate": "2019-10-11 00:14:00",
        "DeletionDate": "",
        "Score": "20",
        "ViewCount": "",
        "Body": "<p>On implementations with a flat memory model (basically everything), casting to <code>uintptr_t</code> will Just Work. </p>\n\n<p>(But see <a href=\"https://stackoverflow.com/questions/47687805/should-pointer-comparisons-be-signed-or-unsigned-in-64-bit-x86\">Should pointer comparisons be signed or unsigned in 64-bit x86?</a> for discussion of whether you should treat pointers as signed or not, including issues of forming pointers outside of objects which is UB in C.)</p>\n\n<p><strong>But systems with non-flat memory models do exist, and thinking about them can help explain the current situation, like C++ having different specs for <code>&lt;</code> vs. <code>std::less</code>.</strong></p>\n\n<hr>\n\n<p>Part of the point of <code>&lt;</code> on pointers to separate objects being UB in C (or at least unspecified in some C++ revisions) is to allow for weird machines, including non-flat memory models.</p>\n\n<p>A well-known example is x86-16 real mode where pointers are segment:offset, forming a 20-bit linear address via <code>(segment &lt;&lt; 4) + offset</code>.  The same linear address can be represented by multiple different seg:off combinations.</p>\n\n<p><strong>C++ <code>std::less</code> on pointers on weird ISAs might need to be expensive</strong>, e.g. \"normalize\" a segment:offset on x86-16 to have offset &lt;= 15.  However, there's no <em>portable</em> way to implement this.  <strong>The manipulation required to normalize a <code>uintptr_t</code> (or the object-representation of a pointer object) is implementation-specific.</strong></p>\n\n<p>But even on systems where C++ <code>std::less</code> has to be expensive, <code>&lt;</code> doesn't have to be.  For example, assuming a \"large\" memory model where an object fits within one segment, <code>&lt;</code> can just compare the offset part and not even bother with the segment part.  (Pointers inside the same object will have the same segment, and otherwise it's UB in C.  C++17 changed to merely \"unspecified\", which might still allow skipping normalization and just comparing offsets.)  This is assuming all pointers to any part of an object always use the same <code>seg</code> value, never normalizing.  This is what you'd expect an ABI to require for a \"large\" as opposed to \"huge\" memory model.  (See <a href=\"https://stackoverflow.com/questions/58322107/does-c-have-an-equivalent-of-stdless-from-c/58332627#comment103050729_58332627\">discussion in comments</a>).</p>\n\n<p>(Such a memory model might have a max object size of 64kiB for example, but a much larger max total address space that has room for many such max-sized objects.  ISO C allows implementations to have a limit on object size that's lower than the max value (unsigned) <code>size_t</code> can represent, <code>SIZE_MAX</code>.  For example even on flat memory model systems, GNU C limits max object size to <code>PTRDIFF_MAX</code> so size calculation can ignore signed overflow.)  See <a href=\"https://stackoverflow.com/questions/9386979/what-is-the-maximum-size-of-an-array-in-c/9387041#9387041\">this answer</a> and discussion in comments.</p>\n\n<p>If you want to allow objects larger than a segment, you need a \"huge\" memory model that has to worry about overflowing the offset part of a pointer when doing <code>p++</code> to loop through an array, or when doing indexing / pointer arithmetic.  This leads to slower code everywhere, but would probably mean that <code>p &lt; q</code> would happen to work for pointers to different objects, because an implementation targeting a \"huge\" memory model would normally choose to keep all pointers normalized all the time.  See <a href=\"https://stackoverflow.com/questions/3575592/what-are-near-far-and-huge-pointers\">What are near, far and huge pointers?</a> - some real C compilers for x86 real mode did have an option to compile for the \"huge\" model where all pointers defaulted to \"huge\" unless declared otherwise.</p>\n\n<p><strong>x86 real-mode segmentation isn't the only non-flat memory model possible</strong>, it's merely a useful concrete example to illustrate how it's been handled by C/C++ implementations.  In real life, implementations extended ISO C with the concept of <code>far</code> vs. <code>near</code> pointers, allowing programmers to choose when they can get away with just storing / passing around the 16-bit offset part, relative to some common data segment.</p>\n\n<p>But a pure ISO C implementation would have to choose between a small memory model (everything except code in the same 64kiB with 16-bit pointers) or large or huge with all pointers being 32-bit.  Some loops could optimize by incrementing just the offset part, but pointer objects couldn't be optimized to be smaller.</p>\n\n<hr>\n\n<p><strong>If you knew what the magic manipulation was for any given implementation, you could implement it in pure C</strong>.  The problem is that different systems use different addressing and the details aren't parameterized by any portable macros.</p>\n\n<p>Or maybe not: it might involve looking something up from a special segment table or something, e.g. like x86 protected mode instead of real mode where the segment part of the address is an index, not a value to be left shifted.  You could set up partially-overlapping segments in protected mode, and the segment selector parts of addresses wouldn't necessarily even be ordered in the same order as the corresponding segment base addresses.  Getting a linear address from a seg:off pointer in x86 protected mode might involve a system call, if the GDT and/or LDT aren't mapped into readable pages in your process.</p>\n\n<p>(Of course mainstream OSes for x86 use a flat memory model so the segment base is always 0 (except for thread-local storage using <code>fs</code> or <code>gs</code> segments), and only the 32-bit or 64-bit \"offset\" part is used as a pointer.)</p>\n\n<p>You could manually add code for various specific platforms, e.g. by default assume flat, or <code>#ifdef</code> something to detect x86 real mode and split <code>uintptr_t</code> into 16-bit halves for <code>seg -= off&gt;&gt;4; off &amp;= 0xf;</code> then combine those parts back into a 32-bit number.</p>\n",
        "OwnerUserId": "224132",
        "OwnerDisplayName": "",
        "LastEditorUserId": "2676371",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-12-30 23:03:27",
        "LastActivityDate": "2019-12-30 23:03:27",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "18",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58123882",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58123398",
        "CreationDate": "2019-09-26 19:54:45",
        "DeletionDate": "",
        "Score": "42",
        "ViewCount": "",
        "Body": "<blockquote>\n  <p>What is the difference between JSX.Element, ReactNode and ReactElement?</p>\n</blockquote>\n\n<p>A ReactElement is an object with a type and props.</p>\n\n<pre><code> interface ReactElement&lt;P = any, T extends string | JSXElementConstructor&lt;any&gt; = string | JSXElementConstructor&lt;any&gt;&gt; {\n    type: T;\n    props: P;\n    key: Key | null;\n}\n</code></pre>\n\n<p>A ReactNode is a ReactElement, a ReactFragment, a string, a number or an array of ReactNodes, or null, or undefined, or a boolean:</p>\n\n<pre><code>type ReactText = string | number;\ntype ReactChild = ReactElement | ReactText;\n\ninterface ReactNodeArray extends Array&lt;ReactNode&gt; {}\ntype ReactFragment = {} | ReactNodeArray;\n\ntype ReactNode = ReactChild | ReactFragment | ReactPortal | boolean | null | undefined;\n</code></pre>\n\n<p>JSX.Element is a ReactElement, with the generic type for props and type being any. It exists, as various libraries can implement JSX in their own way, therefore JSX is a global namespace that then gets set by the library, React sets it like this:</p>\n\n<pre><code>declare global {\n  namespace JSX {\n    interface Element extends React.ReactElement&lt;any, any&gt; { }\n  }\n}\n</code></pre>\n\n<p>By example:</p>\n\n<pre><code> &lt;p&gt; // &lt;- ReactElement = JSX.Element\n   &lt;Custom&gt; // &lt;- ReactElement = JSX.Element\n     {true &amp;&amp; \"test\"} // &lt;- ReactNode\n  &lt;/Custom&gt;\n &lt;/p&gt;\n</code></pre>\n\n<blockquote>\n  <p>Why do the render methods of class components return ReactNode, but function components return ReactElement?</p>\n</blockquote>\n\n<p>Indeed, they do return different things. <code>Component</code>s return:</p>\n\n<pre><code> render(): ReactNode;\n</code></pre>\n\n<p>And functions are \"stateless components\":</p>\n\n<pre><code> interface StatelessComponent&lt;P = {}&gt; {\n    (props: P &amp; { children?: ReactNode }, context?: any): ReactElement | null;\n    // ... doesn't matter\n}\n</code></pre>\n\n<p>As you can see, functional components can have ReactNodes as children, but they must return a ReactElement or null. If you think about it, it is actually the same as with Components: They are <em>itself</em> <code>ReactElement</code>s, but they can have <code>ReactNode</code>s as children. </p>\n\n<blockquote>\n  <p>How do I solve this with respect to null?</p>\n</blockquote>\n\n<p>Type it as <code>ReactElement | null</code> just as react does. Or let Typescript infer the type.</p>\n\n<p><sub><a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/react/index.d.ts\" rel=\"noreferrer\">source for the types</a></sub></p>\n",
        "OwnerUserId": "5260024",
        "OwnerDisplayName": "",
        "LastEditorUserId": "5260024",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-12-19 13:07:47",
        "LastActivityDate": "2019-12-19 13:07:47",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "4",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "59840095",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58123398",
        "CreationDate": "2020-01-21 11:24:15",
        "DeletionDate": "",
        "Score": "3",
        "ViewCount": "",
        "Body": "<blockquote>\n  <p>1.) What is the difference between JSX.Element, ReactNode and ReactElement?</p>\n</blockquote>\n\n<p><strong>ReactElement and JSX.Element</strong>\nare the result of invoking <a href=\"https://reactjs.org/docs/react-api.html#createelement\" rel=\"nofollow noreferrer\"><code>React.createElement</code></a> directly or via JSX transpilation. It is an object with <code>type</code>, <code>props</code> and <code>key</code>. <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/24f1d0c82da2d898acd03fbb3e692eba3c431f82/types/react/index.d.ts#L2882\" rel=\"nofollow noreferrer\"><code>JSX.Element</code></a> is <code>ReactElement</code>, whose <code>props</code> and <code>type</code> have type <code>any</code>, so they are more or less the same.</p>\n\n<pre><code>const jsx = &lt;div&gt;hello&lt;/div&gt;\nconst ele = React.createElement(\"div\", null, \"hello\");\n</code></pre>\n\n<p><strong>ReactNode</strong> is used as return type for <code>render()</code> in class components. It also is the default type for <code>children</code> attribute with <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/24f1d0c82da2d898acd03fbb3e692eba3c431f82/types/react/index.d.ts#L773\" rel=\"nofollow noreferrer\"><code>PropsWithChildren</code></a>.</p>\n\n<pre><code>const Comp: FunctionComponent = props =&gt; &lt;div&gt;{props.children}&lt;/div&gt; \n// children?: React.ReactNode\n</code></pre>\n\n<p>It looks more complicated in the <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/2034c45/types/react/index.d.ts#L203\" rel=\"nofollow noreferrer\">React type declarations</a>, but is <em>equivalent</em> to:</p>\n\n<pre><code>type ReactNode = {} | null | undefined;\n// super type `{}` has absorbed *all* other types, which are sub types of `{}`\n// so it is a very \"broad\" type (I don't want to say useless...)\n</code></pre>\n\n<p><strong><em>You can assign almost everything to <code>ReactNode</code>, it won't help you with strong types!</em></strong></p>\n\n<hr>\n\n<blockquote>\n  <p>2.) Why do the render methods of class components return ReactNode, but function components return ReactElement?</p>\n</blockquote>\n\n<p><strong>tl;dr:</strong> It is a current TS type incompatability not related to core React, see the tracked <a href=\"https://github.com/microsoft/TypeScript/issues/21699\" rel=\"nofollow noreferrer\">main issue</a>.</p>\n\n<p>With pure React/JS side of things, <code>render()</code> in class components supports the same return types as a function component, there are <a href=\"https://github.com/facebook/react/issues/12155#issuecomment-363089187\" rel=\"nofollow noreferrer\">no differences</a>. With regard to TS, the different types currently are just a type incosistency still kept due to historical reasons and the need for backwards-compatibility.</p>\n\n<p>The mentioned issue also wants to take account of the change that a component render return type - function and class - meanwhile supports more types than <code>JSX.Element</code>. Ideally a <a href=\"https://reactjs.org/docs/react-component.html#render\" rel=\"nofollow noreferrer\">valid return type</a> would look more like this:</p>\n\n<pre><code>type ComponentReturnType = ReactElement | Array&lt;ReactElement&gt; | string | number | boolean \n  | null // Note: undefined is invalid!\n</code></pre>\n\n<p>But currently in TS, a <strong>class component</strong> is fixed to return <code>ReactNode</code> with <code>render()</code>, which is <strong>more permissive</strong> than React permits. The <strong><a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/2034c45/types/react/index.d.ts#L518-L523\" rel=\"nofollow noreferrer\"><code>React.FunctionComponent</code></a></strong> return type is <code>JSX.Element | null</code>, whose types are <strong>more restrictive</strong> than React supports.</p>\n\n<hr>\n\n<blockquote>\n  <p>3.) How do I solve this with respect to null?</p>\n</blockquote>\n\n<p>Some options and orientation for function component return types:</p>\n\n<ul>\n<li><p>Omit the return type annotation completely and rely on type inference </p>\n\n<pre><code>const MyComp = () =&gt; condition ? &lt;div&gt;Hello&lt;/div&gt; : null // returns: JSX.Element| null\n</code></pre></li>\n<li>Keep explicit <code>render</code> types as narrow as possible (good practice for <code>children</code> as well)</li>\n<li>Almost anything can be assigned to <code>ReactNode</code>, so I would <em>avoid it</em> completely</li>\n<li>Prefer <code>ReactElement</code> (<code>\"react\"</code> module import) to <code>JSX.Element</code> (<em>global scope</em>)</li>\n<li>Use <code>ReactChild</code> instead of <code>ReactElement</code>, if you need to return <code>string | number</code> </li>\n<li>In an edge case with a function component, you can either cast or use Fragments:\n\n<pre><code>const MyCompFragment: FunctionComponent = () =&gt; &lt;&gt;\"huhu\"&lt;/&gt;\nconst MyCompCast: FunctionComponent = () =&gt; \"huhu\" as any \n// or: as unknown as JSX.Element | null\n</code></pre></li>\n<li>Consider to omit <code>React.FunctionComponent</code> and just use plain functions - the type <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/issues/18051\" rel=\"nofollow noreferrer\">comes</a> <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/issues/34237\" rel=\"nofollow noreferrer\">with</a> <a href=\"https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/87\" rel=\"nofollow noreferrer\">many</a> <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/issues/20544\" rel=\"nofollow noreferrer\">quirks</a>. That is also why Create React App <a href=\"https://github.com/facebook/create-react-app/pull/8177\" rel=\"nofollow noreferrer\">dropped it</a> from its template</li>\n</ul>\n",
        "OwnerUserId": "5669456",
        "OwnerDisplayName": "",
        "LastEditorUserId": "5669456",
        "LastEditorDisplayName": "",
        "LastEditDate": "2020-03-16 19:15:53",
        "LastActivityDate": "2020-03-16 19:15:53",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56458794",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56436559",
        "CreationDate": "2019-06-05 10:34:41",
        "DeletionDate": "",
        "Score": "41",
        "ViewCount": "",
        "Body": "<h1>As of Xcode 11 beta 3</h1>\n\n<blockquote>\n  <p>There is now the <a href=\"https://developer.apple.com/documentation/uikit/uisegmentedcontrol/3335209-selectedsegmenttintcolor\" rel=\"noreferrer\"><code>selectedSegmentTintColor</code></a> property on <code>UISegmentedControl</code>.</p>\n</blockquote>\n\n<p>See <a href=\"https://stackoverflow.com/a/56874473/191463\">rmaddy's answer</a></p>\n\n<hr>\n\n<h1>To get back iOS 12 appearance</h1>\n\n<p>I wasn't able to tint the color of the selected segment, hopefully it will be fixed in an upcoming beta.</p>\n\n<p>Setting the background image of the selected state doesn't work without setting the background image of the normal state (which removes all the iOS 13 styling)</p>\n\n<p>But I was able to get it back to the iOS 12 appearance (or near enough, I wasn't able to return the corner radius to its smaller size). </p>\n\n<p>It's not ideal, but a bright white segmented control looks a bit out of place in our app.</p>\n\n<p>(Didn't realise <code>UIImage(color:)</code> was an extension method in our codebase. But the code to implement it is around the web)</p>\n\n<pre><code>extension UISegmentedControl {\n    /// Tint color doesn't have any effect on iOS 13.\n    func ensureiOS12Style() {\n        if #available(iOS 13, *) {\n            let tintColorImage = UIImage(color: tintColor)\n            // Must set the background image for normal to something (even clear) else the rest won't work\n            setBackgroundImage(UIImage(color: backgroundColor ?? .clear), for: .normal, barMetrics: .default)\n            setBackgroundImage(tintColorImage, for: .selected, barMetrics: .default)\n            setBackgroundImage(UIImage(color: tintColor.withAlphaComponent(0.2)), for: .highlighted, barMetrics: .default)\n            setBackgroundImage(tintColorImage, for: [.highlighted, .selected], barMetrics: .default)\n            setTitleTextAttributes([.foregroundColor: tintColor, NSAttributedString.Key.font: UIFont.systemFont(ofSize: 13, weight: .regular)], for: .normal)\n            setDividerImage(tintColorImage, forLeftSegmentState: .normal, rightSegmentState: .normal, barMetrics: .default)\n            layer.borderWidth = 1\n            layer.borderColor = tintColor.cgColor\n        }\n    }\n}\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/7g9vD.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/7g9vD.png\" alt=\"Image showing the effect of the above code\"></a></p>\n",
        "OwnerUserId": "191463",
        "OwnerDisplayName": "",
        "LastEditorUserId": "191463",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-07-04 08:05:21",
        "LastActivityDate": "2019-07-04 08:05:21",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "13",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58934049",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58932991",
        "CreationDate": "2019-11-19 12:23:09",
        "DeletionDate": "",
        "Score": "3",
        "ViewCount": "",
        "Body": "<p>I believe this is unspecified.</p>\n\n<p>Here's the specification of the relevant constructors: <a href=\"https://timsong-cpp.github.io/cppwp/n4659/util.smartptr.shared.const#10\" rel=\"nofollow noreferrer\">[util.smartptr.shared.const]/10</a></p>\n\n<blockquote>\n<pre><code>template&lt;class Y, class D&gt; shared_ptr(Y* p, D d);\ntemplate&lt;class Y, class D, class A&gt; shared_ptr(Y* p, D d, A a);\ntemplate &lt;class D&gt; shared_ptr(nullptr_t p, D d);\ntemplate &lt;class D, class A&gt; shared_ptr(nullptr_t p, D d, A a);\n</code></pre>\n  \n  <p><em>Effects:</em> Constructs a <code>shared_\u00adptr</code> object that owns the object <code>p</code> and the deleter <code>d</code>. When <code>T</code> is not an array type, the first and\n  second constructors enable <code>shared_\u00adfrom_\u00adthis</code> with <code>p</code>. The second\n  and fourth constructors <strong>shall use a copy of <code>a</code> to allocate memory\n  for internal use</strong>. If an exception is thrown, <code>d(p)</code> is called.</p>\n</blockquote>\n\n<p>Now, my interpretation is that when the implementation needs memory for internal use, it does so by using <code>a</code>.  It doesn't mean that the implementation has to use this memory to place everything.  For example, suppose that there's this weird implementation:</p>\n\n<pre><code>template &lt;typename T&gt;\nclass shared_ptr : /* ... */ {\n    // ...\n    std::aligned_storage&lt;16&gt; _Small_deleter;\n    // ...\npublic:\n    // ...\n    template &lt;class _D, class _A&gt;\n    shared_ptr(nullptr_t, _D __d, _A __a) // for example\n        : _Allocator_base{__a}\n    {\n        if constexpr (sizeof(_D) &lt;= 16)\n            _Construct_at(&amp;_Small_deleter, std::move(__d));\n        else\n            // use 'a' to allocate storage for the deleter\n    }\n// ...\n};\n</code></pre>\n\n<p>Does this implementation \"use a copy of <code>a</code> to allocate memory for internal use\"?  Yes, it does.  It never allocates memory except by using <code>a</code>.  There are many problems with this naive implementation, but let's say that it switches to using allocators in all but the simplest case in which the <code>shared_ptr</code> is constructed directly from a pointer and is never copied or moved or otherwise referenced and there are no other complications.  The point is, just because we fail to imagine a valid implementation doesn't by itself prove that it cannot theoretically exist.  I am not saying that such an implementation can actually be found in the real world, just that the standard doesn't seem to be actively prohibiting it.</p>\n",
        "OwnerUserId": "9716597",
        "OwnerDisplayName": "",
        "LastEditorUserId": "9716597",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-12-12 08:37:13",
        "LastActivityDate": "2019-12-12 08:37:13",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "4",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "59411477",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "59411397",
        "CreationDate": "2019-12-19 14:12:34",
        "DeletionDate": "",
        "Score": "25",
        "ViewCount": "",
        "Body": "<p>I believe what is actually happening here is a destructuring assignment. Tuple assignment will try to implicitly convert its components, and as it is possible to assign <code>string</code> to <code>object</code>, that is what happens here.</p>\n\n<blockquote>\n  <p>The language supports assignment between tuple types that have the same number of elements, where each right-hand side element can be implicitly converted to its corresponding left-hand side element. Other conversions aren't considered for assignments.</p>\n</blockquote>\n\n<p><a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/tuples#assignment-and-tuples\" rel=\"noreferrer\">Source</a></p>\n\n<p><a href=\"https://sharplab.io/#v2:D4AQTAjAsAUCDMACciDCiDetE+UkALIgLIAUAlJtrjaSBAAwA0yjlAzogLyKkBEAQz4s+AIz7kA3NRo5SAe1EArAKYBjAC4t6DSvO6J20mLNz0AnAqkzEAX1i2gA\" rel=\"noreferrer\">See it on sharplab.io</a></p>\n",
        "OwnerUserId": "722121",
        "OwnerDisplayName": "",
        "LastEditorUserId": "722121",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-12-24 17:27:46",
        "LastActivityDate": "2019-12-24 17:27:46",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "59307908",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "59306751",
        "CreationDate": "2019-12-12 15:26:41",
        "DeletionDate": "",
        "Score": "29",
        "ViewCount": "",
        "Body": "<p>You have discovered evidence that the program-flow algorithm that produces this warning is relatively unsophisticated when it comes to tracking the meanings encoded in local variables.</p>\n\n<p>I have no specific knowledge of the flow checker's implementation, but having worked on implementations of similar code in the past, I can make some educated guesses. The flow checker is <em>likely</em> deducing two things in the false positive case: (1) <code>_test</code> could be null, because if it could not, you would not have the comparison in the first place, and (2) <code>isNull</code> could be true or false -- because if it could not, you would not have it in an <code>if</code>.  But the connection that the <code>return _test;</code> only runs if <code>_test</code> is not null, that connection is not being made.</p>\n\n<p>This is a surprisingly tricky problem, and you should expect that it will take a while for the compiler to attain the sophistication of tools that have had multiple years of work by experts. The Coverity flow checker, for example, would have no problem at all in deducing that neither of your two variations had a null return, but the Coverity flow checker costs serious money for corporate customers. </p>\n\n<p>Also, the Coverity checkers are designed to run on large codebases <em>overnight</em>; the C# compiler's analysis must run <em>between keystrokes in the editor</em>, which significantly changes the sorts of in-depth analyses you can reasonably perform.</p>\n",
        "OwnerUserId": "88656",
        "OwnerDisplayName": "",
        "LastEditorUserId": "88656",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-12-16 22:00:00",
        "LastActivityDate": "2019-12-16 22:00:00",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57850358",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57842756",
        "CreationDate": "2019-09-09 08:30:32",
        "DeletionDate": "",
        "Score": "13",
        "ViewCount": "",
        "Body": "<p>Treating warnings as errors is just a mean of self-discipline: you were compiling a program to test that shiny new feature, but you <strong>can't</strong> until you fix the sloppy parts. There is no additional information <code>Werror</code> provides, it just sets priorities very clearly:</p>\n\n<blockquote>\n  <p>Don't add new code until you fix problems in the existing code</p>\n</blockquote>\n\n<p>It's really the mindset that's important, not the tools. Compiler diagnostics output is a tool. MISRA (for embedded C) is another tool. It doesn't matter which one you use, but arguably compiler warnings is the easiest tool you can get (it's just one flag to set) and the signal to noise ratio is very high. So there's no reason <em>not</em> to use it.</p>\n\n<p>No tool is infallible. If you write <code>const float pi = 3.14;</code>, most tools won't tell you that you defined \u03c0 with a bad precision which may lead to problems down the road. Most tools won't raise an eyebrow on <code>if(tmp &lt; 42)</code>, even if it's commonly known that giving variables meaningless names and using magic numbers is a way to disaster in big projects. <em>You</em> have to understand that any \"quick test\" code you write is just that: a test, and you have to get it right before you move on to other tasks, while you still see its shortcomings. If you leave that codes as is, debugging if after you spend two months adding new features will be significantly harder.</p>\n\n<p>Once you get into the right mindset, there is no point in using <code>Werror</code>. Having warnings as warnings will allow you to take an informed decision whether it still makes sense to run that debug session you were about to start, or to abort it and fix the warnings first.</p>\n",
        "OwnerUserId": "4350586",
        "OwnerDisplayName": "",
        "LastEditorUserId": "4350586",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-10-05 11:09:35",
        "LastActivityDate": "2019-10-05 11:09:35",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "3",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57853772",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57842756",
        "CreationDate": "2019-09-09 12:10:02",
        "DeletionDate": "",
        "Score": "3",
        "ViewCount": "",
        "Body": "<p>You should always enable compiler warnings because the compiler can often tell you what's wrong with your code. To do this, you pass <code>-Wall -Wextra</code> to the compiler.</p>\n\n<p>You should usually treat warnings as errors because the warnings usually signify that there's something wrong with your code. However, it's often very easy to ignore these errors. Therefore, treating them as errors will cause the build to fail so you can't ignore the errors. To treat warnings as errors, pass <code>-Werror</code> to the compiler.</p>\n",
        "OwnerUserId": "10795151",
        "OwnerDisplayName": "",
        "LastEditorUserId": "10795151",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-11-18 23:01:58",
        "LastActivityDate": "2019-11-18 23:01:58",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57860713",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57842756",
        "CreationDate": "2019-09-09 20:20:39",
        "DeletionDate": "",
        "Score": "13",
        "ViewCount": "",
        "Body": "<h2><strong>Non-fixed warnings will</strong>, sooner or later, <strong>lead to errors in your code</strong>.</h2>\n\n<hr>\n\n<p>Debugging a segmentation fault, for instance, requires the programmer to trace the root (cause) of the fault, which usually is located in a prior place in your code than the line that eventually caused the segmentation fault.</p>\n\n<p>It's very typical that the cause is a line for which the compiler had issued a warning that you ignored, and the line that caused the segmentation fault the line that eventually threw the error.</p>\n\n<p>Fixing the warning leads to fixing the problem.. A classic!</p>\n\n<p>A demonstration of the above.. Consider the following code:</p>\n\n<pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  char* str = \"Hello world!\";\n  int idx;\n\n  // Colossal amount of code here, irrelevant to 'idx'\n\n  printf(\"%c\\n\", str[idx]);\n\n  return 0;\n}\n</code></pre>\n\n<p>which when compiled with \"Wextra\" flag passed to GCC, gives:</p>\n\n<pre><code>main.c: In function 'main':\nmain.c:9:21: warning: 'idx' is used uninitialized in this function [-Wuninitialized]\n    9 |   printf(\"%c\\n\", str[idx]);\n      |                     ^\n</code></pre>\n\n<p>which I <em>could</em> ignore and execute the code anyway.. And then I would witness a \"grand\" segmentation fault, as my IP epicurus professor used to say:</p>\n\n<blockquote>\n  <p>Segmentation fault</p>\n</blockquote>\n\n<p>In order to debug this in a real world scenario, one would start from the line that causes the segmentation fault and attempt to trace what is the root of the cause.. They would have to search for what has happened to <code>i</code> and <code>str</code> inside that colossal amount of code over there...</p>\n\n<p>Until, one day, they found theirselves in the situation where they discover that <code>idx</code> is used uninitialized, thus it has a garbage value, which results in indexing the string (way) beyond out of its bounds, which leads to a segmentation fault.</p>\n\n<p>If only they hadn't ignored the warning, they would have found the bug immediately! </p>\n",
        "OwnerUserId": "2411320",
        "OwnerDisplayName": "",
        "LastEditorUserId": "6699433",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-11-12 13:43:32",
        "LastActivityDate": "2019-11-12 13:43:32",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "6",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "55013871",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54776759",
        "CreationDate": "2019-03-06 00:53:41",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<p>Perhaps <em>slightly</em> cleaner (YMMV) is to set getter traps (like you did), but in a worker so that you don't pollute your main global scope. I didn't need to use <code>with</code> though, so perhaps that is an improvement.</p>\n\n<p><strong>Worker \"Thread\"</strong></p>\n\n<pre><code>//worker; foo.js\naddEventListener('message', function ({ data }) {\n  try {\n    eval(`\n      for (k in self) {\n        Object.defineProperty(self, k, {\n          get: function () {\n            throw new ReferenceError(':(');\n          }\n        });\n      }\n      // code to execute\n      ${data}\n    `);\n    postMessage('no error thrown ');\n  } catch (e) {\n    postMessage(`error thrown: ${e.message}`);\n  }\n});\n</code></pre>\n\n<p><strong>Main \"Thread\"</strong></p>\n\n<pre><code>var w = new Worker('./foo.js');\nw.addEventListener('message', ({data}) =&gt; console.log(`response: ${data}`));\nw.postMessage('const foo = location');\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/KzzbS.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/KzzbS.png\" alt=\"enter image description here\"></a></p>\n\n<hr>\n\n<p>Another option that may be worth exploring is <a href=\"https://pptr.dev/\" rel=\"nofollow noreferrer\">Puppeteer</a>.</p>\n",
        "OwnerUserId": "1244884",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-03-06 00:53:41",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "3",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "55071758",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54776759",
        "CreationDate": "2019-03-08 22:16:30",
        "DeletionDate": "",
        "Score": "-3",
        "ViewCount": "",
        "Body": "<p>Just use <code>\"use strict\"</code>. More on <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode\" rel=\"nofollow noreferrer\">Strict Mode</a>.</p>\n\n<p><a href=\"https://i.stack.imgur.com/RGOLt.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/RGOLt.png\" alt=\"enter image description here\"></a></p>\n",
        "OwnerUserId": "2184584",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-03-08 22:16:30",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "55077293",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54776759",
        "CreationDate": "2019-03-09 12:20:32",
        "DeletionDate": "",
        "Score": "5",
        "ViewCount": "",
        "Body": "<p>There are some things you need to consider before trying to answer this question.</p>\n\n<p>For example, take the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" rel=\"nofollow noreferrer\"><code>Object</code></a> constructor. It is a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\" rel=\"nofollow noreferrer\">\"Standard built-in object\"</a>.</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/status\" rel=\"nofollow noreferrer\"><code>window.status</code></a> is part of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window\" rel=\"nofollow noreferrer\"><code>Window</code> interface</a>.</p>\n\n<p>Obviously, you don't want <code>status</code> to refer to <code>window.status</code>, but do you want <code>Object</code> to refer to <code>window.Object</code>?</p>\n\n<hr>\n\n<p>The solution to your problem of it not being able to be redefined is to use a IIFE, or a module, which should be what you are doing anyways.</p>\n\n<pre><code>(() =&gt; {\n  var status = false;\n  if (!status) {\n    console.log('status is now false.');\n  }\n})();\n</code></pre>\n\n<p>And to prevent accidentally using global variables, I would just set up your linter to warn against it. Forcing it using a solution like <code>with (fake_global)</code> would not only have errors exclusively at run time, which might be not caught, but also be slower.</p>\n\n<hr>\n\n<p>Specifically with ESLint, I can't seem to find a \"good\" solution. Enabling browser globals allows implicit reads.</p>\n\n<p>I would suggest <a href=\"https://eslint.org/docs/rules/no-implicit-globals\" rel=\"nofollow noreferrer\">no-implicit-globals</a> (As you shouldn't be polluting the global scope anyways, and it prevents the <code>var status</code> not defining anything problem), and also not enabling all browser globals, only, say, <code>window</code>, <code>document</code>, <code>console</code>, <code>setInterval</code>, etc., like you said in the comments.</p>\n\n<p>Look at the <a href=\"https://eslint.org/docs/user-guide/configuring#specifying-environments\" rel=\"nofollow noreferrer\">ESLint environments</a> to see which ones you would like to enable. By default, things like <code>Object</code> and <code>Array</code> are in the global scope, but things like those listed above and <code>atob</code> are not.</p>\n\n<p>To see the exact list of globals, they are defined by <a href=\"https://github.com/eslint/eslint/blob/caeb223c4f7b0b6fe35e5348ae0df4c6446b5bed/conf/environments.js\" rel=\"nofollow noreferrer\">this file in ESLint</a> and <a href=\"https://github.com/sindresorhus/globals/blob/master/globals.json\" rel=\"nofollow noreferrer\">the <code>globals</code> NPM package</a>. I would would pick from (a combination of) \"es6\", \"worker\" or \"shared-node-browser\".</p>\n\n<p>The eslintrc file would have:</p>\n\n<pre><code>{\n    \"rules\": {\n        \"no-implicit-globals\": \"error\"\n    },\n    \"globals\": {\n        \"window\": \"readonly\",\n        \"document\": \"readonly\"\n    },\n    \"env\": {\n        \"browser\": false,\n        \"es6\": [true/false],\n        \"worker\": [true/false],\n        \"shared-node-browser\": [true/false]\n    }\n}\n</code></pre>\n",
        "OwnerUserId": "5754656",
        "OwnerDisplayName": "",
        "LastEditorUserId": "5754656",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-03-10 14:29:25",
        "LastActivityDate": "2019-03-10 14:29:25",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "55044649",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55044324",
        "CreationDate": "2019-03-07 13:12:05",
        "DeletionDate": "",
        "Score": "14",
        "ViewCount": "",
        "Body": "<p>Yes, I think your interpretation is correct. In two's complement, that are no operations that could generate a negative zero, because the concept here doesn't exist: any value that has the sign bit set is necessarily less than <code>0</code>.</p>\n\n<p>BTW: It is very likely that the exotic sign representations will be removed from C2x, so all of this will disappear. </p>\n",
        "OwnerUserId": "366377",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-03-07 13:12:05",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "5",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "55044981",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55044324",
        "CreationDate": "2019-03-07 13:28:24",
        "DeletionDate": "",
        "Score": "12",
        "ViewCount": "",
        "Body": "<p>Your interpretation is correct.</p>\n\n<p>Going up to paragraph 2 of 6.2.6.2:</p>\n\n<blockquote>\n  <p>For signed  integer  types,  the  bits  of  the  object \n  representation  shall  be  divided  into  three groups:  value  bits, \n  padding  bits,  and  the  sign  bit.  There  need  not  be  any\n  padding  bits; signed char shall  not  have  any  padding  bits.\n  There  shall  be  exactly  one  sign  bit. Each  bit  that  is  a \n  value  bit  shall  have  the  same  value  as  the  same  bit  in  the\n  object representation of the corresponding unsigned type (if there are\n  M value bits in the signed type and N in the unsigned type, then M \u2264 N\n  ).  If the sign bit is zero, it shall not affect the  resulting \n  value.   If  the  sign  bit  is  one,  the  value  shall  be  modified\n  in  one  of  the following ways:</p>\n  \n  <ul>\n  <li>the corresponding value with sign bit 0 is negated ( sign and magnitude );</li>\n  <li>the sign bit has the value \u2212 (2<sup>M</sup>)( two\u2019s complement );</li>\n  <li>the sign bit has the value \u2212 (2<sup>M</sup> \u2212 1) ( ones\u2019 complement ).</li>\n  </ul>\n  \n  <p>Which of these applies is implementation-defined, <strong>as is whether the\n  value with sign bit 1 and  all  value  bits  zero  (for  the  first \n  two),  or  with  sign  bit  and  all  value  bits  1  (for  ones\u2019\n  complement),  is  a  trap  representation  or  a  normal  value.   In \n  the  case  of  sign  and magnitude  and  ones\u2019  complement,  if  this \n  representation  is  a  normal  value  it  is  called  a negative zero.</strong></p>\n</blockquote>\n\n<p>This means an implementation using either one's complement or sign and magnitude has, for a given size integer type, a specific representation which must be either negative zero or a trap representation.  It's then up to the implementation to choose which one of those applies.</p>\n\n<p>As an example, suppose a system has sign and magnitude representation and a 32 bit <code>int</code> with no padding.  Then the representation that would be negative zero, if it is supported, is <code>0x80000000</code>.</p>\n\n<p>Now suppose the following operations are performed:</p>\n\n<pre><code> int x = 0x7fffffff;\n x = ~x;\n</code></pre>\n\n<p>If the implementation supports negative zero, the <code>~</code> operator will generate <code>-0</code> as the result and store it in <code>x</code>.  If it does not, it creates a trap representation and invokes undefined behavior as per paragraph 4.</p>\n",
        "OwnerUserId": "1687119",
        "OwnerDisplayName": "",
        "LastEditorUserId": "1687119",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-03-07 14:27:08",
        "LastActivityDate": "2019-03-07 14:27:08",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57377914",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57239089",
        "CreationDate": "2019-08-06 14:04:40",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<blockquote>\n  <p>Is this just plainly an antipattern (sic)...</p>\n</blockquote>\n\n<p>I think its prevalence may just be <a href=\"https://en.wikipedia.org/wiki/Cargo_cult_programming\" rel=\"nofollow noreferrer\">cargo cult programming</a>. Aliases are easy to understand, so users often learn them first. As users' skill and needs increase, they discover aliases lack flexible argument processing. So they do a web search, like \"shell alias parameter passing\", and find posts suggesting the pattern:</p>\n\n<pre><code>alias foo='_() { echo $2 $3 $1; }; _'\n</code></pre>\n\n<p>Lo and behold, it works. Users are happy, and they move on.</p>\n\n<p>But because the <code>_()</code> sequence looks a lot like a shell incantation (<code>2&gt;&amp;1</code>, <code>&gt;&gt;</code>, etc.), users never think that <code>_()</code> is just compact syntax for <code>function _</code> and never go to the next step of learning functions. With this alias pattern, they get all the benefit of functions and don't have to learn \"new\" syntax. Most probably never even notice the nasty side effect: overwriting any prior functions named <code>_</code>.</p>\n\n<p>I searched through Usenet from 1981 to 1991, but I didn't find any direct evidence of this theory, however.</p>\n\n<blockquote>\n  <p>... or is there an actual reason to do this? Under what circumstances would this design make sense?</p>\n</blockquote>\n\n<p>In the five days I drafted this answer, every reason I conjured came back to an argument against it. The selected answer - that aliases can't be masked in subshells - is a solid reason, though I've never thought to be that paranoid: I don't go around sourc'ing code I've not fully vetted.</p>\n",
        "OwnerUserId": "2908724",
        "OwnerDisplayName": "",
        "LastEditorUserId": "874188",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-08-07 10:41:16",
        "LastActivityDate": "2019-08-07 10:41:16",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58278392",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58278260",
        "CreationDate": "2019-10-07 23:40:11",
        "DeletionDate": "",
        "Score": "20",
        "ViewCount": "",
        "Body": "<h3>TL;DR</h3>\n\n<p>It appears that Apple considers <code>/usr/include</code> as something that has gone the way of the dodo \u2014 it is extinct \u2014 or maybe it's like Monty Python's <a href=\"https://www.dailymotion.com/video/x2hwqnp\" rel=\"noreferrer\">Parrot</a>.</p>\n\n<p>Using the Apple-provided GCC (actually, that's Clang by any other name, as the version information shows) or Clang avoids problems.  Both <code>/usr/bin/gcc</code> and <code>/usr/bin/clang</code> will find the system libraries four directory levels below:</p>\n\n<pre><code>/Applications/Xcode.app/Contents/Developer/Platforms/\u2026\n</code></pre>\n\n<p>If you build your own GCC or other compiler, you will (probably) need to configure it to find the system libraries under the Xcode application directory.</p>\n\n<h3>Explorations</h3>\n\n<p>Immediately after the upgrade, I ran XCode 11.0.  It wanted to install some extra components, so I let it do so.  However, that did not reinstate <code>/usr/include</code> or the directory under <code>/Library</code>.</p>\n\n<p>One of the other bits of advice in the previous <a href=\"https://stackoverflow.com/questions/52509602/cant-compile-c-program-on-a-mac-after-upgrade-to-mojave\">question</a> was to run:</p>\n\n<blockquote>\n<pre><code>xcode-select --install\n</code></pre>\n</blockquote>\n\n<p>When doing so, it claimed that it downloaded the command line utilities, and it ensured that <code>/usr/bin/gcc</code> and <code>/usr/bin/clang</code> etc were present.  That's a useful step (though I didn't definitively check whether they were present before).</p>\n\n<pre><code>$ /usr/bin/gcc --version\nConfigured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/c++/4.2.1\nApple clang version 11.0.0 (clang-1100.0.33.8)\nTarget: x86_64-apple-darwin19.0.0\nThread model: posix\nInstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin\n$\n</code></pre>\n\n<p>Using <code>/usr/bin/gcc</code>, it is now possible to compile programs:</p>\n\n<pre><code>$ make CC=/usr/bin/gcc al\nco  RCS/al.c,v al.c\nRCS/al.c,v  --&gt;  al.c\nrevision 1.7\ndone\n/usr/bin/gcc -I/Users/jleffler/inc -g -O3 -std=c11 -pedantic -Wall -Wextra -Werror -Wshadow -Wmissing-prototypes -Wpointer-arith  -Wold-style-definition -Wcast-qual -Wstrict-prototypes -DHAVE_MEMMEM -DHAVE_STRNDUP -DHAVE_STRNLEN  -DHAVE_GETDELIM   -o al al.c -L/Users/jleffler/lib/64  -ljl\n$\n</code></pre>\n\n<p>However, <code>/usr/include</code> is still missing.  There is a directory under <code>/Library</code> now:</p>\n\n<pre><code>$ ls /Library/Developer\nCommandLineTools  PrivateFrameworks\n$ ls /Library/Developer/CommandLineTools\nLibrary SDKs    usr\n$ ls /Library/Developer/CommandLineTools/SDKs\nMacOSX.sdk      MacOSX10.14.sdk MacOSX10.15.sdk\n$ ls /Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/\nEntitlements.plist SDKSettings.json   System\nLibrary            SDKSettings.plist  usr\n$\n</code></pre>\n\n<p>Neither the <code>System</code> nor the <code>Library</code> directory contain anything very promising.</p>\n\n<h3>When all else fails, read the manual</h3>\n\n<p>Next step \u2014 find and read the release notes:</p>\n\n<ul>\n<li><a href=\"https://developer.apple.com/documentation/xcode_release_notes/xcode_11_release_notes\" rel=\"noreferrer\">Xcode 11 Release Notes</a></li>\n<li><a href=\"https://developer.apple.com/documentation/macos_release_notes/macos_catalina_10_15_release_notes\" rel=\"noreferrer\">macOS Catalina 10.15 Release Notes</a></li>\n</ul>\n\n<p>There's no information in there that relates to this.  So, the probability is (AFAICS, after only an hour or two's effort) that Apple no longer support <code>/usr/include</code> \u2014 though it does still have a fully-loaded <code>/usr/lib</code> (no <code>/lib</code> though).</p>\n\n<p>Time to check another compilation with GCC option <code>-v</code> added (in the makefile I used, setting <code>UFLAGS</code> adds the option to C compiler command line):</p>\n\n<pre><code>$ make UFLAGS=-v CC=/usr/bin/gcc ww\nco  RCS/ww.c,v ww.c\nRCS/ww.c,v  --&gt;  ww.c\nrevision 4.9\ndone\n/usr/bin/gcc -I/Users/jleffler/inc -g -O3 -std=c11 -pedantic -Wall -Wextra -Werror -Wshadow -Wmissing-prototypes -Wpointer-arith  -Wold-style-definition -Wcast-qual -Wstrict-prototypes -DHAVE_MEMMEM -DHAVE_STRNDUP -DHAVE_STRNLEN  -DHAVE_GETDELIM -v  -o ww ww.c -L/Users/jleffler/lib/64  -ljl\nApple clang version 11.0.0 (clang-1100.0.33.8)\nTarget: x86_64-apple-darwin19.0.0\nThread model: posix\nInstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin\n \"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang\" -cc1 -triple x86_64-apple-macosx10.15.0 -Wdeprecated-objc-isa-usage -Werror=deprecated-objc-isa-usage -emit-obj -disable-free -disable-llvm-verifier -discard-value-names -main-file-name ww.c -mrelocation-model pic -pic-level 2 -mthread-model posix -mdisable-fp-elim -fno-strict-return -masm-verbose -munwind-tables -target-sdk-version=10.15 -target-cpu penryn -dwarf-column-info -debug-info-kind=standalone -dwarf-version=4 -debugger-tuning=lldb -ggnu-pubnames -target-linker-version 512.4 -v -resource-dir /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/11.0.0 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk -I /Users/jleffler/inc -D HAVE_MEMMEM -D HAVE_STRNDUP -D HAVE_STRNLEN -D HAVE_GETDELIM -I/usr/local/include -O3 -Wall -Wextra -Werror -Wshadow -Wmissing-prototypes -Wpointer-arith -Wold-style-definition -Wcast-qual -Wstrict-prototypes -Wno-framework-include-private-from-public -Wno-atimport-in-framework-header -Wno-extra-semi-stmt -Wno-quoted-include-in-framework-header -pedantic -std=c11 -fdebug-compilation-dir /Users/jleffler/src/cmd -ferror-limit 19 -fmessage-length 110 -stack-protector 1 -fstack-check -mdarwin-stkchk-strong-link -fblocks -fencode-extended-block-signature -fregister-global-dtors-with-atexit -fobjc-runtime=macosx-10.15.0 -fmax-type-align=16 -fdiagnostics-show-option -fcolor-diagnostics -vectorize-loops -vectorize-slp -o /var/folders/77/zx9nk6dn7_dg4xd4stvt42v00000gn/T/ww-4cb85b.o -x c ww.c\nclang -cc1 version 11.0.0 (clang-1100.0.33.8) default target x86_64-apple-darwin19.0.0\nignoring nonexistent directory \"/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/local/include\"\nignoring nonexistent directory \"/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/Library/Frameworks\"\n#include \"...\" search starts here:\n#include &lt;...&gt; search starts here:\n /Users/jleffler/inc\n /usr/local/include\n /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/11.0.0/include\n /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include\n /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include\n /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/Frameworks (framework directory)\nEnd of search list.\n \"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld\" -demangle -lto_library /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/libLTO.dylib -dynamic -arch x86_64 -macosx_version_min 10.15.0 -syslibroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk -o ww -L/Users/jleffler/lib/64 /var/folders/77/zx9nk6dn7_dg4xd4stvt42v00000gn/T/ww-4cb85b.o -ljl -L/usr/local/lib -lSystem /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/11.0.0/lib/darwin/libclang_rt.osx.a\n \"/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/dsymutil\" -o ww.dSYM ww\n$\n</code></pre>\n\n<p>The key information in that blizzard of data is:</p>\n\n<pre><code>-isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk\n</code></pre>\n\n<p>That's effectively the 'root' directory for the compilation, so there should be sub-directories under that for <code>usr</code> and <code>usr/include</code>:</p>\n\n<pre><code>$ ls /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk\nEntitlements.plist SDKSettings.json   System\nLibrary            SDKSettings.plist  usr\n$ ls /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr\nbin     include lib     libexec share\n$ ls /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include\nAppleTextureEncoder.h  dns_util.h             memory.h               simd\nAssertMacros.h         dtrace.h               menu.h                 slapi-plugin.h\nAvailability.h         editline               miscfs                 spawn.h\nAvailabilityInternal.h err.h                  module.modulemap       sqlite3.h\nAvailabilityMacros.h   errno.h                monetary.h             sqlite3ext.h\nAvailabilityVersions.h eti.h                  monitor.h              stab.h\n\u2026lots more lines\u2026\ndirent.h               mach-o                 security               xcselect.h\ndisktab.h              mach_debug             semaphore.h            xlocale\ndispatch               machine                servers                xlocale.h\ndlfcn.h                malloc                 setjmp.h               xpc\ndns.h                  math.h                 sgtty.h                zconf.h\ndns_sd.h               membership.h           signal.h               zlib.h\n$\n</code></pre>\n\n<p>This shows that the mile-long and totally unmemorable directory name does contain the standard C and POSIX headers, plus Apple-specific extras.</p>\n\n<p>The previous <code>/usr/local/</code> directory appears to be intact; the warning about <code>usr/local/include</code> not existing under the <code>-isysrootdir</code> is harmless (and not visible without the <code>-v</code> option).</p>\n",
        "OwnerUserId": "15168",
        "OwnerDisplayName": "",
        "LastEditorUserId": "15168",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-10-08 00:19:32",
        "LastActivityDate": "2019-10-08 00:19:32",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "9",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58323411",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58278260",
        "CreationDate": "2019-10-10 12:55:04",
        "DeletionDate": "",
        "Score": "28",
        "ViewCount": "",
        "Body": "<p>For me adding the following path to <code>CPATH</code> solved the issue:</p>\n\n<pre><code>export CPATH=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include\n</code></pre>\n",
        "OwnerUserId": "12195198",
        "OwnerDisplayName": "",
        "LastEditorUserId": "15168",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-10-11 11:23:03",
        "LastActivityDate": "2019-10-11 11:23:03",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "6",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58349403",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58278260",
        "CreationDate": "2019-10-11 23:06:43",
        "DeletionDate": "",
        "Score": "45",
        "ViewCount": "",
        "Body": "<p>Before you proceed, make sure to install xcode command line tools.</p>\n\n<pre><code>xcode-select --install\n</code></pre>\n\n<p>Actually, you can do it! Actually all the C headers are found here in this folder:</p>\n\n<pre><code>/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/\n</code></pre>\n\n<p>We just need to create symlink for all the headers file into this folder:</p>\n\n<pre><code>/usr/local/include/\n</code></pre>\n\n<p>It worked for me! the following command line will take care of all the problems:</p>\n\n<pre><code>sudo ln -s /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/* /usr/local/include/\n</code></pre>\n\n<p>You will get some warning. Some of the headers already exists, like this:</p>\n\n<pre><code>ln: /usr/local/include//tcl.h: File exists\nln: /usr/local/include//tclDecls.h: File exists\nln: /usr/local/include//tclPlatDecls.h: File exists\nln: /usr/local/include//tclTomMath.h: File exists\nln: /usr/local/include//tclTomMathDecls.h: File exists\nln: /usr/local/include//tk.h: File exists\nln: /usr/local/include//tkDecls.h: File exists\nln: /usr/local/include//tkPlatDecls.h: File exists\n</code></pre>\n\n<p>totally ok to ignore. that's all.</p>\n",
        "OwnerUserId": "2673692",
        "OwnerDisplayName": "",
        "LastEditorUserId": "2673692",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-10-11 23:12:45",
        "LastActivityDate": "2019-10-11 23:12:45",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "10",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58359366",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58278260",
        "CreationDate": "2019-10-12 23:18:49",
        "DeletionDate": "",
        "Score": "7",
        "ViewCount": "",
        "Body": "<p>Set the following implicit <code>Make</code> variables to point to where the headers are now located for Xcode Command Line Tools (Xcode CLI): </p>\n\n<pre class=\"lang-sh prettyprint-override\"><code>export CFLAGS+=-isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk\nexport CCFLAGS+=-isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk\nexport CXXFLAGS+=-isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk\nexport CPPFLAGS+=-isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk\n</code></pre>\n\n<p>The <a href=\"https://clang.llvm.org/docs/ClangCommandLineReference.html#cmdoption-clang-isysroot-dir\" rel=\"nofollow noreferrer\"><code>-isysroot</code> option</a> updates the location of the root files away from the system root directory <code>/</code>.</p>\n\n<p>So, this ensures that the common <code>/usr/*</code> files are found in their new place.</p>\n\n<p>That is, the files at <code>/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk</code> are now found. These files are: </p>\n\n<pre><code>Entitlements.plist \nLibrary\nSDKSettings.json\nSDKSettings.plist\nSystem\nusr\n</code></pre>\n",
        "OwnerUserId": "1345455",
        "OwnerDisplayName": "",
        "LastEditorUserId": "1345455",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-12-04 16:19:44",
        "LastActivityDate": "2019-12-04 16:19:44",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "5",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "59318824",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "59306751",
        "CreationDate": "2019-12-13 08:37:54",
        "DeletionDate": "",
        "Score": "54",
        "ViewCount": "",
        "Body": "<p>I can make a reasonable <em>guess</em> as to what's going on here, but it's all a bit complicated :) It involves the <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/proposals/csharp-8.0/nullable-reference-types-specification#null-state-and-null-tracking\" rel=\"noreferrer\">null state and null tracking described in the draft spec</a>. Fundamentally, at the point where we want to return, the compiler will warn if the state of the expression is \"maybe null\" instead of \"not null\".</p>\n\n<p>This answer is in somewhat narrative form rather than just \"here's the conclusions\"... I hope it's more useful that way.</p>\n\n<p>I'm going to simplify the example slightly by getting rid of the fields, and consider a method with one of these two signatures:</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>public static string M(string? text)\npublic static string M(string text)\n</code></pre>\n\n<p>In the implementations below I've given each method a different number so I can refer to specific examples unambiguously. It also allows all of the implementations to be present in the same program.</p>\n\n<p>In each of the cases described below, we'll do various things but end up trying to return <code>text</code> - so it's the null state of <code>text</code> that's important.</p>\n\n<h2>Unconditional return</h2>\n\n<p>First, let's just try to return it directly:</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>public static string M1(string? text) =&gt; text; // Warning\npublic static string M2(string text) =&gt; text;  // No warning\n</code></pre>\n\n<p>So far, so simple. The nullable state of the parameter at the start of the method is \"maybe null\" if it's of type <code>string?</code> and \"not null\" if it's of type <code>string</code>.</p>\n\n<h2>Simple conditional return</h2>\n\n<p>Now let's check for null within the <code>if</code> statement condition itself. (I would use the conditional operator, which I believe will have the same effect, but I wanted to stay truer to the question.)</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>public static string M3(string? text)\n{\n    if (text is null)\n    {\n        return \"\";\n    }\n    else\n    {\n        return text; // No warning\n    }\n}\n\npublic static string M4(string text)\n{\n    if (text is null)\n    {\n        return \"\";\n    }\n    else\n    {\n        return text; // No warning\n    }\n}\n</code></pre>\n\n<p>Great, so it looks like within an <code>if</code> statement where the condition itself checks for nullity, the state of the variable within each branch of the <code>if</code> statement can be different: within the <code>else</code> block, the state is \"not null\" in both pieces of code. So in particular, in M3 the state changes from \"maybe null\" to \"not null\".</p>\n\n<h2>Conditional return with a local variable</h2>\n\n<p>Now let's try to hoist that condition to a local variable:</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>public static string M5(string? text)\n{\n    bool isNull = text is null;\n    if (isNull)\n    {\n        return \"\";\n    }\n    else\n    {\n        return text; // Warning\n    }\n}\n\npublic static string M6(string text)\n{\n    bool isNull = text is null;\n    if (isNull)\n    {\n        return \"\";\n    }\n    else\n    {\n        return text; // Warning\n    }\n}\n</code></pre>\n\n<p><em>Both</em> M5 and M6 issue warnings. So not only do we not get the positive effect of the state change from \"maybe null\" to \"not null\" in M5 (as we did in M3)... we get the <em>opposite</em> effect in M6, where the state goes from \"not null\" to \"maybe null\". That really surprised me.</p>\n\n<p>So it looks like we've learned that:</p>\n\n<ul>\n<li>Logic around \"how a local variable was computed\" isn't used to propagate state information. More on that later.</li>\n<li>Introducing a null comparison can warn the compiler that something it previously thought wasn't null might be null after all.</li>\n</ul>\n\n<h2>Unconditional return after an ignored comparison</h2>\n\n<p>Let's look at the second of those bullet points, by introducing a comparison before an unconditional return. (So we're completely ignoring the result of the comparison.):</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>public static string M7(string? text)\n{\n    bool ignored = text is null;\n    return text; // Warning\n}\n\npublic static string M8(string text)\n{\n    bool ignored = text is null;\n    return text; // Warning\n}\n</code></pre>\n\n<p>Note how M8 feels like it should be equivalent to M2 - both have a not-null parameter which they return unconditionally - but the introduction of a comparison with null changes the state from \"not null\" to \"maybe null\". We can get further evidence of this by trying to dereference <code>text</code> before the condition:</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>public static string M9(string text)\n{\n    int length1 = text.Length;   // No warning\n    bool ignored = text is null;\n    int length2 = text.Length;   // Warning\n    return text;                 // No warning\n}\n</code></pre>\n\n<p>Note how the <code>return</code> statement doesn't have a warning now: the state <em>after</em> executing <code>text.Length</code> is \"not null\" (because if we execute that expression successfully, it couldn't be null). So the <code>text</code> parameter starts as \"not null\" due to its type, becomes \"maybe null\" due to the null comparison, then becomes \"not null\" again after <code>text2.Length</code>.</p>\n\n<h2>What comparisons affect state?</h2>\n\n<p>So that's a comparison of <code>text is null</code>... what effect similar comparisons have? Here are four more methods, all starting with a non-nullable string parameter:</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>public static string M10(string text)\n{\n    bool ignored = text == null;\n    return text; // Warning\n}\n\npublic static string M11(string text)\n{\n    bool ignored = text is object;\n    return text; // No warning\n}\n\npublic static string M12(string text)\n{\n    bool ignored = text is { };\n    return text; // No warning\n}\n\npublic static string M13(string text)\n{\n    bool ignored = text != null;\n    return text; // Warning\n}\n</code></pre>\n\n<p>So even though <code>x is object</code> is now a recommended alternative to <code>x != null</code>, they don't have the same effect: only a comparison <em>with null</em> (with any of <code>is</code>, <code>==</code> or <code>!=</code>) changes the state from \"not null\" to \"maybe null\".</p>\n\n<h2>Why does hoisting the condition have an effect?</h2>\n\n<p>Going back to our first bullet point earlier, why don't M5 and M6 take account of the condition which led to the local variable? This doesn't surprise me as much as it appears to surprise others. Building that sort of logic into the compiler and specification is a lot of work, and for relatively little benefit. Here's another example with nothing to do with nullability where inlining something has an effect:</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>public static int X1()\n{\n    if (true)\n    {\n        return 1;\n    }\n}\n\npublic static int X2()\n{\n    bool alwaysTrue = true;\n    if (alwaysTrue)\n    {\n        return 1;\n    }\n    // Error: not all code paths return a value\n}\n</code></pre>\n\n<p>Even though <em>we</em> know that <code>alwaysTrue</code> will always be true, it doesn't satisfy the requirements in the specification that make the code after the <code>if</code> statement unreachable, which is what we need.</p>\n\n<p>Here's another example, around definite assignment:</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>public static void X3()\n{\n    string x;\n    bool condition = DateTime.UtcNow.Year == 2020;\n    if (condition)\n    {\n        x = \"It's 2020.\";\n    }\n    if (!condition)\n    {\n        x = \"It's not 2020.\";\n    }\n    // Error: x is not definitely assigned\n    Console.WriteLine(x);\n}\n</code></pre>\n\n<p>Even though <em>we</em> know that the code will enter exactly one of those <code>if</code> statement bodies, there's nothing in the spec to work that out. Static analysis tools may well be able to do so, but trying to put that into the language specification would be a bad idea, IMO - it's fine for static analysis tools to have all kinds of heuristics which can evolve over time, but not so much for a language specification.</p>\n",
        "OwnerUserId": "22656",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-12-13 08:37:54",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "12",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "59328672",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "59306751",
        "CreationDate": "2019-12-13 19:25:06",
        "DeletionDate": "",
        "Score": "37",
        "ViewCount": "",
        "Body": "<p>The nullable flow analysis tracks the <em>null state</em> of variables, but it does not track other state, such as the value of a <code>bool</code> variable (as <code>isNull</code> above), and it does not track the relationship between the state of separate variables (e.g. <code>isNull</code> and <code>_test</code>).</p>\n\n<p>An actual static analysis engine would probably do those things, but would also be \"heuristic\" or \"arbitrary\" to some degree: you couldn't necessarily tell the rules it was following, and those rules might even change over time.</p>\n\n<p>That's not something we can do directly in the C# compiler. The rules for nullable warnings are quite sophisticated (as Jon's analysis shows!), but they are rules, and can be reasoned about.</p>\n\n<p>As we roll out the feature it feels like we mostly struck the right balance, but there are a few places that do come up as awkward, and we'll be revisiting those for C# 9.0.</p>\n",
        "OwnerUserId": "4371133",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-12-13 19:25:06",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "10",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "59368883",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "59306751",
        "CreationDate": "2019-12-17 06:45:12",
        "DeletionDate": "",
        "Score": "8",
        "ViewCount": "",
        "Body": "<p>All the other answers are pretty much exactly correct.</p>\n\n<p>In case anyone's curious, I tried to spell out the compiler's logic as explicitly as possible in <a href=\"https://github.com/dotnet/roslyn/issues/36927#issuecomment-508595947\" rel=\"noreferrer\">https://github.com/dotnet/roslyn/issues/36927#issuecomment-508595947</a></p>\n\n<p>The one piece that's not mentioned is how we decide whether a null check should be considered \"pure\", in the sense that if you do it, we should seriously consider whether null is a possibility. There are a lot of \"incidental\" null checks in C#, where you test for null as a part of doing something else, so we decided that we wanted to narrow down the set of checks to ones that we were sure people were doing deliberately. The heuristic we came up with was \"contains the word null\", so that's why <code>x != null</code> and <code>x is object</code> produce different results.</p>\n",
        "OwnerUserId": "1454017",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-12-17 06:45:12",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "55077446",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "54776759",
        "CreationDate": "2019-03-09 12:39:34",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<p>Somewhat simpler to implement than @CertainPerformance's answer, you can use a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\" rel=\"nofollow noreferrer\"><code>Proxy</code></a> to catch implicit access to everything except <code>window</code>. The only caveat is you can't run this in strict mode:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\n<div class=\"snippet-code\">\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const strictWindow = Object.create(\n  new Proxy(window, {\n    get (target, property) {\n      if (typeof property !== 'string') return undefined\n      console.log(`implicit access to ${property}`)\n      throw new ReferenceError(`${property} is not defined`)\n    }\n  }),\n  Object.getOwnPropertyDescriptors({ window })\n)\n\nwith (strictWindow) {\n  try {\n    const foo = location\n  } catch (error) {\n    window.console.log(error.toString())\n  }\n\n  // doesn't throw error\n  const foo = window.location\n}</code></pre>\n</div>\n</div>\n</p>\n\n<p>Notice that even <code>console</code> has to have an explicit reference in order to not throw. If you want to add that as another exception, just modify <code>strictWindow</code> with another own property using</p>\n\n<pre><code>Object.getOwnPropertyDescriptors({ window, console })\n</code></pre>\n\n<p>In fact, there are <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\" rel=\"nofollow noreferrer\">a lot of standard built-in objects</a> you may want to add exceptions for, but that is beyond the scope of this answer (no pun intended).</p>\n\n<p>In my opinion, the benefits this offers fall short of the benefits of running in strict mode. A much better solution is to use a properly configured linter that catches implicit references during development rather than at runtime in non-strict mode.</p>\n",
        "OwnerUserId": "1541563",
        "OwnerDisplayName": "",
        "LastEditorUserId": "1541563",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-03-09 12:48:21",
        "LastActivityDate": "2019-03-09 12:48:21",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58342351",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58340585",
        "CreationDate": "2019-10-11 13:29:34",
        "DeletionDate": "",
        "Score": "4",
        "ViewCount": "",
        "Body": "<p>This is the result of (as far as I can tell) an undocumented feature of the ruby language, which is best explained by <a href=\"https://github.com/ruby/ruby/blob/c866663784ea5a8f16e7fe5127127fb46ae90e6e/spec/ruby/language/regexp_spec.rb#L5-L15\" rel=\"nofollow noreferrer\">this spec</a>:</p>\n\n<pre><code>it \"matches against $_ (last input) in a conditional if no explicit matchee provided\" do\n  -&gt; {\n    eval &lt;&lt;-EOR\n    $_ = nil\n    (true if /foo/).should_not == true\n    $_ = \"foo\"\n    (true if /foo/).should == true\n    EOR\n  }.should complain(/regex literal in condition/)\nend\n</code></pre>\n\n<p>You can generally think of <code>$_</code> as the \"last string read by <code>gets</code>\"</p>\n\n<p>To make matters even more confusing, <a href=\"https://ruby-doc.org/docs/ruby-doc-bundle/UsersGuide/rg/globalvars.html\" rel=\"nofollow noreferrer\"><code>$_</code> (along with <code>$-</code>) is <strong>not</strong> a global variable; it has local scope</a>.</p>\n\n<hr>\n\n<p>When a ruby script starts, <code>$_ == nil</code>.</p>\n\n<p>So, the code:</p>\n\n<pre><code>// ? 'Regexps are truthy' : 'Regexps are falsey'\n</code></pre>\n\n<p>Is being interpreted like:</p>\n\n<pre><code>(// =~ nil) ? 'Regexps are truthy' : 'Regexps are falsey'\n</code></pre>\n\n<p>...Which returns falsey.</p>\n\n<p>On the other hand, for a <strong>non-literal</strong> regexp (e.g. <code>r = //</code> or <code>Regexp.new('')</code>), this special interpretation does not apply.</p>\n\n<p><code>//</code> is truthy; just like all other object in ruby besides <code>nil</code> and <code>false</code>.</p>\n\n<hr>\n\n<p>Unless running a ruby script directly on the command line (i.e. with the <code>-e</code> flag), the ruby parser will display a warning against such usage:</p>\n\n<blockquote>\n  <p>warning: regex literal in condition</p>\n</blockquote>\n\n<p>You <em>could</em> make use of this behaviour in a script, with something like:</p>\n\n<pre><code>puts \"Do you want to play again?\"\ngets\n# (user enters e.g. 'Yes' or 'No')\n/y/i ? play_again : back_to_menu\n</code></pre>\n\n<p>...But it would be more normal to assign a local variable to the result of <code>gets</code> and perform the regex check against this value explicitly.</p>\n\n<p>I'm not aware of any use case for performing this check with an <em>empty</em> regex, especially when defined as a literal value. The result you've highlighted would indeed catch most ruby developers off-guard.</p>\n",
        "OwnerUserId": "1954610",
        "OwnerDisplayName": "",
        "LastEditorUserId": "1954610",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-10-11 13:57:43",
        "LastActivityDate": "2019-10-11 13:57:43",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "7",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58363901",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58278260",
        "CreationDate": "2019-10-13 13:12:14",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<p>apue.h dependency was still missing in my <code>/usr/local/include</code> after following <strong>Komol Nath Roy</strong> answer in this question.</p>\n\n<p>I downloaded the dependency manually from git and placed it in <code>/usr/local/include</code></p>\n",
        "OwnerUserId": "3861691",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-10-13 13:12:14",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "3",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58381033",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58278260",
        "CreationDate": "2019-10-14 16:52:15",
        "DeletionDate": "",
        "Score": "3",
        "ViewCount": "",
        "Body": "<p>I am a newbie with C++ compiler for R in OSX and I got the same issue that C++ could not find the header after OS was updated (<em>missing math.h although it was there</em>). I followed instructions from  <a href=\"https://thecoatlessprofessor.com/programming/cpp/r-compiler-tools-for-rcpp-on-macos/\" rel=\"nofollow noreferrer\">https://thecoatlessprofessor.com/programming/cpp/r-compiler-tools-for-rcpp-on-macos/</a> but nothing changed.</p>\n\n<p>Finally, it worked for me after I reinstalled the Xcode CLI</p>\n\n<pre><code>xcode-select --install\n</code></pre>\n\n<p>and then change the flags to Var as @Coatless suggested:</p>\n\n<pre><code>export CFLAGS=-isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk\nexport CCFLAGS=-isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk\nexport CXXFLAGS=-isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk\nexport CPPFLAGS=-isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk\n</code></pre>\n",
        "OwnerUserId": "12215823",
        "OwnerDisplayName": "",
        "LastEditorUserId": "12215823",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-10-14 20:38:10",
        "LastActivityDate": "2019-10-14 20:38:10",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58605168",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58278260",
        "CreationDate": "2019-10-29 10:03:26",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<p>In my case I seemed to have <code>llvm</code> and <code>gcc</code> also installed using homebrew. When I removed those, and thus relied fully on the macOS clang, it could find the headers and the compiling worked again.</p>\n",
        "OwnerUserId": "2071450",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-10-29 10:03:26",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "59346086",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58278260",
        "CreationDate": "2019-12-15 16:58:13",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<p>The solution was simpler than I thought. Install clang/llvm.</p>\n\n<pre><code>brew install llvm\n</code></pre>\n\n<p>Then we need to create symlinks ourselves.</p>\n\n<pre><code>for f in /usr/local/Cellar/llvm/9.0.0_1/bin/clang*; do ln -s ${f} /usr/local/bin/\"${f##*/}\"; done\n</code></pre>\n\n<p>And</p>\n\n<pre><code>ln -s /usr/local/Cellar/llvm/9.0.0_1/include/c++ /usr/local/include/c++\n</code></pre>\n\n<p>Depending upon your llvm version, modify the above commands.</p>\n\n<p>Now, you can compile C++ programs without passing any custom flags.</p>\n\n<pre><code>clang++ hello.cpp\n</code></pre>\n",
        "OwnerUserId": "359120",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-12-15 16:58:13",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "59572313",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58278260",
        "CreationDate": "2020-01-03 01:55:04",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<p>I tried 1) manually linking 2) brew install llvm, but they did not work.</p>\n\n<p>Finally, this worked for me:\n <a href=\"https://gitmemory.com/issue/pytorch/pytorch/31190/565153503\" rel=\"nofollow noreferrer\">https://gitmemory.com/issue/pytorch/pytorch/31190/565153503</a></p>\n\n<p>By setting the following env vars:</p>\n\n<pre><code>export CC=clang\nexport CXX=clang++\nexport MACOSX_DEPLOYMENT_TARGET=10.9\n</code></pre>\n",
        "OwnerUserId": "4147022",
        "OwnerDisplayName": "",
        "LastEditorUserId": "4844273",
        "LastEditorDisplayName": "",
        "LastEditDate": "2020-01-03 04:57:02",
        "LastActivityDate": "2020-01-03 04:57:02",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "60486885",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58278260",
        "CreationDate": "2020-03-02 10:27:30",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<p>For me, it works well as follow:</p>\n\n<pre><code>1. xcode-select --install\n\n2. sudo ln -s /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/* /usr/local/include/\n\n3. export SDKROOT=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk\n</code></pre>\n",
        "OwnerUserId": "4596402",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2020-03-02 10:27:30",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57861481",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57842756",
        "CreationDate": "2019-09-09 21:34:42",
        "DeletionDate": "",
        "Score": "6",
        "ViewCount": "",
        "Body": "<p>This is a specific answer to C, and why this is far more important to C than to anything else.</p>\n\n<pre><code>#include &lt;stdio.h&gt;\nint main()\n{\n   FILE *fp = \"some string\";\n}\n</code></pre>\n\n<p>This code compiles with a <em>warning</em>. What are and should be errors in just about every other language on the planet (barring assembly language) are <em>warnings</em> in C. Warnings in C are almost always errors in disguise. Warnings should be fixed, not suppressed.</p>\n\n<p>With <code>gcc</code>, we do this as <code>gcc -Wall -Werror</code>.</p>\n\n<p>This was also the reason for the high rantyness about some MS non-secure API warnings. Most people programming C have learned the hard way to treat warnings as errors and this stuff appeared that just wasn't the same kind of thing and wanted non-portable fixes.</p>\n",
        "OwnerUserId": "14768",
        "OwnerDisplayName": "",
        "LastEditorUserId": "14768",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-09-10 01:55:50",
        "LastActivityDate": "2019-09-10 01:55:50",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57861636",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57842756",
        "CreationDate": "2019-09-09 21:52:39",
        "DeletionDate": "",
        "Score": "17",
        "ViewCount": "",
        "Body": "<p>The other answers are excellent and I don't want to repeat what they have said. </p>\n\n<p>One other aspect to \"why enable warnings\" that hasn't properly been touched on is that they help enormously with code maintenance. When you write a program of significant size, it becomes impossible to keep the whole thing in your head at once. You typically have a function or three that you're actively writing and thinking about, and perhaps a file or three on your screen that you can refer to, but the bulk of the program exists in the background somewhere and you have to trust that it keeps working.</p>\n\n<p>Having warnings on, and having them as energetic and in your face as possible, helps to alert you if something you change makes trouble for something that you can't see. </p>\n\n<p>Take for example, the clang warning <code>-Wswitch-enum</code>. That triggers a warning if you use a switch on an enum and miss out one of the possible enum values. It's something you might think would be an unlikely mistake to make: you probably at least looked at the list of enum values when you wrote the switch statement. You might even have an IDE that generated the switch options for you, leaving no room for human error.</p>\n\n<p>This warning really comes into its own when, six months later you add another possible entry to the enum. Again, if you're thinking about the code in question you'll probably be fine. But if this enum is used for multiple different purposes and it's for one of those that you need the extra option, it's very easy to forget to update a switch in a file you haven't touched for 6 months. </p>\n\n<p>You can think of warnings in the same way as you'd think of automated test cases: they help you make sure that the code is sensible and doing what you need when you first write it, but they help even more to make sure that it keeps doing what you need while you prod at it. The difference is that test cases work very narrowly to the requirements of your code and you have to write them, while warnings work broadly to sensible standards for almost all code, and they're very generously supplied by the boffins who make the compilers. </p>\n",
        "OwnerUserId": "1688786",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-09-09 21:52:39",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57861725",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57842756",
        "CreationDate": "2019-09-09 22:04:28",
        "DeletionDate": "",
        "Score": "8",
        "ViewCount": "",
        "Body": "<p>As someone who works with legacy embedded C code, enabling compiler warnings has helped show a lot of weakness and areas to investigate when proposing fixes. In gcc utilizing <code>-Wall</code> and <code>-Wextra</code> and even <code>-Wshadow</code> have become vital. I'm not going to go every single hazard, but I'll list a few that have popped up that helped show code issues.</p>\n\n<h2>Variables being left behind</h2>\n\n<p>This one can easily point to unfinished work and areas that might not be utilizing all of the passed variables which could be an issue. Let's look at a simple function that may trigger this:</p>\n\n<pre><code>int foo(int a, int b)\n{\n   int c = 0;\n\n   if (a &gt; 0)\n   {\n        return a;\n   }\n   return 0;\n}\n</code></pre>\n\n<p>Just compiling this without -Wall or -Wextra returns no issues. -Wall will tell you though that <code>c</code> is never used: </p>\n\n<blockquote>\n  <p>foo.c: In function \u2018foo\u2019: </p>\n  \n  <p>foo.c:9:20: warning: unused variable \u2018c\u2019\n  [-Wunused-variable]</p>\n</blockquote>\n\n<p>-Wextra will also tell you that your parameter b doesn't do anything:</p>\n\n<blockquote>\n  <p>foo.c: In function \u2018foo\u2019: </p>\n  \n  <p>foo.c:9:20: warning: unused variable \u2018c\u2019\n  [-Wunused-variable]</p>\n  \n  <p>foo.c:7:20: warning: unused parameter \u2018b\u2019 [-Wunused-parameter]  int foo(int a, int b)</p>\n</blockquote>\n\n<h2>Global Variable shadowing</h2>\n\n<p>This one bit hard and did not show up until <code>-Wshadow</code> was used. Let's modify the example above to just add, but there just happens to be a global with the same name as a local which causes a lot of confusion when trying to use both.</p>\n\n<pre><code>int c = 7;\n\nint foo(int a, int b)\n{\n   int c = a + b;\n   return c;\n}\n</code></pre>\n\n<p>When -Wshadow was turned on, it's easy to spot this issue.</p>\n\n<blockquote>\n  <p>foo.c:11:9: warning: declaration of \u2018c\u2019 shadows a global declaration\n  [-Wshadow]</p>\n  \n  <p>foo.c:1:5: note: shadowed declaration is here</p>\n</blockquote>\n\n<h2>Format strings</h2>\n\n<p>This doesn't require any extra flags in gcc, but it has still be the source of problems in the past. A simple function trying to print data, but has a formatting error could look like this: </p>\n\n<pre><code>void foo(const char * str)\n{\n    printf(\"str = %d\\n\", str);\n}\n</code></pre>\n\n<p>This doesn't print the string since the formatting flag is wrong and gcc will happily tell you this is probably not what you wanted:</p>\n\n<blockquote>\n  <p>foo.c: In function \u2018foo\u2019: </p>\n  \n  <p>foo.c:10:12: warning: format \u2018%d\u2019 expects\n  argument of type \u2018int\u2019, but argument 2 has type \u2018const char *\u2019\n  [-Wformat=]</p>\n</blockquote>\n\n<hr>\n\n<p>These are just three of the many things the compiler can double check for you. There are a lot of others like using an uninitialized variable that others have pointed out.</p>\n",
        "OwnerUserId": "2848117",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-09-09 22:04:28",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56465501",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56436559",
        "CreationDate": "2019-06-05 17:41:54",
        "DeletionDate": "",
        "Score": "9",
        "ViewCount": "",
        "Body": "<p>I've tried the workaround and it works great for me. Here's the Objective-C version:</p>\n\n<pre><code>@interface UISegmentedControl (Common)\n- (void)ensureiOS12Style;\n@end\n</code></pre>\n\n<pre><code>@implementation UISegmentedControl (Common)\n- (void)ensureiOS12Style {\n    // UISegmentedControl has changed in iOS 13 and setting the tint\n    // color now has no effect.\n    if (@available(iOS 13, *)) {\n        UIColor *tintColor = [self tintColor];\n        UIImage *tintColorImage = [self imageWithColor:tintColor];\n        // Must set the background image for normal to something (even clear) else the rest won't work\n        [self setBackgroundImage:[self imageWithColor:self.backgroundColor ? self.backgroundColor : [UIColor clearColor]] forState:UIControlStateNormal barMetrics:UIBarMetricsDefault];\n        [self setBackgroundImage:tintColorImage forState:UIControlStateSelected barMetrics:UIBarMetricsDefault];\n        [self setBackgroundImage:[self imageWithColor:[tintColor colorWithAlphaComponent:0.2]] forState:UIControlStateHighlighted barMetrics:UIBarMetricsDefault];\n        [self setBackgroundImage:tintColorImage forState:UIControlStateSelected|UIControlStateSelected barMetrics:UIBarMetricsDefault];\n        [self setTitleTextAttributes:@{NSForegroundColorAttributeName: tintColor, NSFontAttributeName: [UIFont systemFontOfSize:13]} forState:UIControlStateNormal];\n        [self setDividerImage:tintColorImage forLeftSegmentState:UIControlStateNormal rightSegmentState:UIControlStateNormal barMetrics:UIBarMetricsDefault];\n        self.layer.borderWidth = 1;\n        self.layer.borderColor = [tintColor CGColor];\n    }\n}\n\n- (UIImage *)imageWithColor: (UIColor *)color {\n    CGRect rect = CGRectMake(0.0f, 0.0f, 1.0f, 1.0f);\n    UIGraphicsBeginImageContext(rect.size);\n    CGContextRef context = UIGraphicsGetCurrentContext();\n    CGContextSetFillColorWithColor(context, [color CGColor]);\n    CGContextFillRect(context, rect);\n    UIImage *theImage = UIGraphicsGetImageFromCurrentImageContext();\n    UIGraphicsEndImageContext();\n    return theImage;\n}\n@end\n</code></pre>\n",
        "OwnerUserId": "9938677",
        "OwnerDisplayName": "",
        "LastEditorUserId": "1033581",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-06-07 06:32:17",
        "LastActivityDate": "2019-06-07 06:32:17",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56620860",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56436559",
        "CreationDate": "2019-06-16 16:54:01",
        "DeletionDate": "",
        "Score": "10",
        "ViewCount": "",
        "Body": "<h1>As of Xcode 11 beta 3</h1>\n\n<blockquote>\n  <p>There is now the <a href=\"https://developer.apple.com/documentation/uikit/uisegmentedcontrol/3335209-selectedsegmenttintcolor\" rel=\"noreferrer\"><code>selectedSegmentTintColor</code></a> property on <code>UISegmentedControl</code>.</p>\n</blockquote>\n\n<p>Thank you @rmaddy!</p>\n\n<hr>\n\n<h1>Original answer, for Xcode 11 beta and beta 2</h1>\n\n<blockquote>\n  <p>Is there a proper solution, using public APIs, that doesn't require digging into the private subview structure?</p>\n</blockquote>\n\n<p>With Xcode 11.0 beta, it seems to be a challenge to do it by-the-rules, because it basically requires to redraw all the background images for every states by yourself, with round corners, transparency and <code>resizableImage(withCapInsets:)</code>. For instance, you would need to generate a colored image similar to:<br>\n<a href=\"https://i.stack.imgur.com/GFej9.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/GFej9.png\" alt=\"enter image description here\"></a></p>\n\n<p>So for now, the let's-dig-into-the-subviews way seems much easier:</p>\n\n<pre><code>class TintedSegmentedControl: UISegmentedControl {\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n\n        if #available(iOS 13.0, *) {\n            for subview in subviews {\n                if let selectedImageView = subview.subviews.last(where: { $0 is UIImageView }) as? UIImageView,\n                    let image = selectedImageView.image {\n                    selectedImageView.image = image.withRenderingMode(.alwaysTemplate)\n                    break\n                }\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>This solution will correctly apply the tint color to the selection, as in:\n<a href=\"https://i.stack.imgur.com/Z5KcA.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/Z5KcA.png\" alt=\"enter image description here\"></a></p>\n",
        "OwnerUserId": "1033581",
        "OwnerDisplayName": "",
        "LastEditorUserId": "1033581",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-07-03 17:37:21",
        "LastActivityDate": "2019-07-03 17:37:21",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "4",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58342366",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "58340585",
        "CreationDate": "2019-10-11 13:30:27",
        "DeletionDate": "",
        "Score": "6",
        "ViewCount": "",
        "Body": "<p>This isn\u2019t a bug. What is happening is Ruby is rewriting the code so that</p>\n\n<pre><code>if /foo/\n  whatever\nend\n</code></pre>\n\n<p>effectively becomes</p>\n\n<pre><code>if /foo/ =~ $_\n  whatever\nend\n</code></pre>\n\n<p>If you are running this code in a normal script (and not using the <code>-e</code> option) then you should see a warning:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>warning: regex literal in condition\n</code></pre>\n\n<p>This is probably somewhat confusing most of the time, which is why the warning is given, but can be useful for one lines using the <code>-e</code> option. For example you can print all lines matching a given regexp from a file with</p>\n\n<pre><code>$ ruby -ne 'print if /foo/' filename\n</code></pre>\n\n<p>(The default argument for <code>print</code> is <code>$_</code> as well.)</p>\n",
        "OwnerUserId": "214790",
        "OwnerDisplayName": "",
        "LastEditorUserId": "214790",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-10-15 14:04:51",
        "LastActivityDate": "2019-10-15 14:04:51",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "4",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "59418515",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "59418514",
        "CreationDate": "2019-12-20 00:26:27",
        "DeletionDate": "",
        "Score": "22",
        "ViewCount": "",
        "Body": "<p>This is remarkably easy with the <a href=\"http://eel.is/c++draft/#time\" rel=\"nofollow noreferrer\">C++20 chrono specification</a>.  Below I show a function which inputs an arbitrary date, and prints this information to <code>cout</code>.  Though at the time of this writing, the <a href=\"http://eel.is/c++draft/#time\" rel=\"nofollow noreferrer\">C++20 chrono specification</a> isn't yet shipping, it is approximated by a <a href=\"https://github.com/HowardHinnant/date\" rel=\"nofollow noreferrer\">free, open-source library</a>.  So you can experiment with it today, and even include it in shipping applications as long as you adopt C++11 or later.</p>\n\n<p>This answer will take the form of a function:</p>\n\n<pre><code>void info(std::chrono::sys_days sd);\n</code></pre>\n\n<p><code>sys_days</code> is a day-precision <code>time_point</code> in the <code>system_clock</code> family.  That means it is simply a count of days since 1970-01-01 00:00:00 UTC.  The type alias <code>sys_days</code> is new with C++20, but the underlying type has been available since C++11 (<code>time_point&lt;system_clock, duration&lt;int, ratio&lt;86400&gt;&gt;&gt;</code>).  If you use the <a href=\"https://github.com/HowardHinnant/date\" rel=\"nofollow noreferrer\">open-source C++20 preview library</a>, <code>sys_days</code> is in <code>namespace date</code>.</p>\n\n<p>The code below assumes function-local:</p>\n\n<pre><code>using namespace std;\nusing namespace std::chrono;\n</code></pre>\n\n<p>to reduce verbosity.  If you are experimenting with the <a href=\"https://github.com/HowardHinnant/date\" rel=\"nofollow noreferrer\">open-source C++20 preview library</a>, also assume:</p>\n\n<pre><code>using namespace date;\n</code></pre>\n\n<p><strong>Heading</strong></p>\n\n<p>To output the first two lines is simple:</p>\n\n<pre><code>cout &lt;&lt; format(\"{:%d %B %Y is a %A}\\n\", sd)\n     &lt;&lt; \"\\nAdditional facts\\n\";\n</code></pre>\n\n<p>Just take the date <code>sd</code> and use <code>format</code> with the familiar <code>strftime</code>/<code>put_time</code> flags to print out the date and text.  The <a href=\"https://github.com/HowardHinnant/date\" rel=\"nofollow noreferrer\">open-source C++20 preview library</a> hasn't yet integrated the <a href=\"https://github.com/fmtlib/fmt\" rel=\"nofollow noreferrer\">fmt library</a>, and so uses the slightly altered format string <code>\"%d %B %Y is a %A\\n\"</code>.</p>\n\n<p>This will output (for example):</p>\n\n<pre><code>26 December 2019 is a Thursday\n\nAdditional facts\n</code></pre>\n\n<p><strong>Common intermediate results computed once</strong></p>\n\n<p>This section of the function is written last, because one doesn't yet know what computations will be needed multiple times.  But once you know, here is how to compute them:</p>\n\n<pre><code>year_month_day ymd = sd;\nauto y = ymd.year();\nauto m = ymd.month();\nweekday wd{sd};\nsys_days NewYears = y/1/1;\nsys_days LastDayOfYear = y/12/31;\n</code></pre>\n\n<p>We will need the year and month fields of <code>sd</code>, and the <code>weekday</code> (day of the week).  It is efficient to compute them once and for all in this manner.  We will also need (multiple times) the first and last days of the current year.  It is hard to tell at this point, but it is efficient to store these values as type <code>sys_days</code> as their subsequent use is only with day-oriented arithmetic which <code>sys_days</code> is <em>very</em> efficient at (sub-nanosecond speeds).</p>\n\n<p><strong>Fact 1:  day number of year, and number of days left in year</strong></p>\n\n<pre><code>auto dn = sd - NewYears + days{1};\nauto dl = LastDayOfYear - sd;\ncout &lt;&lt; \"* It is day number \" &lt;&lt; dn/days{1} &lt;&lt; \" of the year, \"\n     &lt;&lt; dl/days{1} &lt;&lt; \" days left.\\n\";\n</code></pre>\n\n<p>This prints out the day number of the year, with January 1 being day 1, and then also prints out the number of days remaining in the year, not including <code>sd</code>.  The computation to do this is trivial.  Dividing each result by <code>days{1}</code> is a way to extract the number of days in <code>dn</code> and <code>dl</code> into an integral type for formatting purposes.</p>\n\n<p><strong>Fact 2: Number of this weekday and total number of weekdays in year</strong></p>\n\n<pre><code>sys_days first_wd = y/1/wd[1];\nsys_days last_wd = y/12/wd[last];\nauto total_wd = (last_wd - first_wd)/weeks{1} + 1;\nauto n_wd = (sd - first_wd)/weeks{1} + 1;\ncout &lt;&lt; format(\"* It is {:%A} number \", wd) &lt;&lt; n_wd &lt;&lt; \" out of \"\n     &lt;&lt; total_wd &lt;&lt; format(\" in {:%Y}.\\n}\", y);\n</code></pre>\n\n<p><code>wd</code> is the day of the week (Monday thru Sunday) computed at the top of this article.  To perform this computation we first need the dates of the first and last <code>wd</code>'s in the year <code>y</code>.  <code>y/1/wd[1]</code> is the first <code>wd</code> in January, and <code>y/12/wd[last]</code> is the last <code>wd</code> in December.</p>\n\n<p>The total number of <code>wd</code>s in the year is just the number of weeks between these two dates (plus 1).  The sub-expression <code>last_wd - first_wd</code> is the number of days between the two dates.  Dividing this result by 1 week results in an integral type holding the number of weeks between the two dates.</p>\n\n<p>The week number is done the same way as the total number of weeks except one starts with the current day instead of the last <code>wd</code> of the year: <code>sd - first_wd</code>.</p>\n\n<p><strong>Fact 3: Number of this weekday and total number of weekdays in month</strong></p>\n\n<pre><code>first_wd = y/m/wd[1];\nlast_wd = y/m/wd[last];\ntotal_wd = (last_wd - first_wd)/weeks{1} + 1;\nn_wd = (sd - first_wd)/weeks{1} + 1;\ncout &lt;&lt; format(\"* It is {:%A} number }\", wd) &lt;&lt; n_wd &lt;&lt; \" out of \"\n     &lt;&lt; total_wd &lt;&lt; format(\" in {:%B %Y}.\\n\", y/m);\n</code></pre>\n\n<p>This works just like Fact 2, except we start with the first and last <code>wd</code>s of the year-month pair <code>y/m</code> instead of the entire year.</p>\n\n<p><strong>Fact 4: Number of days in year</strong></p>\n\n<pre><code>auto total_days = LastDayOfYear - NewYears + days{1};\ncout &lt;&lt; format(\"* Year {:%Y} has \", y) &lt;&lt; total_days/days{1} &lt;&lt; \" days.\\n\";\n</code></pre>\n\n<p>The code pretty much speaks for itself.</p>\n\n<p><strong>Fact 5 Number of days in month</strong></p>\n\n<pre><code>total_days = sys_days{y/m/last} - sys_days{y/m/1} + days{1};\ncout &lt;&lt; format(\"* {:%B %Y} has \", y/m) &lt;&lt; total_days/days{1} &lt;&lt; \" days.\\n\";\n</code></pre>\n\n<p>The expression <code>y/m/last</code> is the last day of the year-month pair <code>y/m</code>, and of course <code>y/m/1</code> is the first day of the month.  Both are converted to <code>sys_days</code> so that they can be subtracted to get the number of days between them.  Add 1 for the 1-based count.</p>\n\n<p><strong>Use</strong></p>\n\n<p><code>info</code> can be used like this:</p>\n\n<pre><code>info(December/26/2019);\n</code></pre>\n\n<p>or like this:</p>\n\n<pre><code>info(floor&lt;days&gt;(system_clock::now()));\n</code></pre>\n\n<p>Here is example output:</p>\n\n<pre><code>26 December 2019 is a Thursday\n\nAdditional facts\n* It is day number 360 of the year, 5 days left.\n* It is Thursday number 52 out of 52 in 2019.\n* It is Thursday number 4 out of 4 in December 2019.\n* Year 2019 has 365 days.\n* December 2019 has 31 days.\n</code></pre>\n\n<hr>\n\n<p><strong>Edit</strong></p>\n\n<p>For those who are not fond of the \"conventional syntax\", there is a complete \"constructor syntax\" that can be used instead.</p>\n\n<p>For example:</p>\n\n<pre><code>sys_days NewYears = y/1/1;\nsys_days first_wd = y/1/wd[1];\nsys_days last_wd = y/12/wd[last];\n</code></pre>\n\n<p>can be replaced by:</p>\n\n<pre><code>sys_days NewYears = year_month_day{y, month{1}, day{1}};\nsys_days first_wd = year_month_weekday{y, month{1}, weekday_indexed{wd, 1}};\nsys_days last_wd = year_month_weekday_last{y, month{12}, weekday_last{wd}};\n</code></pre>\n",
        "OwnerUserId": "576911",
        "OwnerDisplayName": "",
        "LastEditorUserId": "576911",
        "LastEditorDisplayName": "",
        "LastEditDate": "2020-02-15 15:22:37",
        "LastActivityDate": "2020-02-15 15:22:37",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "5",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56727419",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56436559",
        "CreationDate": "2019-06-23 20:15:01",
        "DeletionDate": "",
        "Score": "4",
        "ViewCount": "",
        "Body": "<p>Here is my take on Jonathan.'s answer for Xamarin.iOS (C#), but with fixes for image sizing. As with C\u0153ur's comment on Colin Blake's answer, I made all images except the divider the size of the segmented control. The divider is 1xheight of the segment. </p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>public static UIImage ImageWithColor(UIColor color, CGSize size)\n{\n    var rect = new CGRect(0, 0, size.Width, size.Height);\n    UIGraphics.BeginImageContext(rect.Size);\n    var context = UIGraphics.GetCurrentContext();\n    context.SetFillColor(color.CGColor);\n    context.FillRect(rect);\n    var image = UIGraphics.GetImageFromCurrentImageContext();\n    UIGraphics.EndImageContext();\n    return image;\n}\n\n// https://stackoverflow.com/a/56465501/420175\npublic static void ColorSegmentiOS13(UISegmentedControl uis, UIColor tintColor, UIColor textSelectedColor, UIColor textDeselectedColor)\n{\n    if (!UIDevice.CurrentDevice.CheckSystemVersion(13, 0))\n    {\n        return;\n    }\n\n    UIImage image(UIColor color)\n    {\n        return ImageWithColor(color, uis.Frame.Size);\n    }\n\n    UIImage imageDivider(UIColor color)\n    {\n        return ImageWithColor(color, 1, uis.Frame.Height);\n    }\n\n    // Must set the background image for normal to something (even clear) else the rest won't work\n    //setBackgroundImage(UIImage(color: backgroundColor ?? .clear), for: .normal, barMetrics: .default)\n    uis.SetBackgroundImage(image(UIColor.Clear), UIControlState.Normal, UIBarMetrics.Default);\n\n    // setBackgroundImage(tintColorImage, for: .selected, barMetrics: .default)\n    uis.SetBackgroundImage(image(tintColor), UIControlState.Selected, UIBarMetrics.Default);\n\n    // setBackgroundImage(UIImage(color: tintColor.withAlphaComponent(0.2)), for: .highlighted, barMetrics: .default)\n    uis.SetBackgroundImage(image(tintColor.ColorWithAlpha(0.2f)), UIControlState.Highlighted, UIBarMetrics.Default);\n\n    // setBackgroundImage(tintColorImage, for: [.highlighted, .selected], barMetrics: .default)\n    uis.SetBackgroundImage(image(tintColor), UIControlState.Highlighted | UIControlState.Selected, UIBarMetrics.Default);\n\n    // setTitleTextAttributes([.foregroundColor: tintColor, NSAttributedString.Key.font: UIFont.systemFont(ofSize: 13, weight: .regular)], for: .normal)\n    // Change: support distinct color for selected/de-selected; keep original font\n    uis.SetTitleTextAttributes(new UITextAttributes() { TextColor = textDeselectedColor }, UIControlState.Normal); //Font = UIFont.SystemFontOfSize(13, UIFontWeight.Regular)\n    uis.SetTitleTextAttributes(new UITextAttributes() { TextColor = textSelectedColor, }, UIControlState.Selected); //Font = UIFont.SystemFontOfSize(13, UIFontWeight.Regular)\n\n    // setDividerImage(tintColorImage, forLeftSegmentState: .normal, rightSegmentState: .normal, barMetrics: .default)\n    uis.SetDividerImage(imageDivider(tintColor), UIControlState.Normal, UIControlState.Normal, UIBarMetrics.Default);\n\n    //layer.borderWidth = 1\n    uis.Layer.BorderWidth = 1;\n\n    //layer.borderColor = tintColor.cgColor\n    uis.Layer.BorderColor = tintColor.CGColor;\n}\n</code></pre>\n",
        "OwnerUserId": "420175",
        "OwnerDisplayName": "",
        "LastEditorUserId": "1033581",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-06-24 01:34:05",
        "LastActivityDate": "2019-06-24 01:34:05",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "56874473",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56436559",
        "CreationDate": "2019-07-03 16:24:43",
        "DeletionDate": "",
        "Score": "120",
        "ViewCount": "",
        "Body": "<p>As of iOS 13b3, there is now a <code>selectedSegmentTintColor</code> on <code>UISegmentedControl</code>.</p>\n\n<p>To change the overall color of the segmented control use its <code>backgroundColor</code>.</p>\n\n<p>To change the color of the selected segment use <code>selectedSegmentTintColor</code>.</p>\n\n<p>To change the color/font of the unselected segment titles, use <code>setTitleTextAttributes</code> with a state of <code>.normal</code>/<code>UIControlStateNormal</code>.</p>\n\n<p>To change the color/font of the selected segment titles, use <code>setTitleTextAttributes</code> with a state of <code>.selected</code>/<code>UIControlStateSelected</code>.</p>\n\n<p>If you create a segmented control with images, if the images are created as template images, then the segmented control's <code>tintColor</code> will be used to color the images. But this has a problem. If you set the <code>tintColor</code> to the same color as <code>selectedSegmentTintColor</code> then the image won't be visible in the selected segment. If you set the <code>tintColor</code> to the same color as <code>backgroundColor</code>, then the images on the unselected segments won't be visible. This means your segmented control with images must use 3 different colors for everything to be visible. Or you can use non-template images and not set the <code>tintColor</code>.</p>\n\n<p>Under iOS 12 or earlier, simply set the segmented control's <code>tintColor</code> or rely on the app's overall tint color.</p>\n",
        "OwnerUserId": "1226963",
        "OwnerDisplayName": "",
        "LastEditorUserId": "1226963",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-07-04 19:22:08",
        "LastActivityDate": "2019-07-04 19:22:08",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "8",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58080375",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57842756",
        "CreationDate": "2019-09-24 12:29:36",
        "DeletionDate": "",
        "Score": "4",
        "ViewCount": "",
        "Body": "<p>The compiler warnings in C++ is very useful for some reasons.</p>\n\n<p>1 - It permit to show you where you can have made a mistake who can impact the final result of your operations. For example if you didn't initialize a variable or if you put \"=\" instead of \"==\" ( there are just examples )</p>\n\n<p>2 - It permits also to show you where your code is not conform to the standard of the c++. It's useful because if the code is conform to the actual standard it will be easy to move the code into an other plateform for example.</p>\n\n<p>In general, the warnings are very useful to show you where you have mistakes in your code who can affect the result of your algorithm or prevent some error when the user will use your program.</p>\n",
        "OwnerUserId": "10744028",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-09-24 12:29:36",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58184431",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57842756",
        "CreationDate": "2019-10-01 12:06:42",
        "DeletionDate": "",
        "Score": "-1",
        "ViewCount": "",
        "Body": "<p>You should definitely enable compiler warnings as some compilers are bad at reporting some common programming mistakes, including the following:-</p>\n\n<p>-> initialise a variable gets forgotten\n-> return a value from a function get missed\n-> the simple arguments in printf and scanf families not matching the format string\na function is used without being declared beforehand, though happens in c only</p>\n\n<p>So as these functions can be detected and reported, just usually not by default; so this feature must be explicitly requested via compiler options.</p>\n",
        "OwnerUserId": "11999260",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-10-01 12:06:42",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58197831",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57842756",
        "CreationDate": "2019-10-02 08:24:44",
        "DeletionDate": "",
        "Score": "3",
        "ViewCount": "",
        "Body": "<p>A warning is an error waiting to happen.\nSo you must enable compiler warnings and tidy up your code to remove any warning.</p>\n",
        "OwnerUserId": "5006863",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-10-02 08:24:44",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58206329",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57842756",
        "CreationDate": "2019-10-02 17:20:26",
        "DeletionDate": "",
        "Score": "4",
        "ViewCount": "",
        "Body": "<p>Ignoring warnings means you left sloppy code that not only could cause problems in the future for someone else, but also will make important compile messages less noticed by you.\nThe more compiler output, the less anyone will notice or bother.  Cleaner the better.  It also means you know what you are doing.  Warnings are very unprofessional, careless, and risky.</p>\n",
        "OwnerUserId": "1991440",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-10-02 17:20:26",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "1",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58214138",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57842756",
        "CreationDate": "2019-10-03 07:18:43",
        "DeletionDate": "",
        "Score": "3",
        "ViewCount": "",
        "Body": "<p>There's only <em>one</em> problem with treating warnings as errors:  When you're using code coming from other sources (e.g., micro$**t libraries, open source projects), <strong><em>they</em></strong> didn't do their job right, and compiling their code generates <em>tons</em> of warnings.</p>\n\n<p>I <em>always</em> write my code so it doesn't generate any warnings or errors, and clean it up until it compiles without generating any extraneous noise.  The garbage I have to work with appalls me, and I'm astounded when I have to build a big project and watch a stream of warnings go by where the compilation should only be announcing which files it processed.</p>\n\n<p>I also document my code because I know the real lifetime cost of software comes mostly from maintenance, not from writing it initially, but that's a different story...</p>\n",
        "OwnerUserId": "6713758",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-10-03 07:18:43",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58228653",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57842756",
        "CreationDate": "2019-10-04 01:07:08",
        "DeletionDate": "",
        "Score": "4",
        "ViewCount": "",
        "Body": "<p>COMPILER WARNINGS ARE YOUR FRIEND (not shouting, uppercase for emphasis).</p>\n\n<p>I work on legacy Fortran-77 systems. The compiler tells me valuable things: argument datatype mismatches on a subroutine call, using a local variable before a value has been set into the variable, if I have a variable or subroutine argument that is not used. These are almost always errors.</p>\n\n<p>Avoiding a long post:\nWhen my code compiles cleanly, 97% it works.\nThe other guy I work with compiles with all warnings off, spends hours or days in the debugger, then asks me to help. I just compile his code with the warnings on and tell him what to fix.</p>\n",
        "OwnerUserId": "8684591",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-10-04 01:07:08",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58230491",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57842756",
        "CreationDate": "2019-10-04 05:35:25",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<p>The fact that C++ compilers accept compiling code that obviously results in undefined behavior <em>at all</em> is a major flaw in the compilers.  The reason they don't fix this is because doing so would probably break some usable builds.</p>\n\n<p>Most of the warnings should be fatal errors that prevent the build from completing.  The defaults to just display errors and do the build anyway are wrong and if you don't override them to treat warnings as errors and leave some warnings then you will likely end up with your program crashing and doing random things.</p>\n",
        "OwnerUserId": "281920",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-10-04 05:35:25",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58239703",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57842756",
        "CreationDate": "2019-10-04 15:51:54",
        "DeletionDate": "",
        "Score": "3",
        "ViewCount": "",
        "Body": "<p>I once worked for a large (Fortune 50) company that manufactured electronic testing equipment.</p>\n\n<p>The core product of my group was an MFC program that, over the years, came to generate literally hundreds of warnings.  Which were ignored in almost all cases.</p>\n\n<p>This is a frigging nightmare when bugs occur.</p>\n\n<p>After that position, I was lucky enough to be hired as the first developer in a new startup.</p>\n\n<p>I encouraged a 'no warning' policy for all builds, with compiler warning levels set to be pretty noisy.  </p>\n\n<p>Our practice was to use #pragma warning - push/disable/pop for code that the developer was sure was really fine, along with a log statement at the debug level, just in case.</p>\n\n<p>This practice worked well for us.</p>\n",
        "OwnerUserId": "15079",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-10-04 15:51:54",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57555264",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56436559",
        "CreationDate": "2019-08-19 10:50:52",
        "DeletionDate": "",
        "Score": "8",
        "ViewCount": "",
        "Body": "<pre><code>if (@available(iOS 13.0, *)) {\n\n    [self.segmentedControl setTitleTextAttributes:@{NSForegroundColorAttributeName: [UIColor whiteColor], NSFontAttributeName: [UIFont systemFontOfSize:13]} forState:UIControlStateSelected];\n    [self.segmentedControl setSelectedSegmentTintColor:[UIColor blueColor]];\n\n} else {\n\n[self.segmentedControl setTintColor:[UIColor blueColor]];}\n</code></pre>\n",
        "OwnerUserId": "4960816",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-08-19 10:50:52",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57754615",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56436559",
        "CreationDate": "2019-09-02 09:37:00",
        "DeletionDate": "",
        "Score": "-2",
        "ViewCount": "",
        "Body": "<p>Expanding a little bit on <strong>Jonathan</strong> answer in case you don't want round corners</p>\n\n<pre><code>extension UISegmentedControl {\n    /// Tint color doesn't have any effect on iOS 13.\n    func ensureiOS12Style(roundCorner: Bool = true) {\n        if #available(iOS 13, *) {\n            let tintColorImage = UIImage(color: tintColor)\n            // Must set the background image for normal to something (even clear) else the rest won't work\n            setBackgroundImage(UIImage(color: backgroundColor ?? .clear), for: .normal, barMetrics: .default)\n            setBackgroundImage(tintColorImage, for: .selected, barMetrics: .default)\n            setBackgroundImage(UIImage(color: tintColor.withAlphaComponent(0.2)), for: .highlighted, barMetrics: .default)\n            setBackgroundImage(tintColorImage, for: [.highlighted, .selected], barMetrics: .default)\n            setTitleTextAttributes([.foregroundColor: tintColor, NSAttributedString.Key.font: UIFont.systemFont(ofSize: 13, weight: .regular)], for: .normal)\n            setDividerImage(tintColorImage, forLeftSegmentState: .normal, rightSegmentState: .normal, barMetrics: .default)\n\n            if !roundCorner {\n                layer.masksToBounds = false\n\n                let borderView = UIView()\n                borderView.layer.borderWidth = 1\n                borderView.layer.borderColor = UIColor.black.cgColor\n                borderView.isUserInteractionEnabled = false\n                borderView.translatesAutoresizingMaskIntoConstraints = false\n\n                addSubview(borderView)\n\n                NSLayoutConstraint(item: borderView, attribute: .centerX, relatedBy: .equal, toItem: self, attribute: .centerX, multiplier: 1, constant: 0).isActive = true\n                NSLayoutConstraint(item: borderView, attribute: .centerY, relatedBy: .equal, toItem: self, attribute: .centerY, multiplier: 1, constant: 0).isActive = true\n                NSLayoutConstraint(item: borderView, attribute: .width, relatedBy: .equal, toItem: self, attribute: .width, multiplier: 1, constant: 0).isActive = true\n                NSLayoutConstraint(item: borderView, attribute: .height, relatedBy: .equal, toItem: self, attribute: .height, multiplier: 1, constant: 0).isActive = true\n            }\n        }\n    }\n}\n</code></pre>\n",
        "OwnerUserId": "1528605",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-09-02 09:37:00",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58078791",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56436559",
        "CreationDate": "2019-09-24 10:58:31",
        "DeletionDate": "",
        "Score": "3",
        "ViewCount": "",
        "Body": "<p>You can implement following method</p>\n\n<pre><code>extension UISegmentedControl{\n    func selectedSegmentTintColor(_ color: UIColor) {\n        self.setTitleTextAttributes([.foregroundColor: color], for: .selected)\n    }\n    func unselectedSegmentTintColor(_ color: UIColor) {\n        self.setTitleTextAttributes([.foregroundColor: color], for: .normal)\n    }\n}\n</code></pre>\n\n<p>Usage code</p>\n\n<pre><code>segmentControl.unselectedSegmentTintColor(.white)\nsegmentControl.selectedSegmentTintColor(.black)\n</code></pre>\n",
        "OwnerUserId": "7116078",
        "OwnerDisplayName": "",
        "LastEditorUserId": "4826457",
        "LastEditorDisplayName": "",
        "LastEditDate": "2019-09-24 11:07:34",
        "LastActivityDate": "2019-09-24 11:07:34",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58085833",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56436559",
        "CreationDate": "2019-09-24 17:56:52",
        "DeletionDate": "",
        "Score": "8",
        "ViewCount": "",
        "Body": "<p>Swift version of @Ilahi Charfeddine answer:</p>\n\n<pre><code>if #available(iOS 13.0, *) {\n   segmentedControl.setTitleTextAttributes([.foregroundColor: UIColor.white], for: .selected)\n   segmentedControl.selectedSegmentTintColor = UIColor.blue\n} else {\n   segmentedControl.tintColor = UIColor.blue\n}\n</code></pre>\n",
        "OwnerUserId": "5450103",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-09-24 17:56:52",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58319583",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56436559",
        "CreationDate": "2019-10-10 09:22:57",
        "DeletionDate": "",
        "Score": "3",
        "ViewCount": "",
        "Body": "<p>iOS13 UISegmentController </p>\n\n<p>how to use:</p>\n\n<pre><code>segment.setOldLayout(tintColor: .green)\n\nextension UISegmentedControl\n{\n    func setOldLayout(tintColor: UIColor)\n    {\n        if #available(iOS 13, *)\n        {\n            let bg = UIImage(color: .clear, size: CGSize(width: 1, height: 32))\n             let devider = UIImage(color: tintColor, size: CGSize(width: 1, height: 32))\n\n             //set background images\n             self.setBackgroundImage(bg, for: .normal, barMetrics: .default)\n             self.setBackgroundImage(devider, for: .selected, barMetrics: .default)\n\n             //set divider color\n             self.setDividerImage(devider, forLeftSegmentState: .normal, rightSegmentState: .normal, barMetrics: .default)\n\n             //set border\n             self.layer.borderWidth = 1\n             self.layer.borderColor = tintColor.cgColor\n\n             //set label color\n             self.setTitleTextAttributes([.foregroundColor: tintColor], for: .normal)\n             self.setTitleTextAttributes([.foregroundColor: UIColor.white], for: .selected)\n        }\n        else\n        {\n            self.tintColor = tintColor\n        }\n    }\n}\nextension UIImage {\n    convenience init(color: UIColor, size: CGSize) {\n        UIGraphicsBeginImageContextWithOptions(size, false, 1)\n        color.set()\n        let ctx = UIGraphicsGetCurrentContext()!\n        ctx.fill(CGRect(origin: .zero, size: size))\n        let image = UIGraphicsGetImageFromCurrentImageContext()!\n        UIGraphicsEndImageContext()\n\n        self.init(data: image.pngData()!)!\n    }\n}\n</code></pre>\n",
        "OwnerUserId": "5321001",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-10-10 09:22:57",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "55929473",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55929472",
        "CreationDate": "2019-04-30 22:31:46",
        "DeletionDate": "",
        "Score": "47",
        "ViewCount": "",
        "Body": "<p><code>{% load staticfiles %}</code> and <code>{% load admin_static %}</code> were <a href=\"https://docs.djangoproject.com/en/2.2/releases/2.1/#features-deprecated-in-2-1\" rel=\"noreferrer\">deprecated in Django 2.1</a>, and <a href=\"https://docs.djangoproject.com/en/dev/releases/3.0/#features-removed-in-3-0\" rel=\"noreferrer\">removed in Django 3.0</a>.</p>\n\n<p>If you have any of the following in your template:</p>\n\n<pre><code>{% load staticfiles %}\n{% load static from staticfiles %}\n{% load admin_static %}\n</code></pre>\n\n<p>You should replace the tag with simply:</p>\n\n<pre><code>{% load static %}\n</code></pre>\n",
        "OwnerUserId": "113962",
        "OwnerDisplayName": "",
        "LastEditorUserId": "113962",
        "LastEditorDisplayName": "",
        "LastEditDate": "2020-01-29 10:19:52",
        "LastActivityDate": "2020-01-29 10:19:52",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "60029993",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55929472",
        "CreationDate": "2020-02-02 19:54:11",
        "DeletionDate": "",
        "Score": "5",
        "ViewCount": "",
        "Body": "<p>In Django 3.0 you should use below tag instead:</p>\n\n<pre><code>{% load static %}\n</code></pre>\n",
        "OwnerUserId": "6672114",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2020-02-02 19:54:11",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57230625",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57169862",
        "CreationDate": "2019-07-27 08:50:09",
        "DeletionDate": "",
        "Score": "-1",
        "ViewCount": "",
        "Body": "<p>Since you can get the numpy source onto the machine, I would assume you can get any files you like into your user space. Have you considered installing numpy from a wheel?</p>\n\n<p>Numpy 1.16.4 has support for Python 2.7. You haven't said what architecture your nodes are, but I would be a bit surprised if there isn't a wheel available. You should be able to download it directly from PyPi yourself:</p>\n\n<p><a href=\"https://pypi.org/project/numpy/1.16.4/#files\" rel=\"nofollow noreferrer\">https://pypi.org/project/numpy/1.16.4/#files</a></p>\n\n<p>Once you've downloaded the wheel file and transferred it, assuming you've already installed <code>pip</code>, etc., you can install it:</p>\n\n<p><code>pip install --no-index --user (file).whl</code></p>\n\n<p>Also, I would be reluctant about saying that ATLAS/LAPACK is the best option. It has been benchmarked here, and it looks like OpenBLAS is just fine: <a href=\"https://markus-beuckelmann.de/blog/boosting-numpy-blas.html\" rel=\"nofollow noreferrer\">https://markus-beuckelmann.de/blog/boosting-numpy-blas.html</a>.</p>\n",
        "OwnerUserId": "761625",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-07-27 08:50:09",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "57281706",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57169862",
        "CreationDate": "2019-07-31 00:43:47",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<p>BLAS/LAPACK is an optional dependency for numpy. So, depending on what you are trying to do, you might leave ATLAS out completely.</p>\n\n<p>If you want to make sure that your numpy was compiled against the correct libraries, I would go outside of Python and numpy and use <code>ldd</code> on the compiled libraries.</p>\n\n<p>I'm on latest numpy and Python 3.7, so filenames will look different for you.</p>\n\n<pre><code>&gt; cd &lt;numpy_dir&gt;\n&gt; find . -name \"*.so\"\n\n./core/_dummy.cpython-37m-darwin.so\n./core/_multiarray_tests.cpython-37m-darwin.so\n./core/_multiarray_umath.cpython-37m-darwin.so\n./core/_operand_flag_tests.cpython-37m-darwin.so\n./core/_rational_tests.cpython-37m-darwin.so\n./core/_struct_ufunc_tests.cpython-37m-darwin.so\n./core/_umath_tests.cpython-37m-darwin.so\n./fft/fftpack_lite.cpython-37m-darwin.so\n./linalg/_umath_linalg.cpython-37m-darwin.so\n./linalg/lapack_lite.cpython-37m-darwin.so\n./random/mtrand.cpython-37m-darwin.so\n</code></pre>\n\n<p>Then I ran <code>ldd</code> (I used <code>otool -L</code> since I'm on macOS) on each file. The following 3 files were compiled against the BLAS library.</p>\n\n<pre><code>core/_multiarray_umath.cpython-37m-darwin.so\nlinalg/_umath_linalg.cpython-37m-darwin.so\nlinalg/lapack_lite.cpython-37m-darwin.so\n</code></pre>\n",
        "OwnerUserId": "2683776",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-07-31 00:43:47",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "5",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58920576",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57169862",
        "CreationDate": "2019-11-18 18:11:06",
        "DeletionDate": "",
        "Score": "0",
        "ViewCount": "",
        "Body": "<p>I did it with numpy 1.11.1 (which means that my answer may not be 100% accurate in your case) with the following receipe:</p>\n\n<pre><code>export ATLAS=&lt;folder with the atlas/lapack libraries&gt;\nexport LAPACK=$ATLAS\ncat &gt; site.cfg &lt;&lt;EOF\n[atlas]\natlas_libs = lapack, f77blas, cblas, atlas\nEOF\npython setup.py bdist_wheel\n</code></pre>\n",
        "OwnerUserId": "5847025",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-11-18 18:11:06",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "59381285",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "57169862",
        "CreationDate": "2019-12-17 19:58:48",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<p>An orthogonal suggestion, but it may be helpful in general, not just for your particular problem.</p>\n\n<p>Give a look at <a href=\"https://spack.io/\" rel=\"nofollow noreferrer\">Spack</a>.\nIt is a package manager that builds packages from sources. It is a very interesting and promising project which allows you to build a vast variety of libraries/software with just a few steps.</p>\n\n<p>I've just checked and <code>py-numpy</code> is a supported package (i.e. <code>spack list numpy</code>). If you want to install with default options (check them with <code>spack info py-numpy</code>), you can just install it with a simple <code>spack install py-numpy</code> and it will be built along with missig dependencies.</p>\n\n<p>If you want to change something, e.g. you may want to use a particular implementation or version of BLAS/LAPACK, you can easily specify the wanted dependency (i.e. <code>spack install py-numpy ^openblas</code>)</p>\n\n<p>I can assure you it will save you a lot of headaches, it did for me a lot of times. I use it both on the HPC I work on and on my local machines.</p>\n\n<p>I've just shown you a few commands, but I just scraped the surface of what you can easily do with it (you may have multiple variant of numpy built with different BLAS implementations, or same implementation with different options, or ... in case I suggest you to start looking at <a href=\"https://spack.readthedocs.io/en/latest/basic_usage.html#specs-dependencies\" rel=\"nofollow noreferrer\">\"spec syntax\"</a>).</p>\n",
        "OwnerUserId": "12494143",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-12-17 19:58:48",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58377812",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56436559",
        "CreationDate": "2019-10-14 13:25:19",
        "DeletionDate": "",
        "Score": "1",
        "ViewCount": "",
        "Body": "<p><strong>XCODE 11.1 &amp; iOS 13</strong></p>\n\n<p>Based on @Jigar Darji 's answer but a safer implementation.</p>\n\n<p>We first create a failable convenience initialiser:</p>\n\n<pre><code>extension UIImage {\n\nconvenience init?(color: UIColor, size: CGSize) {\n    UIGraphicsBeginImageContextWithOptions(size, false, 1)\n    color.set()\n    guard let ctx = UIGraphicsGetCurrentContext() else { return nil }\n    ctx.fill(CGRect(origin: .zero, size: size))\n    guard\n        let image = UIGraphicsGetImageFromCurrentImageContext(),\n        let imagePNGData = image.pngData()\n        else { return nil }\n    UIGraphicsEndImageContext()\n\n    self.init(data: imagePNGData)\n   }\n}\n</code></pre>\n\n<p>Then we extend UISegmentedControl:</p>\n\n<pre><code>extension UISegmentedControl {\n\nfunc fallBackToPreIOS13Layout(using tintColor: UIColor) {\n    if #available(iOS 13, *) {\n        let backGroundImage = UIImage(color: .clear, size: CGSize(width: 1, height: 32))\n        let dividerImage = UIImage(color: tintColor, size: CGSize(width: 1, height: 32))\n\n        setBackgroundImage(backGroundImage, for: .normal, barMetrics: .default)\n        setBackgroundImage(dividerImage, for: .selected, barMetrics: .default)\n\n        setDividerImage(dividerImage,\n                        forLeftSegmentState: .normal,\n                        rightSegmentState: .normal, barMetrics: .default)\n\n        layer.borderWidth = 1\n        layer.borderColor = tintColor.cgColor\n\n        setTitleTextAttributes([.foregroundColor: tintColor], for: .normal)\n        setTitleTextAttributes([.foregroundColor: UIColor.white], for: .selected)\n    } else {\n        self.tintColor = tintColor\n    }\n  }\n}\n</code></pre>\n",
        "OwnerUserId": "5522002",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-10-14 13:25:19",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "58521655",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "56436559",
        "CreationDate": "2019-10-23 11:17:57",
        "DeletionDate": "",
        "Score": "24",
        "ViewCount": "",
        "Body": "<p>IOS 13 and Swift 5.0 (Xcode 11.0)Segment Control 100% Working</p>\n\n<p><a href=\"https://i.stack.imgur.com/4VNuC.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/4VNuC.png\" alt=\"enter image description here\"></a></p>\n\n<p><a href=\"https://i.stack.imgur.com/tmMer.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/tmMer.png\" alt=\"enter image description here\"></a></p>\n\n<pre><code> if #available(iOS 13.0, *) {\n      yoursegmentedControl.backgroundColor = UIColor.black\n      yoursegmentedControl.layer.borderColor = UIColor.white.cgColor\n      yoursegmentedControl.selectedSegmentTintColor = UIColor.white\n      yoursegmentedControl.layer.borderWidth = 1\n\n      let titleTextAttributes = [NSAttributedString.Key.foregroundColor: UIColor.white]    \n      yoursegmentedControl.setTitleTextAttributes(titleTextAttributes, for:.normal)\n\n      let titleTextAttributes1 = [NSAttributedString.Key.foregroundColor: UIColor.black]\n      yoursegmentedControl.setTitleTextAttributes(titleTextAttributes1, for:.selected)\n  } else {\n              // Fallback on earlier versions\n}\n</code></pre>\n",
        "OwnerUserId": "6644353",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-10-23 11:17:57",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "2",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "55733335",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55730971",
        "CreationDate": "2019-04-17 17:47:17",
        "DeletionDate": "",
        "Score": "10",
        "ViewCount": "",
        "Body": "<blockquote>\n  <p>Most of the language ABI changes seem like they wouldn't cause issues, but the calling convention change for empty class types in 12 might?</p>\n</blockquote>\n\n<p>The change of the calling convention for empty classes can cause an issue on x86-64. Here's an example:</p>\n\n<p><strong>def.hpp</strong>:</p>\n\n<pre><code>struct Empty { };\n\nstruct Foo {\n    char dummy[16];\n    int a;\n\n    Foo() : a(42) { }\n};\n\nvoid fn(Empty, Foo);\n</code></pre>\n\n<p><strong>one.cpp</strong>:</p>\n\n<pre><code>#include \"def.hpp\"\n\nint main() {\n    fn(Empty(), Foo());\n}\n</code></pre>\n\n<p><strong>two.cpp</strong>:</p>\n\n<pre><code>#include &lt;stdio.h&gt;\n#include \"def.hpp\"\n\nvoid fn(Empty e, Foo foo) {\n    printf(\"%d\\n\", foo.a);\n}\n</code></pre>\n\n<p>Now, if you compile these with G++ 8 with differing ABIs of 11 and 12, for example:</p>\n\n<pre><code>g++ -c -fabi-version=11 one.cpp\ng++ -c -fabi-version=12 two.cpp\ng++ one.o two.o\n</code></pre>\n\n<p>the resulting <code>a.out</code> won't print the expected <code>42</code>.</p>\n\n<p>The reason is that the old ABI (11) reserves space for <code>Empty()</code> on the stack, but the new ABI (12) doesn't. So the address of <code>foo</code> will differ between the caller and the callee side. </p>\n\n<p>(Note: I've included <code>Foo::dummy</code> so <code>Foo</code> gets passed using the stack instead of registers. If <code>Foo</code> was passed using registers, there would be no problem.)</p>\n",
        "OwnerUserId": "8157187",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-04-17 17:47:17",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    },
    {
        "Id": "55736661",
        "PostTypeId": "2",
        "AcceptedAnswerId": "",
        "ParentId": "55730971",
        "CreationDate": "2019-04-17 22:12:38",
        "DeletionDate": "",
        "Score": "4",
        "ViewCount": "",
        "Body": "<p>Most of them alter mangling in minor ways, which could cause some undefined references while linking, or just some code bloat due to identical source code producing two equivalent symbols with different names, so won't be merged by the linker.</p>\n\n<blockquote>\n  <p>the calling convention change for empty class types in 12 might?</p>\n</blockquote>\n\n<p>Yes, definitely. If you have non-final parameters that are empty types then that affects the ABI for the function, and differences can lead to undefined behaviour (in practice, accessing junk on the stack, or parameters getting the wrong values).</p>\n",
        "OwnerUserId": "981959",
        "OwnerDisplayName": "",
        "LastEditorUserId": "",
        "LastEditorDisplayName": "",
        "LastEditDate": "",
        "LastActivityDate": "2019-04-17 22:12:38",
        "Title": "",
        "Tags": "",
        "AnswerCount": "",
        "CommentCount": "0",
        "FavoriteCount": "",
        "ClosedDate": "",
        "CommunityOwnedDate": ""
    }
]